// generated by koffee 0.19.0

/*
00000000  00000000   0000000   000000000  000   000  00000000   00000000   0000000  
000       000       000   000     000     000   000  000   000  000       000       
000000    0000000   000000000     000     000   000  0000000    0000000   0000000   
000       000       000   000     000     000   000  000   000  000            000  
000       00000000  000   000     000      0000000   000   000  00000000  0000000
 */
var FEATURES, hasFeature, injectFeature, logFeatures;

FEATURES = [
    {
        flag: 'header',
        key: 'header',
        desc: 'prefix with "generated by" header',
        enabled: false
    }, {
        flag: 'config-parameters',
        key: 'config_parameters',
        desc: 'enable config parameters',
        enabled: true
    }, {
        flag: 'console-shortcut',
        key: 'console_shortcut',
        desc: 'replace log with console.log',
        enabled: true
    }, {
        flag: 'constructor-shortcut',
        key: 'constructor_shortcut',
        desc: 'replace @: with constructor:',
        enabled: true
    }, {
        flag: 'negative-index',
        key: 'negative_index',
        desc: 'replace a[-1] with a[-1..-1]',
        enabled: true
    }, {
        flag: 'optional-commata',
        key: 'optional_commata',
        desc: 'insert commata when possible',
        enabled: true
    }, {
        flag: 'rewrite',
        key: 'rewrite',
        desc: 'rewrite tokens',
        enabled: true
    }
];

hasFeature = function(options, feature) {
    var ref;
    return (options != null ? (ref = options.feature) != null ? ref[feature] : void 0 : void 0) !== false;
};

injectFeature = function(options) {
    var defaultFeatures, extend, feature, ref;
    if (options != null) {
        options;
    } else {
        options = {};
    }
    defaultFeatures = {};
    FEATURES.map(function(f) {
        return defaultFeatures[f.key] = f.enabled;
    });
    extend = require('./helpers').extend;
    feature = extend(defaultFeatures, (ref = options.feature) != null ? ref : {});
    options = extend({
        feature: feature
    }, options);
    return options;
};

logFeatures = function() {
    var gray, logMetas, pad;
    pad = require('./helpers').pad;
    gray = require('colorette').gray;
    console.log("\n" + (gray('Features:')) + "\n\n" + (FEATURES.map(function(f) {
        return "    " + (pad(f.flag)) + (gray(f.desc));
    }).join('\n')) + "\n");
    logMetas = require('./meta').logMetas;
    return logMetas();
};

module.exports = {
    FEATURES: FEATURES,
    injectFeature: injectFeature,
    logFeatures: logFeatures,
    hasFeature: hasFeature
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmVhdHVyZXMuanMiLCJzb3VyY2VSb290IjoiLiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7Ozs7QUFBQSxJQUFBOztBQVFBLFFBQUEsR0FBVztJQUNQO1FBQUUsSUFBQSxFQUFNLFFBQVI7UUFBZ0MsR0FBQSxFQUFLLFFBQXJDO1FBQTZELElBQUEsRUFBTSxtQ0FBbkU7UUFBdUcsT0FBQSxFQUFTLEtBQWhIO0tBRE8sRUFFUDtRQUFFLElBQUEsRUFBTSxtQkFBUjtRQUFnQyxHQUFBLEVBQUssbUJBQXJDO1FBQTZELElBQUEsRUFBTSwwQkFBbkU7UUFBdUcsT0FBQSxFQUFTLElBQWhIO0tBRk8sRUFHUDtRQUFFLElBQUEsRUFBTSxrQkFBUjtRQUFnQyxHQUFBLEVBQUssa0JBQXJDO1FBQTZELElBQUEsRUFBTSw4QkFBbkU7UUFBdUcsT0FBQSxFQUFTLElBQWhIO0tBSE8sRUFJUDtRQUFFLElBQUEsRUFBTSxzQkFBUjtRQUFnQyxHQUFBLEVBQUssc0JBQXJDO1FBQTZELElBQUEsRUFBTSw4QkFBbkU7UUFBdUcsT0FBQSxFQUFTLElBQWhIO0tBSk8sRUFLUDtRQUFFLElBQUEsRUFBTSxnQkFBUjtRQUFnQyxHQUFBLEVBQUssZ0JBQXJDO1FBQTZELElBQUEsRUFBTSw4QkFBbkU7UUFBdUcsT0FBQSxFQUFTLElBQWhIO0tBTE8sRUFNUDtRQUFFLElBQUEsRUFBTSxrQkFBUjtRQUFnQyxHQUFBLEVBQUssa0JBQXJDO1FBQTZELElBQUEsRUFBTSw4QkFBbkU7UUFBdUcsT0FBQSxFQUFTLElBQWhIO0tBTk8sRUFPUDtRQUFFLElBQUEsRUFBTSxTQUFSO1FBQWdDLEdBQUEsRUFBSyxTQUFyQztRQUE2RCxJQUFBLEVBQU0sZ0JBQW5FO1FBQXVHLE9BQUEsRUFBUyxJQUFoSDtLQVBPOzs7QUFVWCxVQUFBLEdBQWEsU0FBQyxPQUFELEVBQVUsT0FBVjtBQUFzQixRQUFBO21FQUFrQixDQUFBLE9BQUEsb0JBQWxCLEtBQThCO0FBQXBEOztBQUViLGFBQUEsR0FBZ0IsU0FBQyxPQUFEO0FBRVosUUFBQTs7UUFBQTs7UUFBQSxVQUFXOztJQUVYLGVBQUEsR0FBa0I7SUFDbEIsUUFBUSxDQUFDLEdBQVQsQ0FBYSxTQUFDLENBQUQ7ZUFBTyxlQUFnQixDQUFBLENBQUMsQ0FBQyxHQUFGLENBQWhCLEdBQXlCLENBQUMsQ0FBQztJQUFsQyxDQUFiO0lBRUUsU0FBVyxPQUFBLENBQVEsV0FBUjtJQUViLE9BQUEsR0FBVSxNQUFBLENBQU8sZUFBUCwwQ0FBMEMsRUFBMUM7SUFFVixPQUFBLEdBQVUsTUFBQSxDQUFPO1FBQUUsT0FBQSxFQUFTLE9BQVg7S0FBUCxFQUE2QixPQUE3QjtXQUNWO0FBWlk7O0FBY2hCLFdBQUEsR0FBYyxTQUFBO0FBRVYsUUFBQTtJQUFFLE1BQVEsT0FBQSxDQUFRLFdBQVI7SUFDUixPQUFTLE9BQUEsQ0FBUSxXQUFSO0lBQW1CLE9BQUEsQ0FDOUIsR0FEOEIsQ0FDMUIsSUFBQSxHQUFJLENBQUMsSUFBQSxDQUFLLFdBQUwsQ0FBRCxDQUFKLEdBQXNCLE1BQXRCLEdBQTJCLENBQUUsUUFBUSxDQUFDLEdBQVQsQ0FBYSxTQUFDLENBQUQ7ZUFBTyxNQUFBLEdBQU0sQ0FBQyxHQUFBLENBQUksQ0FBQyxDQUFDLElBQU4sQ0FBRCxDQUFOLEdBQW1CLENBQUMsSUFBQSxDQUFLLENBQUMsQ0FBQyxJQUFQLENBQUQ7SUFBMUIsQ0FBYixDQUFzRCxDQUFDLElBQXZELENBQTRELElBQTVELENBQUYsQ0FBM0IsR0FBZ0csSUFEdEU7SUFHNUIsV0FBYSxPQUFBLENBQVEsUUFBUjtXQUNmLFFBQUEsQ0FBQTtBQVBVOztBQVNkLE1BQU0sQ0FBQyxPQUFQLEdBQWlCO0lBQUUsVUFBQSxRQUFGO0lBQVksZUFBQSxhQUFaO0lBQTJCLGFBQUEsV0FBM0I7SUFBd0MsWUFBQSxVQUF4QyIsInNvdXJjZXNDb250ZW50IjpbIiMjI1xuMDAwMDAwMDAgIDAwMDAwMDAwICAgMDAwMDAwMCAgIDAwMDAwMDAwMCAgMDAwICAgMDAwICAwMDAwMDAwMCAgIDAwMDAwMDAwICAgMDAwMDAwMCAgXG4wMDAgICAgICAgMDAwICAgICAgIDAwMCAgIDAwMCAgICAgMDAwICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgICAgICBcbjAwMDAwMCAgICAwMDAwMDAwICAgMDAwMDAwMDAwICAgICAwMDAgICAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgICAwMDAwMDAwICAgMDAwMDAwMCAgIFxuMDAwICAgICAgIDAwMCAgICAgICAwMDAgICAwMDAgICAgIDAwMCAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgICAgICAgIDAwMCAgXG4wMDAgICAgICAgMDAwMDAwMDAgIDAwMCAgIDAwMCAgICAgMDAwICAgICAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgMDAwMDAwMDAgIDAwMDAwMDAgICBcbiMjI1xuXG5GRUFUVVJFUyA9IFtcbiAgICB7IGZsYWc6ICdoZWFkZXInICAgICAgICAgICAgICAgIGtleTogJ2hlYWRlcicgICAgICAgICAgICAgICAgZGVzYzogJ3ByZWZpeCB3aXRoIFwiZ2VuZXJhdGVkIGJ5XCIgaGVhZGVyJyBlbmFibGVkOiBmYWxzZSB9XG4gICAgeyBmbGFnOiAnY29uZmlnLXBhcmFtZXRlcnMnICAgICBrZXk6ICdjb25maWdfcGFyYW1ldGVycycgICAgIGRlc2M6ICdlbmFibGUgY29uZmlnIHBhcmFtZXRlcnMnICAgICAgICAgIGVuYWJsZWQ6IHRydWUgIH1cbiAgICB7IGZsYWc6ICdjb25zb2xlLXNob3J0Y3V0JyAgICAgIGtleTogJ2NvbnNvbGVfc2hvcnRjdXQnICAgICAgZGVzYzogJ3JlcGxhY2UgbG9nIHdpdGggY29uc29sZS5sb2cnICAgICAgZW5hYmxlZDogdHJ1ZSAgfVxuICAgIHsgZmxhZzogJ2NvbnN0cnVjdG9yLXNob3J0Y3V0JyAga2V5OiAnY29uc3RydWN0b3Jfc2hvcnRjdXQnICBkZXNjOiAncmVwbGFjZSBAOiB3aXRoIGNvbnN0cnVjdG9yOicgICAgICBlbmFibGVkOiB0cnVlICB9XG4gICAgeyBmbGFnOiAnbmVnYXRpdmUtaW5kZXgnICAgICAgICBrZXk6ICduZWdhdGl2ZV9pbmRleCcgICAgICAgIGRlc2M6ICdyZXBsYWNlIGFbLTFdIHdpdGggYVstMS4uLTFdJyAgICAgIGVuYWJsZWQ6IHRydWUgIH1cbiAgICB7IGZsYWc6ICdvcHRpb25hbC1jb21tYXRhJyAgICAgIGtleTogJ29wdGlvbmFsX2NvbW1hdGEnICAgICAgZGVzYzogJ2luc2VydCBjb21tYXRhIHdoZW4gcG9zc2libGUnICAgICAgZW5hYmxlZDogdHJ1ZSAgfVxuICAgIHsgZmxhZzogJ3Jld3JpdGUnICAgICAgICAgICAgICAga2V5OiAncmV3cml0ZScgICAgICAgICAgICAgICBkZXNjOiAncmV3cml0ZSB0b2tlbnMnICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiB0cnVlICB9XG5dXG5cbmhhc0ZlYXR1cmUgPSAob3B0aW9ucywgZmVhdHVyZSkgLT4gb3B0aW9ucz8uZmVhdHVyZT9bZmVhdHVyZV0gIT0gZmFsc2VcblxuaW5qZWN0RmVhdHVyZSA9IChvcHRpb25zKSAtPiAjIG1ha2Ugc3VyZSB0aGF0IG9wdGlvbnMgaGFzIGEgZmVhdHVyZSBzZXRcbiAgICBcbiAgICBvcHRpb25zID89IHt9XG4gICAgXG4gICAgZGVmYXVsdEZlYXR1cmVzID0ge31cbiAgICBGRUFUVVJFUy5tYXAgKGYpIC0+IGRlZmF1bHRGZWF0dXJlc1tmLmtleV0gPSBmLmVuYWJsZWRcbiAgICBcbiAgICB7IGV4dGVuZCB9ID0gcmVxdWlyZSAnLi9oZWxwZXJzJ1xuICAgIFxuICAgIGZlYXR1cmUgPSBleHRlbmQgZGVmYXVsdEZlYXR1cmVzLCBvcHRpb25zLmZlYXR1cmUgPyB7fVxuICAgIFxuICAgIG9wdGlvbnMgPSBleHRlbmQgeyBmZWF0dXJlOiBmZWF0dXJlIH0sIG9wdGlvbnNcbiAgICBvcHRpb25zXG5cbmxvZ0ZlYXR1cmVzID0gLT5cbiAgICBcbiAgICB7IHBhZCB9ID0gcmVxdWlyZSAnLi9oZWxwZXJzJ1xuICAgIHsgZ3JheSB9ID0gcmVxdWlyZSAnY29sb3JldHRlJ1xuICAgIGxvZyBcIlxcbiN7Z3JheSAnRmVhdHVyZXM6J31cXG5cXG4jeyBGRUFUVVJFUy5tYXAoKGYpIC0+IFwiICAgICN7cGFkIGYuZmxhZ30je2dyYXkgZi5kZXNjfVwiKS5qb2luKCdcXG4nKSB9XFxuXCJcbiAgICBcbiAgICB7IGxvZ01ldGFzIH0gPSByZXF1aXJlICcuL21ldGEnXG4gICAgbG9nTWV0YXMoKVxuICAgIFxubW9kdWxlLmV4cG9ydHMgPSB7IEZFQVRVUkVTLCBpbmplY3RGZWF0dXJlLCBsb2dGZWF0dXJlcywgaGFzRmVhdHVyZSB9XG4iXX0=
//# sourceURL=../coffee/features.coffee