// generated by koffee 0.17.0

/*
00000000  00000000   0000000   000000000  000   000  00000000   00000000   0000000  
000       000       000   000     000     000   000  000   000  000       000       
000000    0000000   000000000     000     000   000  0000000    0000000   0000000   
000       000       000   000     000     000   000  000   000  000            000  
000       00000000  000   000     000      0000000   000   000  00000000  0000000
 */
var FEATURES, hasFeature, injectFeature, logFeatures;

FEATURES = [
    {
        flag: 'header',
        key: 'header',
        desc: 'prefix with "generated by" header',
        enabled: false
    }, {
        flag: 'config-parameters',
        key: 'config_parameters',
        desc: 'enable config parameters',
        enabled: true
    }, {
        flag: 'console-shortcut',
        key: 'console_shortcut',
        desc: 'replace log with console.log',
        enabled: true
    }, {
        flag: 'constructor-shortcut',
        key: 'constructor_shortcut',
        desc: 'replace @: with constructor:',
        enabled: true
    }, {
        flag: 'negative-index',
        key: 'negative_index',
        desc: 'replace a[-1] with a[-1..-1]',
        enabled: true
    }, {
        flag: 'optional-commata',
        key: 'optional_commata',
        desc: 'insert commata when possible',
        enabled: true
    }, {
        flag: 'rewrite',
        key: 'rewrite',
        desc: 'rewrite tokens',
        enabled: true
    }
];

hasFeature = function(options, feature) {
    var ref;
    return (options != null ? (ref = options.feature) != null ? ref[feature] : void 0 : void 0) !== false;
};

injectFeature = function(options) {
    var defaultFeatures, extend, feature, ref;
    if (options != null) {
        options;
    } else {
        options = {};
    }
    defaultFeatures = {};
    FEATURES.map(function(f) {
        return defaultFeatures[f.key] = f.enabled;
    });
    extend = require('./helpers').extend;
    feature = extend(defaultFeatures, (ref = options.feature) != null ? ref : {});
    options = extend({
        feature: feature
    }, options);
    return options;
};

logFeatures = function() {
    var gray, pad;
    pad = require('./helpers').pad;
    gray = require('colorette').gray;
    return console.log("\n" + (gray('Features:')) + "\n\n" + (FEATURES.map(function(f) {
        return "    " + (pad(f.flag)) + (gray(f.desc));
    }).join('\n')) + "\n");
};

module.exports = {
    FEATURES: FEATURES,
    injectFeature: injectFeature,
    logFeatures: logFeatures,
    hasFeature: hasFeature
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmVhdHVyZXMuanMiLCJzb3VyY2VSb290IjoiLiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7Ozs7QUFBQSxJQUFBOztBQVFBLFFBQUEsR0FBVztJQUNQO1FBQUUsSUFBQSxFQUFNLFFBQVI7UUFBZ0MsR0FBQSxFQUFLLFFBQXJDO1FBQTZELElBQUEsRUFBTSxtQ0FBbkU7UUFBdUcsT0FBQSxFQUFTLEtBQWhIO0tBRE8sRUFFUDtRQUFFLElBQUEsRUFBTSxtQkFBUjtRQUFnQyxHQUFBLEVBQUssbUJBQXJDO1FBQTZELElBQUEsRUFBTSwwQkFBbkU7UUFBdUcsT0FBQSxFQUFTLElBQWhIO0tBRk8sRUFHUDtRQUFFLElBQUEsRUFBTSxrQkFBUjtRQUFnQyxHQUFBLEVBQUssa0JBQXJDO1FBQTZELElBQUEsRUFBTSw4QkFBbkU7UUFBdUcsT0FBQSxFQUFTLElBQWhIO0tBSE8sRUFJUDtRQUFFLElBQUEsRUFBTSxzQkFBUjtRQUFnQyxHQUFBLEVBQUssc0JBQXJDO1FBQTZELElBQUEsRUFBTSw4QkFBbkU7UUFBdUcsT0FBQSxFQUFTLElBQWhIO0tBSk8sRUFLUDtRQUFFLElBQUEsRUFBTSxnQkFBUjtRQUFnQyxHQUFBLEVBQUssZ0JBQXJDO1FBQTZELElBQUEsRUFBTSw4QkFBbkU7UUFBdUcsT0FBQSxFQUFTLElBQWhIO0tBTE8sRUFNUDtRQUFFLElBQUEsRUFBTSxrQkFBUjtRQUFnQyxHQUFBLEVBQUssa0JBQXJDO1FBQTZELElBQUEsRUFBTSw4QkFBbkU7UUFBdUcsT0FBQSxFQUFTLElBQWhIO0tBTk8sRUFPUDtRQUFFLElBQUEsRUFBTSxTQUFSO1FBQWdDLEdBQUEsRUFBSyxTQUFyQztRQUE2RCxJQUFBLEVBQU0sZ0JBQW5FO1FBQXVHLE9BQUEsRUFBUyxJQUFoSDtLQVBPOzs7QUFVWCxVQUFBLEdBQWEsU0FBQyxPQUFELEVBQVUsT0FBVjtBQUFzQixRQUFBO21FQUFrQixDQUFBLE9BQUEsb0JBQWxCLEtBQThCO0FBQXBEOztBQUViLGFBQUEsR0FBZ0IsU0FBQyxPQUFEO0FBRVosUUFBQTs7UUFBQTs7UUFBQSxVQUFXOztJQUVYLGVBQUEsR0FBa0I7SUFDbEIsUUFBUSxDQUFDLEdBQVQsQ0FBYSxTQUFDLENBQUQ7ZUFBTyxlQUFnQixDQUFBLENBQUMsQ0FBQyxHQUFGLENBQWhCLEdBQXlCLENBQUMsQ0FBQztJQUFsQyxDQUFiO0lBRUUsU0FBVyxPQUFBLENBQVEsV0FBUjtJQUViLE9BQUEsR0FBVSxNQUFBLENBQU8sZUFBUCwwQ0FBMEMsRUFBMUM7SUFFVixPQUFBLEdBQVUsTUFBQSxDQUFPO1FBQUUsT0FBQSxFQUFTLE9BQVg7S0FBUCxFQUE2QixPQUE3QjtXQUNWO0FBWlk7O0FBY2hCLFdBQUEsR0FBYyxTQUFBO0FBRVYsUUFBQTtJQUFFLE1BQVEsT0FBQSxDQUFRLFdBQVI7SUFDUixPQUFTLE9BQUEsQ0FBUSxXQUFSO1dBQW1CLE9BQUEsQ0FDOUIsR0FEOEIsQ0FDMUIsSUFBQSxHQUFJLENBQUMsSUFBQSxDQUFLLFdBQUwsQ0FBRCxDQUFKLEdBQXNCLE1BQXRCLEdBQTJCLENBQUUsUUFBUSxDQUFDLEdBQVQsQ0FBYSxTQUFDLENBQUQ7ZUFBTyxNQUFBLEdBQU0sQ0FBQyxHQUFBLENBQUksQ0FBQyxDQUFDLElBQU4sQ0FBRCxDQUFOLEdBQW1CLENBQUMsSUFBQSxDQUFLLENBQUMsQ0FBQyxJQUFQLENBQUQ7SUFBMUIsQ0FBYixDQUFzRCxDQUFDLElBQXZELENBQTRELElBQTVELENBQUYsQ0FBM0IsR0FBZ0csSUFEdEU7QUFIcEI7O0FBTWQsTUFBTSxDQUFDLE9BQVAsR0FBaUI7SUFBRSxVQUFBLFFBQUY7SUFBWSxlQUFBLGFBQVo7SUFBMkIsYUFBQSxXQUEzQjtJQUF3QyxZQUFBLFVBQXhDIiwic291cmNlc0NvbnRlbnQiOlsiIyMjXG4wMDAwMDAwMCAgMDAwMDAwMDAgICAwMDAwMDAwICAgMDAwMDAwMDAwICAwMDAgICAwMDAgIDAwMDAwMDAwICAgMDAwMDAwMDAgICAwMDAwMDAwICBcbjAwMCAgICAgICAwMDAgICAgICAgMDAwICAgMDAwICAgICAwMDAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAgICAgMDAwICAgICAgIFxuMDAwMDAwICAgIDAwMDAwMDAgICAwMDAwMDAwMDAgICAgIDAwMCAgICAgMDAwICAgMDAwICAwMDAwMDAwICAgIDAwMDAwMDAgICAwMDAwMDAwICAgXG4wMDAgICAgICAgMDAwICAgICAgIDAwMCAgIDAwMCAgICAgMDAwICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICAgICAgICAgMDAwICBcbjAwMCAgICAgICAwMDAwMDAwMCAgMDAwICAgMDAwICAgICAwMDAgICAgICAwMDAwMDAwICAgMDAwICAgMDAwICAwMDAwMDAwMCAgMDAwMDAwMCAgIFxuIyMjXG5cbkZFQVRVUkVTID0gW1xuICAgIHsgZmxhZzogJ2hlYWRlcicgICAgICAgICAgICAgICAga2V5OiAnaGVhZGVyJyAgICAgICAgICAgICAgICBkZXNjOiAncHJlZml4IHdpdGggXCJnZW5lcmF0ZWQgYnlcIiBoZWFkZXInIGVuYWJsZWQ6IGZhbHNlIH1cbiAgICB7IGZsYWc6ICdjb25maWctcGFyYW1ldGVycycgICAgIGtleTogJ2NvbmZpZ19wYXJhbWV0ZXJzJyAgICAgZGVzYzogJ2VuYWJsZSBjb25maWcgcGFyYW1ldGVycycgICAgICAgICAgZW5hYmxlZDogdHJ1ZSAgfVxuICAgIHsgZmxhZzogJ2NvbnNvbGUtc2hvcnRjdXQnICAgICAga2V5OiAnY29uc29sZV9zaG9ydGN1dCcgICAgICBkZXNjOiAncmVwbGFjZSBsb2cgd2l0aCBjb25zb2xlLmxvZycgICAgICBlbmFibGVkOiB0cnVlICB9XG4gICAgeyBmbGFnOiAnY29uc3RydWN0b3Itc2hvcnRjdXQnICBrZXk6ICdjb25zdHJ1Y3Rvcl9zaG9ydGN1dCcgIGRlc2M6ICdyZXBsYWNlIEA6IHdpdGggY29uc3RydWN0b3I6JyAgICAgIGVuYWJsZWQ6IHRydWUgIH1cbiAgICB7IGZsYWc6ICduZWdhdGl2ZS1pbmRleCcgICAgICAgIGtleTogJ25lZ2F0aXZlX2luZGV4JyAgICAgICAgZGVzYzogJ3JlcGxhY2UgYVstMV0gd2l0aCBhWy0xLi4tMV0nICAgICAgZW5hYmxlZDogdHJ1ZSAgfVxuICAgIHsgZmxhZzogJ29wdGlvbmFsLWNvbW1hdGEnICAgICAga2V5OiAnb3B0aW9uYWxfY29tbWF0YScgICAgICBkZXNjOiAnaW5zZXJ0IGNvbW1hdGEgd2hlbiBwb3NzaWJsZScgICAgICBlbmFibGVkOiB0cnVlICB9XG4gICAgeyBmbGFnOiAncmV3cml0ZScgICAgICAgICAgICAgICBrZXk6ICdyZXdyaXRlJyAgICAgICAgICAgICAgIGRlc2M6ICdyZXdyaXRlIHRva2VucycgICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUgIH1cbl1cblxuaGFzRmVhdHVyZSA9IChvcHRpb25zLCBmZWF0dXJlKSAtPiBvcHRpb25zPy5mZWF0dXJlP1tmZWF0dXJlXSAhPSBmYWxzZVxuXG5pbmplY3RGZWF0dXJlID0gKG9wdGlvbnMpIC0+ICMgbWFrZSBzdXJlIHRoYXQgb3B0aW9ucyBoYXMgYSBmZWF0dXJlIHNldFxuICAgIFxuICAgIG9wdGlvbnMgPz0ge31cbiAgICBcbiAgICBkZWZhdWx0RmVhdHVyZXMgPSB7fVxuICAgIEZFQVRVUkVTLm1hcCAoZikgLT4gZGVmYXVsdEZlYXR1cmVzW2Yua2V5XSA9IGYuZW5hYmxlZFxuICAgIFxuICAgIHsgZXh0ZW5kIH0gPSByZXF1aXJlICcuL2hlbHBlcnMnXG4gICAgXG4gICAgZmVhdHVyZSA9IGV4dGVuZCBkZWZhdWx0RmVhdHVyZXMsIG9wdGlvbnMuZmVhdHVyZSA/IHt9XG4gICAgXG4gICAgb3B0aW9ucyA9IGV4dGVuZCB7IGZlYXR1cmU6IGZlYXR1cmUgfSwgb3B0aW9uc1xuICAgIG9wdGlvbnNcblxubG9nRmVhdHVyZXMgPSAtPlxuICAgIFxuICAgIHsgcGFkIH0gPSByZXF1aXJlICcuL2hlbHBlcnMnXG4gICAgeyBncmF5IH0gPSByZXF1aXJlICdjb2xvcmV0dGUnXG4gICAgbG9nIFwiXFxuI3tncmF5ICdGZWF0dXJlczonfVxcblxcbiN7IEZFQVRVUkVTLm1hcCgoZikgLT4gXCIgICAgI3twYWQgZi5mbGFnfSN7Z3JheSBmLmRlc2N9XCIpLmpvaW4oJ1xcbicpIH1cXG5cIlxuICAgIFxubW9kdWxlLmV4cG9ydHMgPSB7IEZFQVRVUkVTLCBpbmplY3RGZWF0dXJlLCBsb2dGZWF0dXJlcywgaGFzRmVhdHVyZSB9XG4iXX0=
//# sourceURL=../coffee/features.coffee