// Generated by koffee 0.5.0

/*
000   000  00000000  000      00000000   00000000  00000000    0000000  
000   000  000       000      000   000  000       000   000  000       
000000000  0000000   000      00000000   0000000   0000000    0000000   
000   000  000       000      000        000       000   000       000  
000   000  00000000  0000000  000        00000000  000   000  0000000
 */
var arrayEgal, buildLocationData, egal, extend, flatten, ref, repeat, syntaxErrorToString;

exports.injectFeature = function(options) {
    var defaultFeatures, feature, ref;
    if (options == null) {
        options = {};
    }
    defaultFeatures = {
        header: false,
        rewrite: true,
        'negative-index': true,
        'config-parameters': true,
        'constructor-shortcut': true
    };
    feature = extend(defaultFeatures, (ref = options.feature) != null ? ref : {});
    options = extend({
        feature: feature
    }, options);
    return options;
};

exports.starts = function(string, literal, start) {
    return literal === string.substr(start, literal.length);
};

exports.ends = function(string, literal, back) {
    var len;
    len = literal.length;
    return literal === string.substr(string.length - len - (back || 0), len);
};

exports.repeat = repeat = function(str, n) {
    var res;
    res = '';
    while (n > 0) {
        if (n & 1) {
            res += str;
        }
        n >>>= 1;
        str += str;
    }
    return res;
};

exports.pad = function(str, length) {
    var spaces;
    if (length == null) {
        length = 24;
    }
    spaces = length - str.length;
    spaces = spaces > 0 ? Array(spaces + 1).join(' ') : '';
    return "" + str + spaces;
};

exports.compact = function(array) {
    var i, item, len1, results;
    results = [];
    for (i = 0, len1 = array.length; i < len1; i++) {
        item = array[i];
        if (item) {
            results.push(item);
        }
    }
    return results;
};

exports.count = function(string, substr) {
    var num, pos;
    num = pos = 0;
    if (!substr.length) {
        return 1 / 0;
    }
    while (pos = 1 + string.indexOf(substr, pos)) {
        num++;
    }
    return num;
};

exports.merge = function(options, overrides) {
    return extend(extend({}, options), overrides);
};

exports.extend = extend = function(object, properties) {
    var key, val;
    for (key in properties) {
        val = properties[key];
        object[key] = val;
    }
    return object;
};

exports.flatten = flatten = function(array) {
    var element, flattened, i, len1;
    flattened = [];
    for (i = 0, len1 = array.length; i < len1; i++) {
        element = array[i];
        if ('[object Array]' === Object.prototype.toString.call(element)) {
            flattened = flattened.concat(flatten(element));
        } else {
            flattened.push(element);
        }
    }
    return flattened;
};

exports.del = function(obj, key) {
    var val;
    val = obj[key];
    delete obj[key];
    return val;
};

exports.some = (ref = Array.prototype.some) != null ? ref : function(fn) {
    var e, i, len1, ref1;
    ref1 = this;
    for (i = 0, len1 = ref1.length; i < len1; i++) {
        e = ref1[i];
        if (fn(e)) {
            return true;
        }
    }
    return false;
};

buildLocationData = function(first, last) {
    if (!last) {
        return first;
    } else {
        return {
            first_line: first.first_line,
            first_column: first.first_column,
            last_line: last.last_line,
            last_column: last.last_column
        };
    }
};

exports.addLocationDataFn = function(first, last) {
    return function(obj) {
        if (((typeof obj) === 'object') && (!!obj['updateLocationDataIfMissing'])) {
            obj.updateLocationDataIfMissing(buildLocationData(first, last));
        }
        return obj;
    };
};

exports.locationDataToString = function(obj) {
    var locationData;
    if (("2" in obj) && ("first_line" in obj[2])) {
        locationData = obj[2];
    } else if ("first_line" in obj) {
        locationData = obj;
    }
    if (locationData) {
        return ((locationData.first_line + 1) + ":" + (locationData.first_column + 1) + "-") + ((locationData.last_line + 1) + ":" + (locationData.last_column + 1));
    } else {
        return "No location data";
    }
};

exports.baseFileName = function(file, stripExt, useWinPathSep) {
    var parts, pathSep;
    if (stripExt == null) {
        stripExt = false;
    }
    if (useWinPathSep == null) {
        useWinPathSep = false;
    }
    pathSep = useWinPathSep ? /\\|\// : /\//;
    parts = file.split(pathSep);
    file = parts[parts.length - 1];
    if (!(stripExt && file.indexOf('.') >= 0)) {
        return file;
    }
    parts = file.split('.');
    parts.pop();
    if (/^[ck]offee$/.test(parts[parts.length - 1]) && parts.length > 1) {
        parts.pop();
    }
    return parts.join('.');
};

exports.isCoffee = function(file) {
    return /\.[ck]offee$/.test(file);
};

exports.throwSyntaxError = function(message, location) {
    var error;
    error = new SyntaxError(message);
    error.location = location;
    error.toString = syntaxErrorToString;
    error.stack = error.toString();
    throw error;
};

exports.updateSyntaxError = function(error, code, filename) {
    if (error.toString === syntaxErrorToString) {
        error.code || (error.code = code);
        error.filename || (error.filename = filename);
        error.stack = error.toString();
    }
    return error;
};

syntaxErrorToString = function() {
    var codeLine, colorize, colorsEnabled, end, filename, first_column, first_line, last_column, last_line, marker, ref1, ref2, ref3, ref4, start;
    if (!(this.code && this.location)) {
        return Error.prototype.toString.call(this);
    }
    ref1 = this.location, first_line = ref1.first_line, first_column = ref1.first_column, last_line = ref1.last_line, last_column = ref1.last_column;
    if (last_line == null) {
        last_line = first_line;
    }
    if (last_column == null) {
        last_column = first_column;
    }
    filename = this.filename || '[stdin]';
    codeLine = this.code.split('\n')[first_line];
    start = first_column;
    end = first_line === last_line ? last_column + 1 : codeLine.length;
    marker = codeLine.slice(0, start).replace(/[^\s]/g, ' ') + repeat('^', end - start);
    if (typeof process !== "undefined" && process !== null) {
        colorsEnabled = ((ref2 = process.stdout) != null ? ref2.isTTY : void 0) && !((ref3 = process.env) != null ? ref3.NODE_DISABLE_COLORS : void 0);
    }
    if ((ref4 = this.colorful) != null ? ref4 : colorsEnabled) {
        colorize = function(str) {
            return "\x1B[1;31m" + str + "\x1B[0m";
        };
        codeLine = codeLine.slice(0, start) + colorize(codeLine.slice(start, end)) + codeLine.slice(end);
        marker = colorize(marker);
    }
    return filename + ":" + (first_line + 1) + ":" + (first_column + 1) + ": error: " + this.message + "\n" + codeLine + "\n" + marker;
};

exports.nameWhitespaceCharacter = function(string) {
    switch (string) {
        case ' ':
            return 'space';
        case '\n':
            return 'newline';
        case '\r':
            return 'carriage return';
        case '\t':
            return 'tab';
        default:
            return string;
    }
};

egal = function(a, b) {
    if (a === b) {
        return a !== 0 || 1 / a === 1 / b;
    } else {
        return a !== a && b !== b;
    }
};

arrayEgal = function(a, b) {
    var el, i, idx, len1;
    if (egal(a, b)) {
        return true;
    } else if (a instanceof Array && b instanceof Array) {
        if (a.length !== b.length) {
            return false;
        }
        for (idx = i = 0, len1 = a.length; i < len1; idx = ++i) {
            el = a[idx];
            if (!arrayEgal(el, b[idx])) {
                return false;
            }
        }
        return true;
    }
};

exports.eq = function(a, b, msg) {
    return ok(egal(a, b), msg || ("\x1B[0;90m\n <<< expected >>>\n\x1B[0;93m" + a + "\x1B[0;90m<<< to equal >>>\n\x1B[0;93m" + b + "\x1B[0;90m<<< expected >>>\n"));
};

exports.arrayEq = function(a, b, msg) {
    return ok(arrayEgal(a, b), msg || ("\x1B[0;90m\n >>>\n\x1B[0;93m" + a + "\x1B[0;90m<<< to deep equal >>>\n\x1B[0;93m" + b + "\x1B[0;90m<<< expected >>>\n"));
};

exports.toJS = function(str) {
    return Koffee.compile(str, {
        bare: true
    }).replace(/^\s+|\s+$/g, '');
};

exports.stringify = function(o) {
    var noon;
    noon = require('noon');
    return noon.stringify(o, {
        circular: true,
        colors: true
    });
};

exports.initTest = function() {
    extend(global, require('assert'));
    global.Koffee = require('./koffee');
    global._ = require('underscore');
    extend(global, exports);
    if (!global.log) {
        global.log = console.log;
    }
    if (!global.test) {
        return global.test = function(n, f) {
            log(n);
            return f();
        };
    }
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVscGVycy5qcyIsInNvdXJjZVJvb3QiOiIuIiwic291cmNlcyI6WyIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7Ozs7OztBQUFBLElBQUE7O0FBV0EsT0FBTyxDQUFDLGFBQVIsR0FBd0IsU0FBQyxPQUFEO0FBRXBCLFFBQUE7O1FBQUEsVUFBVzs7SUFFWCxlQUFBLEdBQ0k7UUFBQSxNQUFBLEVBQXdCLEtBQXhCO1FBQ0EsT0FBQSxFQUF3QixJQUR4QjtRQUVBLGdCQUFBLEVBQXdCLElBRnhCO1FBR0EsbUJBQUEsRUFBd0IsSUFIeEI7UUFJQSxzQkFBQSxFQUF3QixJQUp4Qjs7SUFNSixPQUFBLEdBQVUsTUFBQSxDQUFPLGVBQVAsMENBQTBDLEVBQTFDO0lBRVYsT0FBQSxHQUFVLE1BQUEsQ0FBTztRQUFFLE9BQUEsRUFBUyxPQUFYO0tBQVAsRUFBNkIsT0FBN0I7V0FDVjtBQWRvQjs7QUFrQnhCLE9BQU8sQ0FBQyxNQUFSLEdBQWlCLFNBQUMsTUFBRCxFQUFTLE9BQVQsRUFBa0IsS0FBbEI7V0FDYixPQUFBLEtBQVcsTUFBTSxDQUFDLE1BQVAsQ0FBYyxLQUFkLEVBQXFCLE9BQU8sQ0FBQyxNQUE3QjtBQURFOztBQUtqQixPQUFPLENBQUMsSUFBUixHQUFlLFNBQUMsTUFBRCxFQUFTLE9BQVQsRUFBa0IsSUFBbEI7QUFDWCxRQUFBO0lBQUEsR0FBQSxHQUFNLE9BQU8sQ0FBQztXQUNkLE9BQUEsS0FBVyxNQUFNLENBQUMsTUFBUCxDQUFjLE1BQU0sQ0FBQyxNQUFQLEdBQWdCLEdBQWhCLEdBQXNCLENBQUMsSUFBQSxJQUFRLENBQVQsQ0FBcEMsRUFBaUQsR0FBakQ7QUFGQTs7QUFNZixPQUFPLENBQUMsTUFBUixHQUFpQixNQUFBLEdBQVMsU0FBQyxHQUFELEVBQU0sQ0FBTjtBQUd0QixRQUFBO0lBQUEsR0FBQSxHQUFNO0FBQ04sV0FBTSxDQUFBLEdBQUksQ0FBVjtRQUNJLElBQWMsQ0FBQSxHQUFJLENBQWxCO1lBQUEsR0FBQSxJQUFPLElB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TyxDQUFBLDhCQUFBLEdBQStCLENBQS9CLEdBQWlDLDZDQUFqQyxHQUE4RSxDQUE5RSxHQUFnRiw4QkFBaEYsQ0FBMUI7QUFBZjs7QUFFbEIsT0FBTyxDQUFDLElBQVIsR0FBZSxTQUFDLEdBQUQ7V0FDYixNQUFNLENBQUMsT0FBUCxDQUFlLEdBQWYsRUFBb0I7UUFBQSxJQUFBLEVBQU0sSUFBTjtLQUFwQixDQUNBLENBQUMsT0FERCxDQUNTLFlBRFQsRUFDdUIsRUFEdkI7QUFEYTs7QUFJZixPQUFPLENBQUMsU0FBUixHQUFvQixTQUFDLENBQUQ7QUFDaEIsUUFBQTtJQUFBLElBQUEsR0FBTyxPQUFBLENBQVEsTUFBUjtXQUNQLElBQUksQ0FBQyxTQUFMLENBQWUsQ0FBZixFQUFrQjtRQUFBLFFBQUEsRUFBVSxJQUFWO1FBQWdCLE1BQUEsRUFBUSxJQUF4QjtLQUFsQjtBQUZnQjs7QUFPcEIsT0FBTyxDQUFDLFFBQVIsR0FBbUIsU0FBQTtJQUNmLE1BQUEsQ0FBTyxNQUFQLEVBQWUsT0FBQSxDQUFRLFFBQVIsQ0FBZjtJQUNBLE1BQU0sQ0FBQyxNQUFQLEdBQWdCLE9BQUEsQ0FBUSxVQUFSO0lBQ2hCLE1BQU0sQ0FBQyxDQUFQLEdBQVcsT0FBQSxDQUFRLFlBQVI7SUFDWCxNQUFBLENBQU8sTUFBUCxFQUFlLE9BQWY7SUFDQSxJQUFHLENBQUksTUFBTSxDQUFDLEdBQWQ7UUFBd0IsTUFBTSxDQUFDLEdBQVAsR0FBYSxPQUFPLENBQUMsSUFBN0M7O0lBQ0EsSUFBRyxDQUFJLE1BQU0sQ0FBQyxJQUFkO2VBQXdCLE1BQU0sQ0FBQyxJQUFQLEdBQWMsU0FBQyxDQUFELEVBQUcsQ0FBSDtZQUFTLEdBQUEsQ0FBSSxDQUFKO21CQUFPLENBQUEsQ0FBQTtRQUFoQixFQUF0Qzs7QUFOZSIsInNvdXJjZXNDb250ZW50IjpbIiMjI1xuMDAwICAgMDAwICAwMDAwMDAwMCAgMDAwICAgICAgMDAwMDAwMDAgICAwMDAwMDAwMCAgMDAwMDAwMDAgICAgMDAwMDAwMCAgXG4wMDAgICAwMDAgIDAwMCAgICAgICAwMDAgICAgICAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgICAgICBcbjAwMDAwMDAwMCAgMDAwMDAwMCAgIDAwMCAgICAgIDAwMDAwMDAwICAgMDAwMDAwMCAgIDAwMDAwMDAgICAgMDAwMDAwMCAgIFxuMDAwICAgMDAwICAwMDAgICAgICAgMDAwICAgICAgMDAwICAgICAgICAwMDAgICAgICAgMDAwICAgMDAwICAgICAgIDAwMCAgXG4wMDAgICAwMDAgIDAwMDAwMDAwICAwMDAwMDAwICAwMDAgICAgICAgIDAwMDAwMDAwICAwMDAgICAwMDAgIDAwMDAwMDAgICBcbiMjI1xuXG4jIEZ1bmN0aW9ucyB0aGF0IHdlJ2QgbGlrZSB0byBzaGFyZSBhbW9uZyB0aGUgTGV4ZXIsIFJld3JpdGVyLCBhbmQgTm9kZXMuIFxuIyBNZXJnZSBvYmplY3RzLCBmbGF0dGVuIGFycmF5cywgY291bnQgY2hhcmFjdGVycywgdGhhdCBzb3J0IG9mIHRoaW5nLlxuXG5leHBvcnRzLmluamVjdEZlYXR1cmUgPSAob3B0aW9ucykgLT4gIyBtYWtlIHN1cmUgdGhhdCBvcHRpb25zIGhhcyBhIGZlYXR1cmUgc2V0XG4gICAgXG4gICAgb3B0aW9ucyA/PSB7fVxuICAgIFxuICAgIGRlZmF1bHRGZWF0dXJlcyA9IFxuICAgICAgICBoZWFkZXI6ICAgICAgICAgICAgICAgICBmYWxzZVxuICAgICAgICByZXdyaXRlOiAgICAgICAgICAgICAgICB0cnVlXG4gICAgICAgICduZWdhdGl2ZS1pbmRleCc6ICAgICAgIHRydWVcbiAgICAgICAgJ2NvbmZpZy1wYXJhbWV0ZXJzJzogICAgdHJ1ZVxuICAgICAgICAnY29uc3RydWN0b3Itc2hvcnRjdXQnOiB0cnVlXG4gICAgXG4gICAgZmVhdHVyZSA9IGV4dGVuZCBkZWZhdWx0RmVhdHVyZXMsIG9wdGlvbnMuZmVhdHVyZSA/IHt9XG4gICAgXG4gICAgb3B0aW9ucyA9IGV4dGVuZCB7IGZlYXR1cmU6IGZlYXR1cmUgfSwgb3B0aW9uc1xuICAgIG9wdGlvbnNcblxuIyBQZWVrIGF0IHRoZSBiZWdpbm5pbmcgb2YgYSBnaXZlbiBzdHJpbmcgdG8gc2VlIGlmIGl0IG1hdGNoZXMgYSBzZXF1ZW5jZS5cblxuZXhwb3J0cy5zdGFydHMgPSAoc3RyaW5nLCBsaXRlcmFsLCBzdGFydCkgLT5cbiAgICBsaXRlcmFsIGlzIHN0cmluZy5zdWJzdHIgc3RhcnQsIGxpdGVyYWwubGVuZ3RoXG5cbiMgUGVlayBhdCB0aGUgZW5kIG9mIGEgZ2l2ZW4gc3RyaW5nIHRvIHNlZSBpZiBpdCBtYXRjaGVzIGEgc2VxdWVuY2UuXG5cbmV4cG9ydHMuZW5kcyA9IChzdHJpbmcsIGxpdGVyYWwsIGJhY2spIC0+XG4gICAgbGVuID0gbGl0ZXJhbC5sZW5ndGhcbiAgICBsaXRlcmFsIGlzIHN0cmluZy5zdWJzdHIgc3RyaW5nLmxlbmd0aCAtIGxlbiAtIChiYWNrIG9yIDApLCBsZW5cblxuIyBSZXBlYXQgYSBzdHJpbmcgYG5gIHRpbWVzLlxuXG5leHBvcnRzLnJlcGVhdCA9IHJlcGVhdCA9IChzdHIsIG4pIC0+XG4gICAgXG4gICAgIyBVc2UgY2xldmVyIGFsZ29yaXRobSB0byBoYXZlIE8obG9nKG4pKSBzdHJpbmcgY29uY2F0ZW5hdGlvbiBvcGVyYXRpb25zLlxuICAgIHJlcyA9ICcnXG4gICAgd2hpbGUgbiA+IDBcbiAgICAgICAgcmVzICs9IHN0ciBpZiBuICYgMVxuICAgICAgICBuID4+Pj0gMVxuICAgICAgICBzdHIgKz0gc3RyXG4gICAgcmVzXG5cbmV4cG9ydHMucGFkID0gKHN0ciwgbGVuZ3RoPTI0KSAtPiAjIHN0ciBwYWRkZWQgd2l0aCBzcGFjZXMgdG8gbGVuZ3RoXG4gICAgXG4gICAgc3BhY2VzID0gbGVuZ3RoIC0gc3RyLmxlbmd0aFxuICAgIHNwYWNlcyA9IGlmIHNwYWNlcyA+IDAgdGhlbiBBcnJheShzcGFjZXMgKyAxKS5qb2luKCcgJykgZWxzZSAnJ1xuICAgIFwiI3tzdHJ9I3tzcGFjZXN9XCJcbiAgICBcbiMgVHJpbSBvdXQgYWxsIGZhbHN5IHZhbHVlcyBmcm9tIGFuIGFycmF5LlxuXG5leHBvcnRzLmNvbXBhY3QgPSAoYXJyYXkpIC0+XG4gICAgaXRlbSBmb3IgaXRlbSBpbiBhcnJheSB3aGVuIGl0ZW1cblxuIyBDb3VudCB0aGUgbnVtYmVyIG9mIG9jY3VycmVuY2VzIG9mIGEgc3RyaW5nIGluIGEgc3RyaW5nLlxuXG5leHBvcnRzLmNvdW50ID0gKHN0cmluZywgc3Vic3RyKSAtPlxuICAgIG51bSA9IHBvcyA9IDBcbiAgICByZXR1cm4gMS8wIHVubGVzcyBzdWJzdHIubGVuZ3RoXG4gICAgbnVtKysgd2hpbGUgcG9zID0gMSArIHN0cmluZy5pbmRleE9mIHN1YnN0ciwgcG9zXG4gICAgbnVtXG5cbiMgTWVyZ2Ugb2JqZWN0cywgcmV0dXJuaW5nIGEgZnJlc2ggY29weSB3aXRoIGF0dHJpYnV0ZXMgZnJvbSBib3RoIHNpZGVzLlxuIyBVc2VkIGV2ZXJ5IHRpbWUgYEJhc2UjY29tcGlsZWAgaXMgY2FsbGVkLCB0byBhbGxvdyBwcm9wZXJ0aWVzIGluIHRoZVxuIyBvcHRpb25zIGhhc2ggdG8gcHJvcGFnYXRlIGRvd24gdGhlIHRyZWUgd2l0aG91dCBwb2xsdXRpbmcgb3RoZXIgYnJhbmNoZXMuXG5cbmV4cG9ydHMubWVyZ2UgPSAob3B0aW9ucywgb3ZlcnJpZGVzKSAtPlxuICAgIGV4dGVuZCAoZXh0ZW5kIHt9LCBvcHRpb25zKSwgb3ZlcnJpZGVzXG5cbiMgMDAwMDAwMDAgIDAwMCAgIDAwMCAgMDAwMDAwMDAwICAwMDAwMDAwMCAgMDAwICAgMDAwICAwMDAwMDAwICAgIFxuIyAwMDAgICAgICAgIDAwMCAwMDAgICAgICAwMDAgICAgIDAwMCAgICAgICAwMDAwICAwMDAgIDAwMCAgIDAwMCAgXG4jIDAwMDAwMDAgICAgIDAwMDAwICAgICAgIDAwMCAgICAgMDAwMDAwMCAgIDAwMCAwIDAwMCAgMDAwICAgMDAwICBcbiMgMDAwICAgICAgICAwMDAgMDAwICAgICAgMDAwICAgICAwMDAgICAgICAgMDAwICAwMDAwICAwMDAgICAwMDAgIFxuIyAwMDAwMDAwMCAgMDAwICAgMDAwICAgICAwMDAgICAgIDAwMDAwMDAwICAwMDAgICAwMDAgIDAwMDAwMDAgICAgXG5cbiMgRXh0ZW5kIGEgc291cmNlIG9iamVjdCB3aXRoIHRoZSBwcm9wZXJ0aWVzIG9mIGFub3RoZXIgb2JqZWN0IChzaGFsbG93IGNvcHkpLlxuXG5leHBvcnRzLmV4dGVuZCA9IGV4dGVuZCA9IChvYmplY3QsIHByb3BlcnRpZXMpIC0+XG4gICAgZm9yIGtleSwgdmFsIG9mIHByb3BlcnRpZXNcbiAgICAgICAgb2JqZWN0W2tleV0gPSB2YWxcbiAgICBvYmplY3RcblxuIyBSZXR1cm4gYSBmbGF0dGVuZWQgdmVyc2lvbiBvZiBhbiBhcnJheS5cbiMgSGFuZHkgZm9yIGdldHRpbmcgYSBsaXN0IG9mIGBjaGlsZHJlbmAgZnJvbSB0aGUgbm9kZXMuXG4gICAgXG5leHBvcnRzLmZsYXR0ZW4gPSBmbGF0dGVuID0gKGFycmF5KSAtPlxuICAgIGZsYXR0ZW5lZCA9IFtdXG4gICAgZm9yIGVsZW1lbnQgaW4gYXJyYXlcbiAgICAgICAgaWYgJ1tvYmplY3QgQXJyYXldJyBpcyBPYmplY3Q6OnRvU3RyaW5nLmNhbGwgZWxlbWVudFxuICAgICAgICAgICAgZmxhdHRlbmVkID0gZmxhdHRlbmVkLmNvbmNhdCBmbGF0dGVuIGVsZW1lbnRcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgZmxhdHRlbmVkLnB1c2ggZWxlbWVudFxuICAgIGZsYXR0ZW5lZFxuXG4jIERlbGV0ZSBhIGtleSBmcm9tIGFuIG9iamVjdCwgcmV0dXJuaW5nIHRoZSB2YWx1ZS4gVXNlZnVsIHdoZW4gYSBub2RlIGlzXG4jIGxvb2tpbmcgZm9yIGEgcGFydGljdWxhciBtZXRob2QgaW4gYW4gb3B0aW9ucyBoYXNoLlxuICAgIFxuZXhwb3J0cy5kZWwgPSAob2JqLCBrZXkpIC0+XG4gICAgdmFsID0gIG9ialtrZXldXG4gICAgZGVsZXRlIG9ialtrZXldXG4gICAgdmFsXG5cbiMgVHlwaWNhbCBBcnJheTo6c29tZVxuXG5leHBvcnRzLnNvbWUgPSBBcnJheTo6c29tZSA/IChmbikgLT5cbiAgICByZXR1cm4gdHJ1ZSBmb3IgZSBpbiB0aGlzIHdoZW4gZm4gZVxuICAgIGZhbHNlXG5cbiMgTWVyZ2UgdHdvIGppc29uLXN0eWxlIGxvY2F0aW9uIGRhdGEgb2JqZWN0cyB0b2dldGhlci5cbiMgSWYgYGxhc3RgIGlzIG5vdCBwcm92aWRlZCwgdGhpcyB3aWxsIHNpbXBseSByZXR1cm4gYGZpcnN0YC5cblxuYnVpbGRMb2NhdGlvbkRhdGEgPSAoZmlyc3QsIGxhc3QpIC0+XG4gICAgaWYgbm90IGxhc3RcbiAgICAgICAgZmlyc3RcbiAgICBlbHNlXG4gICAgICAgIGZpcnN0X2xpbmU6IGZpcnN0LmZpcnN0X2xpbmVcbiAgICAgICAgZmlyc3RfY29sdW1uOiBmaXJzdC5maXJzdF9jb2x1bW5cbiAgICAgICAgbGFzdF9saW5lOiBsYXN0Lmxhc3RfbGluZVxuICAgICAgICBsYXN0X2NvbHVtbjogbGFzdC5sYXN0X2NvbHVtblxuXG4jIFRoaXMgcmV0dXJucyBhIGZ1bmN0aW9uIHdoaWNoIHRha2VzIGFuIG9iamVjdCBhcyBhIHBhcmFtZXRlciwgYW5kIGlmIHRoYXRcbiMgb2JqZWN0IGlzIGFuIEFTVCBub2RlLCB1cGRhdGVzIHRoYXQgb2JqZWN0J3MgbG9jYXRpb25EYXRhLlxuIyBUaGUgb2JqZWN0IGlzIHJldHVybmVkIGVpdGhlciB3YXkuXG5cbmV4cG9ydHMuYWRkTG9jYXRpb25EYXRhRm4gPSAoZmlyc3QsIGxhc3QpIC0+XG4gICAgKG9iaikgLT5cbiAgICAgICAgaWYgKCh0eXBlb2Ygb2JqKSBpcyAnb2JqZWN0JykgYW5kICghIW9ialsndXBkYXRlTG9jYXRpb25EYXRhSWZNaXNzaW5nJ10pXG4gICAgICAgICAgICBvYmoudXBkYXRlTG9jYXRpb25EYXRhSWZNaXNzaW5nIGJ1aWxkTG9jYXRpb25EYXRhKGZpcnN0LCBsYXN0KVxuXG4gICAgICAgIHJldHVybiBvYmpcblxuIyBDb252ZXJ0IGppc29uIGxvY2F0aW9uIGRhdGEgdG8gYSBzdHJpbmcuXG4jIGBvYmpgIGNhbiBiZSBhIHRva2VuLCBvciBhIGxvY2F0aW9uRGF0YS5cblxuZXhwb3J0cy5sb2NhdGlvbkRhdGFUb1N0cmluZyA9IChvYmopIC0+XG4gICAgaWYgKFwiMlwiIG9mIG9iaikgYW5kIChcImZpcnN0X2xpbmVcIiBvZiBvYmpbMl0pIHRoZW4gbG9jYXRpb25EYXRhID0gb2JqWzJdXG4gICAgZWxzZSBpZiBcImZpcnN0X2xpbmVcIiBvZiBvYmogdGhlbiBsb2NhdGlvbkRhdGEgPSBvYmpcblxuICAgIGlmIGxvY2F0aW9uRGF0YVxuICAgICAgICBcIiN7bG9jYXRpb25EYXRhLmZpcnN0X2xpbmUgKyAxfToje2xvY2F0aW9uRGF0YS5maXJzdF9jb2x1bW4gKyAxfS1cIiArXG4gICAgICAgIFwiI3tsb2NhdGlvbkRhdGEubGFzdF9saW5lICsgMX06I3tsb2NhdGlvbkRhdGEubGFzdF9jb2x1bW4gKyAxfVwiXG4gICAgZWxzZVxuICAgICAgICBcIk5vIGxvY2F0aW9uIGRhdGFcIlxuXG4jIEEgYC5jb2ZmZWUubWRgIGNvbXBhdGlibGUgdmVyc2lvbiBvZiBgYmFzZW5hbWVgLCB0aGF0IHJldHVybnMgdGhlIGZpbGUgc2Fucy1leHRlbnNpb24uXG5cbmV4cG9ydHMuYmFzZUZpbGVOYW1lID0gKGZpbGUsIHN0cmlwRXh0ID0gbm8sIHVzZVdpblBhdGhTZXAgPSBubykgLT5cbiAgICBwYXRoU2VwID0gaWYgdXNlV2luUGF0aFNlcCB0aGVuIC9cXFxcfFxcLy8gZWxzZSAvXFwvL1xuICAgIHBhcnRzID0gZmlsZS5zcGxpdChwYXRoU2VwKVxuICAgIGZpbGUgPSBwYXJ0c1twYXJ0cy5sZW5ndGggLSAxXVxuICAgIHJldHVybiBmaWxlIHVubGVzcyBzdHJpcEV4dCBhbmQgZmlsZS5pbmRleE9mKCcuJykgPj0gMFxuICAgIHBhcnRzID0gZmlsZS5zcGxpdCgnLicpXG4gICAgcGFydHMucG9wKClcbiAgICBwYXJ0cy5wb3AoKSBpZiAvXltja11vZmZlZSQvLnRlc3QocGFydHNbcGFydHMubGVuZ3RoLTFdKSBhbmQgcGFydHMubGVuZ3RoID4gMVxuICAgIHBhcnRzLmpvaW4oJy4nKVxuXG4jIDAwMCAgIDAwMDAwMDAgICAwMDAwMDAwICAgMDAwMDAwMCAgIDAwMDAwMDAwICAwMDAwMDAwMCAgMDAwMDAwMDAgIDAwMDAwMDAwICBcbiMgMDAwICAwMDAgICAgICAgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgICAgICAwMDAgICAgICAgMDAwICAgICAgIFxuIyAwMDAgIDAwMDAwMDAgICAwMDAgICAgICAgMDAwICAgMDAwICAwMDAwMDAgICAgMDAwMDAwICAgIDAwMDAwMDAgICAwMDAwMDAwICAgXG4jIDAwMCAgICAgICAwMDAgIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgICAgICAgMDAwICAgICAgIDAwMCAgICAgICBcbiMgMDAwICAwMDAwMDAwICAgIDAwMDAwMDAgICAwMDAwMDAwICAgMDAwICAgICAgIDAwMCAgICAgICAwMDAwMDAwMCAgMDAwMDAwMDAgIFxuXG4jIERldGVybWluZSBpZiBhIGZpbGVuYW1lIHJlcHJlc2VudHMgYSBrb2ZmZWUgZmlsZS5cblxuZXhwb3J0cy5pc0NvZmZlZSA9IChmaWxlKSAtPiAvXFwuW2NrXW9mZmVlJC8udGVzdCBmaWxlXG5cbiMgVGhyb3dzIGEgU3ludGF4RXJyb3IgZnJvbSBhIGdpdmVuIGxvY2F0aW9uLlxuIyBUaGUgZXJyb3IncyBgdG9TdHJpbmdgIHdpbGwgcmV0dXJuIGFuIGVycm9yIG1lc3NhZ2UgZm9sbG93aW5nIHRoZSBcInN0YW5kYXJkXCJcbiMgZm9ybWF0IGA8ZmlsZW5hbWU+OjxsaW5lPjo8Y29sPjogPG1lc3NhZ2U+YCBwbHVzIHRoZSBsaW5lIHdpdGggdGhlIGVycm9yIGFuZCBhXG4jIG1hcmtlciBzaG93aW5nIHdoZXJlIHRoZSBlcnJvciBpcy5cblxuZXhwb3J0cy50aHJvd1N5bnRheEVycm9yID0gKG1lc3NhZ2UsIGxvY2F0aW9uKSAtPlxuICAgIGVycm9yID0gbmV3IFN5bnRheEVycm9yIG1lc3NhZ2VcbiAgICBlcnJvci5sb2NhdGlvbiA9IGxvY2F0aW9uXG4gICAgZXJyb3IudG9TdHJpbmcgPSBzeW50YXhFcnJvclRvU3RyaW5nXG5cbiAgICAjIEluc3RlYWQgb2Ygc2hvd2luZyB0aGUgY29tcGlsZXIncyBzdGFja3RyYWNlLCBzaG93IG91ciBjdXN0b20gZXJyb3IgbWVzc2FnZS5cbiAgICAjIFRoaXMgaXMgdXNlZnVsIHdoZW4gdGhlIGVycm9yIGJ1YmJsZXMgdXAgaW4gTm9kZS5qcyBhcHBsaWNhdGlvbnMgdGhhdCBjb21waWxlIEtvZmZlZS5cbiAgICBlcnJvci5zdGFjayA9IGVycm9yLnRvU3RyaW5nKClcblxuICAgIHRocm93IGVycm9yXG5cbiMgVXBkYXRlIGEgY29tcGlsZXIgU3ludGF4RXJyb3Igd2l0aCBzb3VyY2UgY29kZSBpbmZvcm1hdGlvbiBpZiBpdCBkaWRuJ3QgaGF2ZSBpdCBhbHJlYWR5LlxuXG5leHBvcnRzLnVwZGF0ZVN5bnRheEVycm9yID0gKGVycm9yLCBjb2RlLCBmaWxlbmFtZSkgLT5cbiAgICAjIEF2b2lkIHNjcmV3aW5nIHVwIHRoZSBgc3RhY2tgIHByb3BlcnR5IG9mIG90aGVyIGVycm9ycyAoaS5lLiBwb3NzaWJsZSBidWdzKS5cbiAgICBpZiBlcnJvci50b1N0cmluZyBpcyBzeW50YXhFcnJvclRvU3RyaW5nXG4gICAgICAgIGVycm9yLmNvZGUgb3I9IGNvZGVcbiAgICAgICAgZXJyb3IuZmlsZW5hbWUgb3I9IGZpbGVuYW1lXG4gICAgICAgIGVycm9yLnN0YWNrID0gZXJyb3IudG9TdHJpbmcoKVxuICAgIGVycm9yXG5cbnN5bnRheEVycm9yVG9TdHJpbmcgPSAtPlxuICAgIFxuICAgIHJldHVybiBFcnJvcjo6dG9TdHJpbmcuY2FsbCBAIHVubGVzcyBAY29kZSBhbmQgQGxvY2F0aW9uXG5cbiAgICB7Zmlyc3RfbGluZSwgZmlyc3RfY29sdW1uLCBsYXN0X2xpbmUsIGxhc3RfY29sdW1ufSA9IEBsb2NhdGlvblxuICAgIGxhc3RfbGluZSA/PSBmaXJzdF9saW5lXG4gICAgbGFzdF9jb2x1bW4gPz0gZmlyc3RfY29sdW1uXG5cbiAgICBmaWxlbmFtZSA9IEBmaWxlbmFtZSBvciAnW3N0ZGluXSdcbiAgICBjb2RlTGluZSA9IEBjb2RlLnNwbGl0KCdcXG4nKVtmaXJzdF9saW5lXVxuICAgIHN0YXJ0ICAgID0gZmlyc3RfY29sdW1uXG4gICAgIyBTaG93IG9ubHkgdGhlIGZpcnN0IGxpbmUgb24gbXVsdGktbGluZSBlcnJvcnMuXG4gICAgZW5kICAgICAgPSBpZiBmaXJzdF9saW5lIGlzIGxhc3RfbGluZSB0aGVuIGxhc3RfY29sdW1uICsgMSBlbHNlIGNvZGVMaW5lLmxlbmd0aFxuICAgIG1hcmtlciAgID0gY29kZUxpbmVbLi4uc3RhcnRdLnJlcGxhY2UoL1teXFxzXS9nLCAnICcpICsgcmVwZWF0KCdeJywgZW5kIC0gc3RhcnQpXG5cbiAgICAjIENoZWNrIHRvIHNlZSBpZiB3ZSdyZSBydW5uaW5nIG9uIGEgY29sb3ItZW5hYmxlZCBUVFkuXG4gICAgaWYgcHJvY2Vzcz9cbiAgICAgICAgY29sb3JzRW5hYmxlZCA9IHByb2Nlc3Muc3Rkb3V0Py5pc1RUWSBhbmQgbm90IHByb2Nlc3MuZW52Py5OT0RFX0RJU0FCTEVfQ09MT1JTXG5cbiAgICBpZiBAY29sb3JmdWwgPyBjb2xvcnNFbmFibGVkXG4gICAgICAgIGNvbG9yaXplID0gKHN0cikgLT4gXCJcXHgxQlsxOzMxbSN7c3RyfVxceDFCWzBtXCJcbiAgICAgICAgY29kZUxpbmUgPSBjb2RlTGluZVsuLi5zdGFydF0gKyBjb2xvcml6ZShjb2RlTGluZVtzdGFydC4uLmVuZF0pICsgY29kZUxpbmVbZW5kLi5dXG4gICAgICAgIG1hcmtlciAgID0gY29sb3JpemUgbWFya2VyXG5cbiAgICBcIlwiXCJcbiAgICAgICAgI3tmaWxlbmFtZX06I3tmaXJzdF9saW5lICsgMX06I3tmaXJzdF9jb2x1bW4gKyAxfTogZXJyb3I6ICN7QG1lc3NhZ2V9XG4gICAgICAgICN7Y29kZUxpbmV9XG4gICAgICAgICN7bWFya2VyfVxuICAgIFwiXCJcIlxuXG5leHBvcnRzLm5hbWVXaGl0ZXNwYWNlQ2hhcmFjdGVyID0gKHN0cmluZykgLT5cbiAgICBcbiAgICBzd2l0Y2ggc3RyaW5nXG4gICAgICAgIHdoZW4gJyAnIHRoZW4gJ3NwYWNlJ1xuICAgICAgICB3aGVuICdcXG4nIHRoZW4gJ25ld2xpbmUnXG4gICAgICAgIHdoZW4gJ1xccicgdGhlbiAnY2FycmlhZ2UgcmV0dXJuJ1xuICAgICAgICB3aGVuICdcXHQnIHRoZW4gJ3RhYidcbiAgICAgICAgZWxzZSBzdHJpbmdcblxuIyAwMDAwMDAwMDAgIDAwMDAwMDAwICAgMDAwMDAwMCAgMDAwMDAwMDAwICBcbiMgICAgMDAwICAgICAwMDAgICAgICAgMDAwICAgICAgICAgIDAwMCAgICAgXG4jICAgIDAwMCAgICAgMDAwMDAwMCAgIDAwMDAwMDAgICAgICAwMDAgICAgIFxuIyAgICAwMDAgICAgIDAwMCAgICAgICAgICAgIDAwMCAgICAgMDAwICAgICBcbiMgICAgMDAwICAgICAwMDAwMDAwMCAgMDAwMDAwMCAgICAgIDAwMCAgICAgXG5cbmVnYWwgPSAoYSwgYikgLT5cbiAgaWYgYSBpcyBiXG4gICAgYSAhPSAwIG9yIDEvYSBpcyAxL2JcbiAgZWxzZVxuICAgIGEgIT0gYSBhbmQgYiAhPSBiXG5cbiMgQSByZWN1cnNpdmUgZnVuY3Rpb25hbCBlcXVpdmFsZW5jZSBoZWxwZXI7IHVzZXMgZWdhbCBmb3IgdGVzdGluZyBlcXVpdmFsZW5jZS5cbiAgICBcbmFycmF5RWdhbCA9IChhLCBiKSAtPlxuICBpZiBlZ2FsIGEsIGIgdGhlbiB5ZXNcbiAgZWxzZSBpZiBhIGluc3RhbmNlb2YgQXJyYXkgYW5kIGIgaW5zdGFuY2VvZiBBcnJheVxuICAgIHJldHVybiBubyB1bmxlc3MgYS5sZW5ndGggaXMgYi5sZW5ndGhcbiAgICByZXR1cm4gbm8gZm9yIGVsLCBpZHggaW4gYSB3aGVuIG5vdCBhcnJheUVnYWwgZWwsIGJbaWR4XVxuICAgIHllc1xuXG5leHBvcnRzLmVxICAgICAgPSAoYSwgYiwgbXNnKSAtPiBvayBlZ2FsKGEsIGIpLCBtc2cgb3IgXCJcXHgxQlswOzkwbVxcbiA8PDwgZXhwZWN0ZWQgPj4+XFxuXFx4MUJbMDs5M20je2F9XFx4MUJbMDs5MG08PDwgdG8gZXF1YWwgPj4+XFxuXFx4MUJbMDs5M20je2J9XFx4MUJbMDs5MG08PDwgZXhwZWN0ZWQgPj4+XFxuXCJcbmV4cG9ydHMuYXJyYXlFcSA9IChhLCBiLCBtc2cpIC0+IG9rIGFycmF5RWdhbChhLGIpLCBtc2cgb3IgXCJcXHgxQlswOzkwbVxcbiA+Pj5cXG5cXHgxQlswOzkzbSN7YX1cXHgxQlswOzkwbTw8PCB0byBkZWVwIGVxdWFsID4+PlxcblxceDFCWzA7OTNtI3tifVxceDFCWzA7OTBtPDw8IGV4cGVjdGVkID4+PlxcblwiXG5cbmV4cG9ydHMudG9KUyA9IChzdHIpIC0+XG4gIEtvZmZlZS5jb21waWxlIHN0ciwgYmFyZTogeWVzXG4gIC5yZXBsYWNlIC9eXFxzK3xcXHMrJC9nLCAnJyAjIFRyaW0gbGVhZGluZy90cmFpbGluZyB3aGl0ZXNwYWNlXG5cbmV4cG9ydHMuc3RyaW5naWZ5ID0gKG8pIC0+XG4gICAgbm9vbiA9IHJlcXVpcmUgJ25vb24nXG4gICAgbm9vbi5zdHJpbmdpZnkgbywgY2lyY3VsYXI6IHRydWUsIGNvbG9yczogdHJ1ZVxuICAgIFxuIyBJbml0aWFsaXplIGdsb2JhbCB2YXJpYWJsZXMgdXNlZCBpbiB0ZXN0IHNjcmlwdHMgXG4jIFN1cHBvcnRzIHJ1bm5pbmcgc2luZ2xlIHRlc3QgdmlhIGBrb2ZmZWUgdGVzdC8uLmBcbiAgICBcbmV4cG9ydHMuaW5pdFRlc3QgPSAtPlxuICAgIGV4dGVuZCBnbG9iYWwsIHJlcXVpcmUgJ2Fzc2VydCcgXG4gICAgZ2xvYmFsLktvZmZlZSA9IHJlcXVpcmUgJy4va29mZmVlJ1xuICAgIGdsb2JhbC5fID0gcmVxdWlyZSAndW5kZXJzY29yZSdcbiAgICBleHRlbmQgZ2xvYmFsLCBleHBvcnRzXG4gICAgaWYgbm90IGdsb2JhbC5sb2cgIHRoZW4gZ2xvYmFsLmxvZyA9IGNvbnNvbGUubG9nIFxuICAgIGlmIG5vdCBnbG9iYWwudGVzdCB0aGVuIGdsb2JhbC50ZXN0ID0gKG4sZikgLT4gbG9nIG47IGYoKVxuICAgICJdfQ==
//# sourceURL=../coffee/helpers.coffee