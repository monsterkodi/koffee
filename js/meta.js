// generated by koffee 0.25.0

/*
00     00  00000000  000000000   0000000   
000   000  000          000     000   000  
000000000  0000000      000     000000000  
000 0 000  000          000     000   000  
000   000  00000000     000     000   000
 */
var META, TAB, blue, blueBright, bold, compileMetaIf, dim, gray, green, injectMeta, logMetas, logSource, path, red, ref, white, whiteBright, yellow, yellowBright,
    slice = [].slice;

path = require('path');

ref = require('colorette'), red = ref.red, green = ref.green, blue = ref.blue, blueBright = ref.blueBright, yellow = ref.yellow, yellowBright = ref.yellowBright, white = ref.white, whiteBright = ref.whiteBright, gray = ref.gray, bold = ref.bold, dim = ref.dim;

META = [
    {
        key: 'profile',
        desc: '@profile [id] ...',
        info: {
            args: 1
        },
        meta: function(arg) {
            var args, id, name, node, ref1, ref2, ref3;
            args = (ref1 = arg.args) != null ? ref1 : null, node = (ref2 = arg.node) != null ? ref2 : null;
            id = (node.condition.locationData.first_line + 1) + "_" + node.condition.locationData.first_column;
            name = (ref3 = args[0]) != null ? ref3 : id;
            return {
                after: "console.log('" + name + "', require('pretty-time')(process.hrtime(koffee_" + id + ")));",
                code: "koffee_" + id + " = process.hrtime()",
                reduce: false,
                body: true
            };
        }
    }, {
        key: 'start',
        desc: '@start id ...',
        info: {
            then: true,
            args: 1
        },
        meta: function(arg) {
            var args, id, ref1, ref2;
            args = (ref1 = arg.args) != null ? ref1 : null;
            id = (ref2 = args[0]) != null ? ref2 : 'start_end';
            return {
                before: "koffee_" + id + " = process.hrtime()",
                reduce: true,
                body: false
            };
        }
    }, {
        key: 'end',
        desc: '@end id ...',
        info: {
            then: true,
            args: 1
        },
        meta: function(arg) {
            var args, id, ref1, ref2;
            args = (ref1 = arg.args) != null ? ref1 : null;
            id = (ref2 = args[0]) != null ? ref2 : 'start_end';
            return {
                before: "console.log('" + id + "', require('pretty-time')(process.hrtime(koffee_" + id + ")))",
                reduce: true,
                body: false
            };
        }
    }, {
        key: 'dbg',
        desc: '@dbg msg ...',
        info: {
            then: true,
            args: 1
        },
        meta: function(arg) {
            var args, node, opts, ref1, ref2, ref3;
            opts = (ref1 = arg.opts) != null ? ref1 : null, args = (ref2 = arg.args) != null ? ref2 : null, node = (ref3 = arg.node) != null ? ref3 : null;
            return {
                code: "true",
                "eval": true,
                before: logSource({
                    opts: opts,
                    args: args,
                    node: node
                }),
                after: ")",
                reduce: true,
                block: false
            };
        }
    }, {
        key: 'test',
        desc: '@test id ...',
        meta: function(arg) {
            var args, node, opts, ref1, ref2, ref3;
            opts = (ref1 = arg.opts) != null ? ref1 : null, args = (ref2 = arg.args) != null ? ref2 : null, node = (ref3 = arg.node) != null ? ref3 : null;
            console.log(opts);
            return {
                code: false,
                before: opts.test && logSource({
                    opts: opts,
                    args: args,
                    node: node,
                    close: true
                }),
                reduce: true,
                body: opts.test
            };
        }
    }, {
        key: 'rand',
        info: {
            args: 1
        },
        meta: function(arg) {
            var args, ref1, ref2;
            args = (ref1 = arg.args) != null ? ref1 : null;
            return {
                code: "Math.random() < " + ((ref2 = args != null ? args[0] : void 0) != null ? ref2 : 0.5),
                reduce: false,
                body: true
            };
        }
    }
];

TAB = '    ';

compileMetaIf = function(arg) {
    var Assign, Block, Literal, Value, args, body, bodyOpt, cond, err, frag, fs, indent, info, metaKey, node, opts, os, ref1, ref10, ref11, ref12, ref13, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9;
    node = (ref1 = arg.node) != null ? ref1 : null, opts = (ref2 = arg.opts) != null ? ref2 : null;
    ref3 = require('./nodes'), Block = ref3.Block, Assign = ref3.Assign, Value = ref3.Value, Literal = ref3.Literal;
    info = {
        reduce: true
    };
    if (((ref4 = node.condition.base) != null ? ref4.value : void 0) === 'this') {
        metaKey = (ref5 = node.condition.properties) != null ? (ref6 = ref5[0]) != null ? (ref7 = ref6.name) != null ? ref7.value : void 0 : void 0 : void 0;
        if (typeof opts.meta[metaKey] === 'function') {
            info = opts.meta[metaKey]({
                opts: opts,
                node: node,
                args: []
            });
        }
    } else if (((ref8 = node.condition.variable) != null ? (ref9 = ref8.base) != null ? ref9.value : void 0 : void 0) === 'this') {
        metaKey = (ref10 = node.condition.variable.properties) != null ? (ref11 = ref10[0]) != null ? (ref12 = ref11.name) != null ? ref12.value : void 0 : void 0 : void 0;
        if (typeof opts.meta[metaKey] === 'function') {
            args = node.condition.args.map(function(a) {
                var ref13;
                return (ref13 = a.base) != null ? ref13.value : void 0;
            });
            args = args.map(function(a) {
                var ref13;
                if ((ref13 = a[0]) === '"' || ref13 === "'") {
                    return a.slice(1, -1);
                } else {
                    return a;
                }
            });
            info = opts.meta[metaKey]({
                opts: opts,
                node: node,
                args: args
            });
        }
    }
    if (info["eval"] || (info.code == null)) {
        cond = (ref13 = info.code) != null ? ref13 : node.fragmentsToText(node.condition.compileToFragments(opts, 2));
        try {
            os = require('os');
            fs = require('fs');
            info.body = !!eval(cond);
            if (info["eval"] && info.reduce && !info.body && !node.elseBody) {
                return [];
            }
        } catch (error) {
            err = error;
            console.error(err);
        }
    }
    frag = [];
    if (info.reduce === false) {
        frag = frag.concat(node.makeCode("if ("), node.makeCode(info.code), node.makeCode(") {\n"));
        indent = opts.indent + TAB;
        bodyOpt = merge(opts, {
            indent: indent
        });
    } else {
        indent = opts.indent;
        bodyOpt = opts;
    }
    if (info.before) {
        frag.push(node.makeCode((info.block !== false && indent || '') + info.before));
    }
    if (info.body) {
        if (info.block !== false) {
            body = node.ensureBlock(node.body);
        } else {
            if (node.body instanceof Block) {
                body = node.body.expressions[0];
            } else {
                body = node.body;
            }
        }
        if (body) {
            frag = frag.concat(body.compileToFragments(bodyOpt));
        }
    }
    if (info.after) {
        frag.push(node.makeCode(((info.block !== false) && ('\n' + indent) || '') + info.after));
    }
    if (!info.reduce) {
        frag.push(node.makeCode("\n" + node.tab + "}"));
    }
    if (node.elseBody && (info.reduce === false || info.body === false)) {
        if (!info.reduce) {
            frag.push(node.makeCode(' else '));
        }
        if (node.isChain) {
            frag = frag.concat(node.elseBody.unwrap().compileToFragments(bodyOpt));
        } else {
            frag = frag.concat(node.elseBody.compileToFragments(bodyOpt));
        }
    }
    return frag;
};

logSource = function(arg) {
    var args, before, close, ext, node, opts, ref1, ref2, ref3, ref4, ref5, ref6, ref7, source;
    opts = (ref1 = arg.opts) != null ? ref1 : null, args = (ref2 = arg.args) != null ? ref2 : null, node = (ref3 = arg.node) != null ? ref3 : null, close = (ref4 = arg.close) != null ? ref4 : null;
    source = (ref5 = (ref6 = opts.source) != null ? ref6 : opts.filename) != null ? ref5 : '';
    ext = '';
    if (source) {
        ref7 = path.basename(source).split('.'), source = ref7[0], ext = 2 <= ref7.length ? slice.call(ref7, 1) : [];
        source = yellow([yellowBright(source), dim(ext.join`.`)].join(dim('.')));
    }
    before = "console.log('" + source + (dim(blue(':'))) + (blueBright("" + (node.condition.locationData.first_line + 1))) + "'";
    if (args[0]) {
        before += ", '" + (bold(whiteBright(args[0]))) + "'";
    }
    if (close) {
        before += ');';
    } else {
        before += ", ";
    }
    return before;
};

injectMeta = function(options) {
    var defaultMeta, extend, meta, ref1;
    if (options != null) {
        options;
    } else {
        options = {};
    }
    extend = require('./helpers').extend;
    defaultMeta = {};
    META.map(function(m) {
        defaultMeta[m.key] = m.meta;
        m.meta.key = m.key;
        return m.meta.info = m.info;
    });
    meta = extend(defaultMeta, (ref1 = options.meta) != null ? ref1 : {});
    options = extend({
        meta: meta
    }, options);
    return options;
};

logMetas = function() {
    var pad;
    pad = require('./helpers').pad;
    gray = require('colorette').gray;
    console.log((gray('Metas:')) + "\n\n" + (META.map(function(f) {
        var ref1;
        return "    " + (pad(f.key)) + (gray((ref1 = f.desc) != null ? ref1 : "@" + f.key + " ..."));
    }).join('\n')));
    return console.log("    if else                 " + (gray('@if cond ... [[@elif cond ...] @else ...]')) + "\n");
};

module.exports = {
    META: META,
    injectMeta: injectMeta,
    logMetas: logMetas,
    compileMetaIf: compileMetaIf
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWV0YS5qcyIsInNvdXJjZVJvb3QiOiIuIiwic291cmNlcyI6WyIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7Ozs7OztBQUFBLElBQUEsNkpBQUE7SUFBQTs7QUFRQSxJQUFBLEdBQU8sT0FBQSxDQUFRLE1BQVI7O0FBRVAsTUFBOEYsT0FBQSxDQUFRLFdBQVIsQ0FBOUYsRUFBRSxhQUFGLEVBQU8saUJBQVAsRUFBYyxlQUFkLEVBQW9CLDJCQUFwQixFQUFnQyxtQkFBaEMsRUFBd0MsK0JBQXhDLEVBQXNELGlCQUF0RCxFQUE2RCw2QkFBN0QsRUFBMEUsZUFBMUUsRUFBZ0YsZUFBaEYsRUFBc0Y7O0FBRXRGLElBQUEsR0FBTztJQU9IO1FBQUEsR0FBQSxFQUFNLFNBQU47UUFDQSxJQUFBLEVBQU0sbUJBRE47UUFFQSxJQUFBLEVBQU07WUFBQSxJQUFBLEVBQU0sQ0FBTjtTQUZOO1FBR0EsSUFBQSxFQUFNLFNBQUMsR0FBRDtBQUVGLGdCQUFBO1lBRkcsMENBQUcsTUFBRywwQ0FBRztZQUVaLEVBQUEsR0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLFVBQTVCLEdBQXVDLENBQXhDLENBQUEsR0FBMEMsR0FBMUMsR0FBNkMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUM7WUFDaEYsSUFBQSxxQ0FBaUI7bUJBQ2pCO2dCQUFBLEtBQUEsRUFBUSxlQUFBLEdBQWdCLElBQWhCLEdBQXFCLGtEQUFyQixHQUF1RSxFQUF2RSxHQUEwRSxNQUFsRjtnQkFDQSxJQUFBLEVBQVEsU0FBQSxHQUFVLEVBQVYsR0FBYSxxQkFEckI7Z0JBRUEsTUFBQSxFQUFRLEtBRlI7Z0JBR0EsSUFBQSxFQUFRLElBSFI7O1FBSkUsQ0FITjtLQVBHLEVBd0JIO1FBQUEsR0FBQSxFQUFNLE9BQU47UUFDQSxJQUFBLEVBQU0sZUFETjtRQUVBLElBQUEsRUFDSTtZQUFBLElBQUEsRUFBTSxJQUFOO1lBQ0EsSUFBQSxFQUFNLENBRE47U0FISjtRQUtBLElB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MDAwMCAgIDAwMDAwMDAgICBcbjAwMCAgIDAwMCAgMDAwICAgICAgICAgIDAwMCAgICAgMDAwICAgMDAwICBcbjAwMDAwMDAwMCAgMDAwMDAwMCAgICAgIDAwMCAgICAgMDAwMDAwMDAwICBcbjAwMCAwIDAwMCAgMDAwICAgICAgICAgIDAwMCAgICAgMDAwICAgMDAwICBcbjAwMCAgIDAwMCAgMDAwMDAwMDAgICAgIDAwMCAgICAgMDAwICAgMDAwICBcbiMjI1xuXG5wYXRoID0gcmVxdWlyZSAncGF0aCdcblxueyByZWQsIGdyZWVuLCBibHVlLCBibHVlQnJpZ2h0LCB5ZWxsb3csIHllbGxvd0JyaWdodCwgd2hpdGUsIHdoaXRlQnJpZ2h0LCBncmF5LCBib2xkLCBkaW0gfSA9IHJlcXVpcmUgJ2NvbG9yZXR0ZSdcblxuTUVUQSA9IFtcbiAgICBcbiAgICAjIDAwMDAwMDAwICAgMDAwMDAwMDAgICAgMDAwMDAwMCAgIDAwMDAwMDAwICAwMDAgIDAwMCAgICAgIDAwMDAwMDAwICBcbiAgICAjIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgIDAwMCAgICAgIDAwMCAgICAgICBcbiAgICAjIDAwMDAwMDAwICAgMDAwMDAwMCAgICAwMDAgICAwMDAgIDAwMDAwMCAgICAwMDAgIDAwMCAgICAgIDAwMDAwMDAgICBcbiAgICAjIDAwMCAgICAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgIDAwMCAgICAgIDAwMCAgICAgICBcbiAgICAjIDAwMCAgICAgICAgMDAwICAgMDAwICAgMDAwMDAwMCAgIDAwMCAgICAgICAwMDAgIDAwMDAwMDAgIDAwMDAwMDAwICBcbiAgICBrZXk6ICAncHJvZmlsZScgICBcbiAgICBkZXNjOiAnQHByb2ZpbGUgW2lkXSAuLi4nXG4gICAgaW5mbzogYXJnczogMVxuICAgIG1ldGE6IChhcmdzOixub2RlOikgLT4gXG4gICAgICAgIFxuICAgICAgICBpZCA9IFwiI3tub2RlLmNvbmRpdGlvbi5sb2NhdGlvbkRhdGEuZmlyc3RfbGluZSsxfV8je25vZGUuY29uZGl0aW9uLmxvY2F0aW9uRGF0YS5maXJzdF9jb2x1bW59XCJcbiAgICAgICAgbmFtZSA9IGFyZ3NbMF0gPyBpZFxuICAgICAgICBhZnRlcjogIFwiY29uc29sZS5sb2coJyN7bmFtZX0nLCByZXF1aXJlKCdwcmV0dHktdGltZScpKHByb2Nlc3MuaHJ0aW1lKGtvZmZlZV8je2lkfSkpKTtcIlxuICAgICAgICBjb2RlOiAgIFwia29mZmVlXyN7aWR9ID0gcHJvY2Vzcy5ocnRpbWUoKVwiXG4gICAgICAgIHJlZHVjZTogZmFsc2VcbiAgICAgICAgYm9keTogICB0cnVlXG4sXG4gICAgIyAgMDAwMDAwMCAgMDAwMDAwMDAwICAgMDAwMDAwMCAgIDAwMDAwMDAwICAgMDAwMDAwMDAwICBcbiAgICAjIDAwMCAgICAgICAgICAwMDAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAgICAwMDAgICAgIFxuICAgICMgMDAwMDAwMCAgICAgIDAwMCAgICAgMDAwMDAwMDAwICAwMDAwMDAwICAgICAgIDAwMCAgICAgXG4gICAgIyAgICAgIDAwMCAgICAgMDAwICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgICAgMDAwICAgICBcbiAgICAjIDAwMDAwMDAgICAgICAwMDAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAgICAwMDAgICAgIFxuICAgIGtleTogICdzdGFydCcgICBcbiAgICBkZXNjOiAnQHN0YXJ0IGlkIC4uLidcbiAgICBpbmZvOlxuICAgICAgICB0aGVuOiB0cnVlXG4gICAgICAgIGFyZ3M6IDFcbiAgICBtZXRhOiAoYXJnczopIC0+IFxuICAgICAgICBpZCA9IGFyZ3NbMF0gPyAnc3RhcnRfZW5kJ1xuICAgICAgICBiZWZvcmU6IFwia29mZmVlXyN7aWR9ID0gcHJvY2Vzcy5ocnRpbWUoKVwiXG4gICAgICAgIHJlZHVjZTogdHJ1ZVxuICAgICAgICBib2R5OiAgIGZhbHNlXG4sXG4gICAga2V5OiAgJ2VuZCcgICAgIFxuICAgIGRlc2M6ICdAZW5kIGlkIC4uLidcbiAgICBpbmZvOlxuICAgICAgICB0aGVuOiB0cnVlXG4gICAgICAgIGFyZ3M6IDFcbiAgICBtZXRhOiAoYXJnczopIC0+IFxuICAgICAgICBpZCA9IGFyZ3NbMF0gPyAnc3RhcnRfZW5kJ1xuICAgICAgICBiZWZvcmU6IFwiY29uc29sZS5sb2coJyN7aWR9JywgcmVxdWlyZSgncHJldHR5LXRpbWUnKShwcm9jZXNzLmhydGltZShrb2ZmZWVfI3tpZH0pKSlcIlxuICAgICAgICByZWR1Y2U6IHRydWVcbiAgICAgICAgYm9keTogICBmYWxzZVxuLCAgICAgICAgXG4gICAgIyAwMDAwMDAwICAgIDAwMDAwMDAgICAgIDAwMDAwMDAgICBcbiAgICAjIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAgICAgIFxuICAgICMgMDAwICAgMDAwICAwMDAwMDAwICAgIDAwMCAgMDAwMCAgXG4gICAgIyAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICBcbiAgICAjIDAwMDAwMDAgICAgMDAwMDAwMCAgICAgMDAwMDAwMCAgIFxuICAgIGtleTogJ2RiZycgICAgXG4gICAgZGVzYzogJ0BkYmcgbXNnIC4uLidcbiAgICBpbmZvOlxuICAgICAgICB0aGVuOiB0cnVlXG4gICAgICAgIGFyZ3M6IDFcbiAgICBtZXRhOiAob3B0czosYXJnczosbm9kZTopIC0+XG4gICAgICAgICMgY29kZTogICBcIm9wdHMuRGVidWdcIlxuICAgICAgICBjb2RlOiAgIFwidHJ1ZVwiXG4gICAgICAgIGV2YWw6ICAgdHJ1ZVxuICAgICAgICBiZWZvcmU6IGxvZ1NvdXJjZSBvcHRzOm9wdHMsIGFyZ3M6YXJncywgbm9kZTpub2RlXG4gICAgICAgIGFmdGVyOiAgXCIpXCJcbiAgICAgICAgcmVkdWNlOiB0cnVlXG4gICAgICAgIGJsb2NrOiAgZmFsc2VcbiwgICAgXG4gICAgIyAwMDAwMDAwMDAgIDAwMDAwMDAwICAgMDAwMDAwMCAgMDAwMDAwMDAwICBcbiAgICAjICAgIDAwMCAgICAgMDAwICAgICAgIDAwMCAgICAgICAgICAwMDAgICAgIFxuICAgICMgICAgMDAwICAgICAwMDAwMDAwICAgMDAwMDAwMCAgICAgIDAwMCAgICAgXG4gICAgIyAgICAwMDAgICAgIDAwMCAgICAgICAgICAgIDAwMCAgICAgMDAwICAgICBcbiAgICAjICAgIDAwMCAgICAgMDAwMDAwMDAgIDAwMDAwMDAgICAgICAwMDAgICAgIFxuICAgIGtleTogJ3Rlc3QnXG4gICAgZGVzYzogJ0B0ZXN0IGlkIC4uLidcbiAgICBtZXRhOiAob3B0czosYXJnczosbm9kZTopIC0+XG4gICAgICAgIGxvZyBvcHRzXG4gICAgICAgIGNvZGU6ICAgZmFsc2VcbiAgICAgICAgYmVmb3JlOiBvcHRzLnRlc3QgYW5kIGxvZ1NvdXJjZSBvcHRzOm9wdHMsIGFyZ3M6YXJncywgbm9kZTpub2RlLCBjbG9zZTp0cnVlXG4gICAgICAgIHJlZHVjZTogdHJ1ZVxuICAgICAgICBib2R5OiAgIG9wdHMudGVzdFxuLCAgICAgICAgXG4gICAgIyAwMDAwMDAwMCAgICAwMDAwMDAwICAgMDAwICAgMDAwICAwMDAwMDAwICAgIFxuICAgICMgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMDAgIDAwMCAgMDAwICAgMDAwICBcbiAgICAjIDAwMDAwMDAgICAgMDAwMDAwMDAwICAwMDAgMCAwMDAgIDAwMCAgIDAwMCAgXG4gICAgIyAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAwMDAwICAwMDAgICAwMDAgIFxuICAgICMgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgICBcbiAgICBrZXk6ICdyYW5kJyAgICBcbiAgICBpbmZvOiBhcmdzOiAxXG4gICAgbWV0YTogKGFyZ3M6KSAtPiBcbiAgICAgICAgY29kZTpcIk1hdGgucmFuZG9tKCkgPCAje2FyZ3M/WzBdID8gMC41fVwiIFxuICAgICAgICByZWR1Y2U6ZmFsc2UgXG4gICAgICAgIGJvZHk6dHJ1ZSAgIFxuICAgIFxuICAgICMga2V5OiAndG9rZW4nICdwYXJzZScgJ2NvZGUnICd0ZXN0JyAnYXNzZXJ0J1xuXVxuXG4jICAwMDAwMDAwICAgMDAwMDAwMCAgIDAwICAgICAwMCAgMDAwMDAwMDAgICAwMDAgIDAwMCAgICAgIDAwMDAwMDAwICBcbiMgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgMDAwICAgICAgMDAwICAgICAgIFxuIyAwMDAgICAgICAgMDAwICAgMDAwICAwMDAwMDAwMDAgIDAwMDAwMDAwICAgMDAwICAwMDAgICAgICAwMDAwMDAwICAgXG4jIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAwIDAwMCAgMDAwICAgICAgICAwMDAgIDAwMCAgICAgIDAwMCAgICAgICBcbiMgIDAwMDAwMDAgICAwMDAwMDAwICAgMDAwICAgMDAwICAwMDAgICAgICAgIDAwMCAgMDAwMDAwMCAgMDAwMDAwMDAgIFxuXG5UQUIgPSAnICAgICdcblxuY29tcGlsZU1ldGFJZiA9IChub2RlOixvcHRzOikgLT5cblxuICAgIHsgQmxvY2ssIEFzc2lnbiwgVmFsdWUsIExpdGVyYWwgfSA9IHJlcXVpcmUgJy4vbm9kZXMnXG4gICAgXG4gICAgaW5mbyA9IHJlZHVjZTp0cnVlXG4gICAgXG4gICAgaWYgbm9kZS5jb25kaXRpb24uYmFzZT8udmFsdWUgPT0gJ3RoaXMnXG4gICAgICAgIFxuICAgICAgICBtZXRhS2V5ID0gbm9kZS5jb25kaXRpb24ucHJvcGVydGllcz9bMF0/Lm5hbWU/LnZhbHVlXG4gICAgICAgIGlmIHR5cGVvZiBvcHRzLm1ldGFbbWV0YUtleV0gPT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgaW5mbyA9IG9wdHMubWV0YVttZXRhS2V5XSBvcHRzOm9wdHMsIG5vZGU6bm9kZSwgYXJnczpbXVxuICAgICAgICAgICAgXG4gICAgZWxzZSBpZiBub2RlLmNvbmRpdGlvbi52YXJpYWJsZT8uYmFzZT8udmFsdWUgPT0gJ3RoaXMnXG4gICAgICAgIFxuICAgICAgICBtZXRhS2V5ID0gbm9kZS5jb25kaXRpb24udmFyaWFibGUucHJvcGVydGllcz9bMF0/Lm5hbWU/LnZhbHVlXG4gICAgICAgIGlmIHR5cGVvZiBvcHRzLm1ldGFbbWV0YUtleV0gPT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgYXJncyA9IG5vZGUuY29uZGl0aW9uLmFyZ3MubWFwIChhKSAtPiBcbiAgICAgICAgICAgICAgICBhLmJhc2U/LnZhbHVlXG4gICAgICAgICAgICBhcmdzID0gYXJncy5tYXAgKGEpIC0+IGlmIGFbMF0gaW4gWydcIicsIFwiJ1wiXSB0aGVuIGFbMS4uLTJdIGVsc2UgYVxuICAgICAgICAgICAgaW5mbyA9IG9wdHMubWV0YVttZXRhS2V5XSBvcHRzOm9wdHMsIG5vZGU6bm9kZSwgYXJnczphcmdzXG4gICAgICAgIFxuICAgIGlmIGluZm8uZXZhbCBvciBub3QgaW5mby5jb2RlP1xuICAgICAgICBcbiAgICAgICAgY29uZCA9IGluZm8uY29kZSA/IG5vZGUuZnJhZ21lbnRzVG9UZXh0IG5vZGUuY29uZGl0aW9uLmNvbXBpbGVUb0ZyYWdtZW50cyBvcHRzLCAyICNMRVZFTF9QQVJFTlxuICAgICAgICB0cnlcbiAgICAgICAgICAgIG9zID0gcmVxdWlyZSAnb3MnXG4gICAgICAgICAgICBmcyA9IHJlcXVpcmUgJ2ZzJ1xuICAgICAgICAgICAgaW5mby5ib2R5ID0hISBldmFsIGNvbmRcbiAgICAgICAgICAgIGlmIGluZm8uZXZhbCBhbmQgaW5mby5yZWR1Y2UgYW5kIG5vdCBpbmZvLmJvZHkgYW5kIG5vdCBub2RlLmVsc2VCb2R5XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtdXG4gICAgICAgIGNhdGNoIGVyclxuICAgICAgICAgICAgZXJyb3IgZXJyXG4gICAgICAgIFxuICAgIGZyYWcgPSBbXVxuICAgIFxuICAgIGlmIGluZm8ucmVkdWNlID09IGZhbHNlXG4gICAgICAgIGZyYWcgPSBmcmFnLmNvbmNhdCBub2RlLm1ha2VDb2RlKFwiaWYgKFwiKSwgbm9kZS5tYWtlQ29kZShpbmZvLmNvZGUpLCBub2RlLm1ha2VDb2RlKFwiKSB7XFxuXCIpXG4gICAgICAgIFxuICAgICAgICBpbmRlbnQgPSBvcHRzLmluZGVudCArIFRBQlxuICAgICAgICBib2R5T3B0ID0gbWVyZ2Ugb3B0cywge2luZGVudH1cbiAgICBlbHNlXG4gICAgICAgIGluZGVudCA9IG9wdHMuaW5kZW50XG4gICAgICAgIGJvZHlPcHQgPSBvcHRzXG5cbiAgICBpZiBpbmZvLmJlZm9yZVxuICAgICAgICBmcmFnLnB1c2ggbm9kZS5tYWtlQ29kZSAoaW5mby5ibG9jayAhPSBmYWxzZSBhbmQgaW5kZW50IG9yICcnKSArIGluZm8uYmVmb3JlXG4gICAgICAgIFxuICAgIGlmIGluZm8uYm9keVxuICAgICAgICBpZiBpbmZvLmJsb2NrICE9IGZhbHNlXG4gICAgICAgICAgICBib2R5ID0gbm9kZS5lbnN1cmVCbG9jayBub2RlLmJvZHlcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgaWYgbm9kZS5ib2R5IGluc3RhbmNlb2YgQmxvY2tcbiAgICAgICAgICAgICAgICBib2R5ID0gbm9kZS5ib2R5LmV4cHJlc3Npb25zWzBdXG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgYm9keSA9IG5vZGUuYm9keVxuICAgICAgICBpZiBib2R5XG4gICAgICAgICAgICBmcmFnID0gZnJhZy5jb25jYXQgYm9keS5jb21waWxlVG9GcmFnbWVudHMgYm9keU9wdFxuICAgICAgICBcbiAgICBpZiBpbmZvLmFmdGVyXG4gICAgICAgIGZyYWcucHVzaCBub2RlLm1ha2VDb2RlICgoaW5mby5ibG9jayAhPSBmYWxzZSkgYW5kICgnXFxuJyArIGluZGVudCkgb3IgJycpICsgaW5mby5hZnRlclxuXG4gICAgaWYgbm90IGluZm8ucmVkdWNlXG4gICAgICAgIGZyYWcucHVzaCBub2RlLm1ha2VDb2RlKFwiXFxuI3tub2RlLnRhYn19XCIpXG4gICAgICAgICAgICAgICAgICAgIFxuICAgIGlmIG5vZGUuZWxzZUJvZHkgYW5kIChpbmZvLnJlZHVjZSA9PSBmYWxzZSBvciBpbmZvLmJvZHkgPT0gZmFsc2UpXG4gICAgICAgIGZyYWcucHVzaCBub2RlLm1ha2VDb2RlICcgZWxzZSAnIGlmIG5vdCBpbmZvLnJlZHVjZVxuICAgICAgICBpZiBub2RlLmlzQ2hhaW5cbiAgICAgICAgICAgIGZyYWcgPSBmcmFnLmNvbmNhdCBub2RlLmVsc2VCb2R5LnVud3JhcCgpLmNvbXBpbGVUb0ZyYWdtZW50cyBib2R5T3B0IyAsIDEgIyBMRVZFTF9UT1A/Pz9cbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgZnJhZyA9IGZyYWcuY29uY2F0IG5vZGUuZWxzZUJvZHkuY29tcGlsZVRvRnJhZ21lbnRzIGJvZHlPcHRcbiAgICAgICAgXG4gICAgIyBmcmFnLnB1c2ggbm9kZS5tYWtlQ29kZSAnJyBpZiBub3QgZnJhZy5sZW5ndGhcbiAgICAjIGxvZyBmcmFnXG4gICAgcmV0dXJuIGZyYWdcbiAgICBcbiMgdXRpbGl0eSA9IChuYW1lLCBvKSAtPlxuICAgICMge3Jvb3R9ID0gby5zY29wZVxuICAgICMgaWYgbmFtZSBvZiByb290LnV0aWxpdGllc1xuICAgICAgICAjIHJvb3QudXRpbGl0aWVzW25hbWVdXG4gICAgIyBlbHNlXG4gICAgICAgICMgcmVmID0gcm9vdC5mcmVlVmFyaWFibGUgbmFtZVxuICAgICAgICAjIHJvb3QuYXNzaWduIHJlZiwgVVRJTElUSUVTW25hbWVdIG8gIyA8LSBhZGRzIHV0aWxpdHkgdG8gdG9wIGxldmVsIHNjb3BlXG4gICAgICAgICMgcm9vdC51dGlsaXRpZXNbbmFtZV0gPSByZWZcblxubG9nU291cmNlID0gKG9wdHM6LGFyZ3M6LG5vZGU6LGNsb3NlOikgLT5cbiAgICBcbiAgICBzb3VyY2UgPSBvcHRzLnNvdXJjZSA/IG9wdHMuZmlsZW5hbWUgPyAnJ1xuICAgIGV4dCA9ICcnXG4gICAgaWYgc291cmNlXG4gICAgICAgIFtzb3VyY2UsIGV4dC4uLl0gPSBwYXRoLmJhc2VuYW1lKHNvdXJjZSkuc3BsaXQgJy4nXG4gICAgICAgIHNvdXJjZSAgPSB5ZWxsb3cgW3llbGxvd0JyaWdodChzb3VyY2UpLCBkaW0gZXh0LmpvaW4nLiddLmpvaW4gZGltICcuJ1xuICAgIGJlZm9yZSAgPSBcImNvbnNvbGUubG9nKCcje3NvdXJjZX0je2RpbSBibHVlICc6J30je2JsdWVCcmlnaHQgXCIje25vZGUuY29uZGl0aW9uLmxvY2F0aW9uRGF0YS5maXJzdF9saW5lKzF9XCJ9J1wiXG4gICAgYmVmb3JlICs9IFwiLCAnI3tib2xkIHdoaXRlQnJpZ2h0IGFyZ3NbMF19J1wiIGlmIGFyZ3NbMF0gXG4gICAgaWYgKGNsb3NlKVxuICAgICAgICBiZWZvcmUgKz0gJyk7J1xuICAgIGVsc2VcbiAgICAgICAgYmVmb3JlICs9IFwiLCBcIlxuICAgIGJlZm9yZVxuICAgICAgICBcbiMgMDAwICAwMDAgICAwMDAgICAgICAgIDAwMCAgMDAwMDAwMDAgICAwMDAwMDAwICAwMDAwMDAwMDAgIFxuIyAwMDAgIDAwMDAgIDAwMCAgICAgICAgMDAwICAwMDAgICAgICAgMDAwICAgICAgICAgIDAwMCAgICAgXG4jIDAwMCAgMDAwIDAgMDAwICAgICAgICAwMDAgIDAwMDAwMDAgICAwMDAgICAgICAgICAgMDAwICAgICBcbiMgMDAwICAwMDAgIDAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgICAgICAgICAwMDAgICAgIFxuIyAwMDAgIDAwMCAgIDAwMCAgIDAwMDAwMDAgICAwMDAwMDAwMCAgIDAwMDAwMDAgICAgIDAwMCAgICAgXG5cbmluamVjdE1ldGEgPSAob3B0aW9ucykgLT4gIyBtYWtlIHN1cmUgdGhhdCBvcHRpb25zIGhhcyBhIG1ldGEgc2V0XG4gICAgXG4gICAgb3B0aW9ucyA/PSB7fVxuICAgIFxuICAgIHsgZXh0ZW5kIH0gPSByZXF1aXJlICcuL2hlbHBlcnMnXG4gICAgXG4gICAgZGVmYXVsdE1ldGEgPSB7fVxuICAgIE1FVEEubWFwIChtKSAtPiBkZWZhdWx0TWV0YVttLmtleV0gPSBtLm1ldGE7IG0ubWV0YS5rZXkgPSBtLmtleTsgbS5tZXRhLmluZm8gPSBtLmluZm9cbiAgICBcbiAgICBtZXRhICAgID0gZXh0ZW5kIGRlZmF1bHRNZXRhLCBvcHRpb25zLm1ldGEgPyB7fVxuICAgIG9wdGlvbnMgPSBleHRlbmQgeyBtZXRhOiBtZXRhIH0sIG9wdGlvbnNcbiAgICBvcHRpb25zXG5cbmxvZ01ldGFzID0gLT5cbiAgICBcbiAgICB7IHBhZCB9ID0gcmVxdWlyZSAnLi9oZWxwZXJzJ1xuICAgIHsgZ3JheSB9ID0gcmVxdWlyZSAnY29sb3JldHRlJ1xuICAgIGxvZyBcIiN7Z3JheSAnTWV0YXM6J31cXG5cXG4jeyBNRVRBLm1hcCgoZikgLT4gXCIgICAgI3twYWQgZi5rZXl9I3tncmF5IGYuZGVzYyA/IFwiQCN7Zi5rZXl9IC4uLlwifVwiKS5qb2luKCdcXG4nKSB9XCJcbiAgICBsb2cgXCIgICAgaWYgZWxzZSAgICAgICAgICAgICAgICAgI3tncmF5ICdAaWYgY29uZCAuLi4gW1tAZWxpZiBjb25kIC4uLl0gQGVsc2UgLi4uXSd9XFxuXCJcbiAgICBcbm1vZHVsZS5leHBvcnRzID0geyBNRVRBLCBpbmplY3RNZXRhLCBsb2dNZXRhcywgY29tcGlsZU1ldGFJZiB9XG4iXX0=
//# sourceURL=../coffee/meta.coffee