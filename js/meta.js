// generated by koffee 0.25.0

/*
00     00  00000000  000000000   0000000   
000   000  000          000     000   000  
000000000  0000000      000     000000000  
000 0 000  000          000     000   000  
000   000  00000000     000     000   000
 */
var META, TAB, blue, blueBright, bold, compileMetaIf, dim, gray, green, injectMeta, logMetas, logSource, options, path, red, ref, white, whiteBright, yellow, yellowBright,
    slice = [].slice;

path = require('path');

ref = require('colorette'), red = ref.red, green = ref.green, blue = ref.blue, blueBright = ref.blueBright, yellow = ref.yellow, yellowBright = ref.yellowBright, white = ref.white, whiteBright = ref.whiteBright, gray = ref.gray, bold = ref.bold, dim = ref.dim, options = ref.options;

META = [
    {
        key: 'profile',
        desc: '@profile [id] ...',
        meta: function(arg) {
            var args, id, name, node, ref1, ref2, ref3;
            args = (ref1 = arg.args) != null ? ref1 : null, node = (ref2 = arg.node) != null ? ref2 : null;
            id = (node.condition.locationData.first_line + 1) + "_" + node.condition.locationData.first_column;
            name = (ref3 = args[0]) != null ? ref3 : id;
            return {
                after: "console.log('" + name + "', require('pretty-time')(process.hrtime(koffee_" + id + ")));",
                code: "koffee_" + id + " = process.hrtime()",
                reduce: false,
                body: true
            };
        }
    }, {
        key: 'start',
        desc: '@start id ...',
        info: {
            then: true,
            args: 1
        },
        meta: function(arg) {
            var args, id, ref1, ref2;
            args = (ref1 = arg.args) != null ? ref1 : null;
            id = (ref2 = args[0]) != null ? ref2 : 'start_end';
            return {
                before: "koffee_" + id + " = process.hrtime()",
                reduce: true,
                body: false
            };
        }
    }, {
        key: 'end',
        desc: '@end id ...',
        info: {
            then: true,
            args: 1
        },
        meta: function(arg) {
            var args, id, ref1, ref2;
            args = (ref1 = arg.args) != null ? ref1 : null;
            id = (ref2 = args[0]) != null ? ref2 : 'start_end';
            return {
                before: "console.log('" + id + "', require('pretty-time')(process.hrtime(koffee_" + id + ")))",
                reduce: true,
                body: false
            };
        }
    }, {
        key: 'dbg',
        desc: '@dbg msg ...',
        info: {
            then: true,
            args: 1
        },
        meta: function(arg) {
            var args, node, opts, ref1, ref2, ref3;
            opts = (ref1 = arg.opts) != null ? ref1 : null, args = (ref2 = arg.args) != null ? ref2 : null, node = (ref3 = arg.node) != null ? ref3 : null;
            return {
                code: "true",
                "eval": true,
                before: logSource({
                    opts: opts,
                    args: args,
                    node: node
                }),
                after: ")",
                reduce: true,
                block: false
            };
        }
    }, {
        key: 'test',
        desc: '@test id ...',
        meta: function(arg) {
            var args, node, opts, ref1, ref2, ref3;
            opts = (ref1 = arg.opts) != null ? ref1 : null, args = (ref2 = arg.args) != null ? ref2 : null, node = (ref3 = arg.node) != null ? ref3 : null;
            return {
                before: opts.test && logSource({
                    opts: opts,
                    args: args,
                    node: node,
                    close: true
                }),
                skip: !opts.test,
                reduce: true,
                body: true
            };
        }
    }, {
        key: 'rand',
        meta: function(arg) {
            var args, ref1, ref2;
            args = (ref1 = arg.args) != null ? ref1 : null;
            return {
                code: "Math.random() < " + ((ref2 = args != null ? args[0] : void 0) != null ? ref2 : 0.5),
                reduce: false,
                body: true
            };
        }
    }
];

TAB = '    ';

compileMetaIf = function(arg) {
    var Assign, Block, Literal, Value, args, body, bodyOpt, cond, err, frag, fs, indent, info, merge, metaKey, node, opts, os, ref1, ref10, ref11, ref12, ref13, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9;
    node = (ref1 = arg.node) != null ? ref1 : null, opts = (ref2 = arg.opts) != null ? ref2 : null;
    ref3 = require('./nodes'), Block = ref3.Block, Assign = ref3.Assign, Value = ref3.Value, Literal = ref3.Literal;
    merge = require('./helpers').merge;
    info = {
        reduce: true,
        "eval": true
    };
    if (((ref4 = node.condition.base) != null ? ref4.value : void 0) === 'this') {
        metaKey = (ref5 = node.condition.properties) != null ? (ref6 = ref5[0]) != null ? (ref7 = ref6.name) != null ? ref7.value : void 0 : void 0 : void 0;
        if (typeof opts.meta[metaKey] === 'function') {
            info = opts.meta[metaKey]({
                opts: opts,
                node: node,
                args: []
            });
        }
    } else if (((ref8 = node.condition.variable) != null ? (ref9 = ref8.base) != null ? ref9.value : void 0 : void 0) === 'this') {
        metaKey = (ref10 = node.condition.variable.properties) != null ? (ref11 = ref10[0]) != null ? (ref12 = ref11.name) != null ? ref12.value : void 0 : void 0 : void 0;
        if (typeof opts.meta[metaKey] === 'function') {
            args = node.condition.args.map(function(a) {
                var ref13;
                return (ref13 = a.base) != null ? ref13.value : void 0;
            });
            args = args.map(function(a) {
                var ref13;
                if ((ref13 = a[0]) === '"' || ref13 === "'") {
                    return a.slice(1, -1);
                } else {
                    return a;
                }
            });
            info = opts.meta[metaKey]({
                opts: opts,
                node: node,
                args: args
            });
        }
    }
    if (info.skip) {
        return [];
    }
    if (info["eval"]) {
        cond = (ref13 = info.code) != null ? ref13 : node.fragmentsToText(node.condition.compileToFragments(opts, 2));
        try {
            os = require('os');
            fs = require('fs');
            info.body = !!eval(cond);
            if (info["eval"] && info.reduce && !info.body && !node.elseBody) {
                return [];
            }
        } catch (error) {
            err = error;
            console.error(err);
        }
    }
    frag = [];
    if (info.reduce === false) {
        frag = frag.concat(node.makeCode("if ("), node.makeCode(info.code), node.makeCode(") {\n"));
        indent = opts.indent + TAB;
        bodyOpt = merge(opts, {
            indent: indent
        });
    } else {
        indent = opts.indent;
        bodyOpt = opts;
    }
    if (info.before) {
        frag.push(node.makeCode((info.block !== false && indent || '') + info.before));
    }
    if (info.body) {
        if (info.block !== false) {
            body = node.ensureBlock(node.body);
        } else {
            if (node.body instanceof Block) {
                body = node.body.expressions[0];
            } else {
                body = node.body;
            }
        }
        if (body) {
            frag = frag.concat(body.compileToFragments(bodyOpt));
        }
    }
    if (info.after) {
        frag.push(node.makeCode(((info.block !== false) && ('\n' + indent) || '') + info.after));
    }
    if (!info.reduce) {
        frag.push(node.makeCode("\n" + node.tab + "}"));
    }
    if (node.elseBody && (info.reduce === false || info.body === false)) {
        if (!info.reduce) {
            frag.push(node.makeCode(' else '));
        }
        if (node.isChain) {
            frag = frag.concat(node.elseBody.unwrap().compileToFragments(bodyOpt));
        } else {
            frag = frag.concat(node.elseBody.compileToFragments(bodyOpt));
        }
    }
    return frag;
};

logSource = function(arg) {
    var args, before, close, ext, node, opts, ref1, ref2, ref3, ref4, ref5, ref6, ref7, source;
    opts = (ref1 = arg.opts) != null ? ref1 : null, args = (ref2 = arg.args) != null ? ref2 : null, node = (ref3 = arg.node) != null ? ref3 : null, close = (ref4 = arg.close) != null ? ref4 : null;
    options.enabled = opts.feature.color;
    source = (ref5 = (ref6 = opts.source) != null ? ref6 : opts.filename) != null ? ref5 : '';
    ext = '';
    if (source) {
        ref7 = path.basename(source).split('.'), source = ref7[0], ext = 2 <= ref7.length ? slice.call(ref7, 1) : [];
        source = yellow([yellowBright(source), dim(ext.join`.`)].join(dim('.')));
    }
    before = "console.log('" + source + (dim(blue(':'))) + (blueBright("" + (node.condition.locationData.first_line + 1))) + "'";
    if (args[0]) {
        before += ", '" + (bold(whiteBright(args[0]))) + "'";
    }
    if (close) {
        before += ');';
    } else {
        before += ", ";
    }
    return before;
};

injectMeta = function(options) {
    var defaultMeta, extend, meta, ref1;
    if (options != null) {
        options;
    } else {
        options = {};
    }
    extend = require('./helpers').extend;
    defaultMeta = {};
    META.map(function(m) {
        defaultMeta[m.key] = m.meta;
        m.meta.key = m.key;
        return m.meta.info = m.info;
    });
    meta = extend(defaultMeta, (ref1 = options.meta) != null ? ref1 : {});
    options = extend({
        meta: meta
    }, options);
    return options;
};

logMetas = function() {
    var pad;
    pad = require('./helpers').pad;
    gray = require('colorette').gray;
    console.log((gray('Metas:')) + "\n\n" + (META.map(function(f) {
        var ref1;
        return "    " + (pad(f.key)) + (gray((ref1 = f.desc) != null ? ref1 : "@" + f.key + " ..."));
    }).join('\n')));
    return console.log("    if else                 " + (gray('@if cond ... [[@elif cond ...] @else ...]')) + "\n");
};

module.exports = {
    META: META,
    injectMeta: injectMeta,
    logMetas: logMetas,
    compileMetaIf: compileMetaIf
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWV0YS5qcyIsInNvdXJjZVJvb3QiOiIuIiwic291cmNlcyI6WyIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7Ozs7OztBQUFBLElBQUEsc0tBQUE7SUFBQTs7QUFRQSxJQUFBLEdBQU8sT0FBQSxDQUFRLE1BQVI7O0FBRVAsTUFBdUcsT0FBQSxDQUFRLFdBQVIsQ0FBdkcsRUFBRSxhQUFGLEVBQU8saUJBQVAsRUFBYyxlQUFkLEVBQW9CLDJCQUFwQixFQUFnQyxtQkFBaEMsRUFBd0MsK0JBQXhDLEVBQXNELGlCQUF0RCxFQUE2RCw2QkFBN0QsRUFBMEUsZUFBMUUsRUFBZ0YsZUFBaEYsRUFBc0YsYUFBdEYsRUFBMkY7O0FBRTNGLElBQUEsR0FBTztJQU9IO1FBQUEsR0FBQSxFQUFNLFNBQU47UUFDQSxJQUFBLEVBQU0sbUJBRE47UUFFQSxJQUFBLEVBQU0sU0FBQyxHQUFEO0FBRUYsZ0JBQUE7WUFGRywwQ0FBRyxNQUFHLDBDQUFHO1lBRVosRUFBQSxHQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsVUFBNUIsR0FBdUMsQ0FBeEMsQ0FBQSxHQUEwQyxHQUExQyxHQUE2QyxJQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQztZQUNoRixJQUFBLHFDQUFpQjttQkFDakI7Z0JBQUEsS0FBQSxFQUFRLGVBQUEsR0FBZ0IsSUFBaEIsR0FBcUIsa0RBQXJCLEdBQXVFLEVBQXZFLEdBQTBFLE1BQWxGO2dCQUNBLElBQUEsRUFBUSxTQUFBLEdBQVUsRUFBVixHQUFhLHFCQURyQjtnQkFFQSxNQUFBLEVBQVEsS0FGUjtnQkFHQSxJQUFBLEVBQVEsSUFIUjs7UUFKRSxDQUZOO0tBUEcsRUF1Qkg7UUFBQSxHQUFBLEVBQU0sT0FBTjtRQUNBLElBQUEsRUFBTSxlQUROO1FBRUEsSUFBQSxFQUNJO1lBQUEsSUFBQSxFQUFNLElBQU47WUFDQSxJQUFBLEVBQU0sQ0FETjtTQUhKO1FBS0EsSUFBQSxFQUFNLFNBQUMsR0FBRDtBQUNGLGdCQUFBO1lBREcsMENBQUc7WUFDTixFQUFBLHFDQUFlO21CQUNmO2dCQUFBLE1BQUEsRUFBUSxTQUFBLEdBQVUsRUFBVixHQUFhLHFCQUFyQjtnQkFDQSxNQUFBLEVBQVEsSUFEUjtnQkFFQSxJQUFBLEVBQVEsS0FGUjs7UUFGRSxDQUxOO0tBdkJHLEVBa0NIO1FBQUEsR0FBQSxFQUFNLEtBQU47UUFDQSxJQUFBLEVBQU0sYUFETjtRQUVBLElBQUEsRUFDSTtZQUFBLElBQUEsRUFBTSxJQUFOO1lBQ0EsSUFBQSxFQUFNLENBRE47U0FISjtRQUtBLElBQUEsRUFBTSxTQUFDLEdBQUQ7QUFDRixnQkFBQTtZQURHLDBDQUFHO1lBQ04sRUFBQSxxQ0FBZTttQkFDZjtnQkFBQSxNQUFBLEVBQVEsZUFBQSxHQUFnQixFQUFoQixHQUFtQixrREFBbkIsR0FBcUUsRUFBckUsR0FBd0UsS0FBaEY7Z0JBQ0EsTUFBQSxFQUFRLElBRFI7Z0JBRUEsSUFBQSxFQUFRLEtBRlI7O1FBRkUsQ0FMTjtLQWxDRyxFQWtESDtRQUFBLEdBQUEsRUFBSyxLQUFMO1FBQ0EsSUFBQSxFQUFNLGNBRE47UUFFQSxJQUFBLEVBQ0k7WUFBQSxJQUFBLEVBQU0sSUFBTjtZQUNBLElBQUEsRUFBTSxDQUROO1NBSEo7UUFLQSxJQUFBLEVBQU0sU0FBQyxHQUFEO0FBQ0YsZ0JBQUE7WUFERywwQ0FBRyxNQUFHLDBDQUFHLE1BQUcsMENBQUc7bUJBQ2xCO2dCQUFBLElBQUEsRUFBUSxNQUFSO2dCQUNBLENBQUEsSUFBQSxDQUFBLEVBQVEsSUFEUjtnQkFFQSxNQUFBLEVBQVEsU0FBQSxDQUFVO29CQUFBLElBQUEsRUFBSyxJQUFMO29CQUFXLElBQUEsRUFBSyxJQUFoQjtvQkFBc0IsSUFBQSxFQUFLLElBQTNCO2lCQUFWLENBRlI7Z0JBR0EsS0FBQSxFQUFRLEdBSFI7Z0JBSUEsTUFBQSxFQUFRLElBSlI7Z0JBS0EsS0FBQSxFQUFRLEtBTFI7O1FBREUsQ0FMTjtLQWxERyxFQW9FSDtRQUFBLEdBQUEsRUFBSyxNQUFMO1FBQ0EsSUFBQSxFQUFNLGNBRE47UUFFQSxJQUFBLEVBQU0sU0FBQyxHQUFEO0FBQ0YsZ0JBQUE7WUFERywwQ0FBRyxNQUFHLDBDQUFHLE1BQUcsMENBQUc7bUJBQ2xCO2dCQUFBLE1BQUEsRUFBUSxJQUFJLENBQUMsSUFBTCxJQUFjLFNBQUEsQ0FBVTtvQkFBQSxJQUFBLEVBQUssSUFBTDtvQkFBVyxJQUFBLEVBQUssSUFBaEI7b0JBQXNCLElBQUEsRUFBSyxJQUEzQjtvQkFBaUMsS0FBQSxFQUFNLElBQXZDO2lCQUFWLENBQXRCO2dCQUNBLElBQUEsRUFBUSxDQUFJLElBQUksQ0FBQyxJQURqQjtnQkFFQSxNQUFBLEVBQVEsSUFGUjtnQkFHQSxJQUFBLEVBQVEsSUFIUjs7UUFERSxDQUZOO0tBcEVHLEVBaUZIO1FBQUEsR0FBQSxFQUFLLE1BQUw7UUFDQSxJQUFBLEVBQU0sU0FBQyxHQUFEO0FBQ0YsZ0JBQUE7WUFERywwQ0FBRzttQkFDTjtnQkFBQSxJQUFBLEVBQUssa0JBQUEsR0FBa0IsMkRBQVksR0FBWixDQUF2QjtnQkFDQSxNQUFBLEVBQU8sS0FEUDtnQkFFQSxJQUFBLEVBQUssSUFGTDs7UUFERSxDQUROO0tBakZHOzs7QUFnR1AsR0FBQSxHQUFNOztBQUVOLGFBQUEsR0FBZ0IsU0FBQyxHQUFEO0FBRVosUUFBQTtJQUZhLDBDQUFHLE1BQUcsMENBQUc7SUFFdEIsT0FBb0MsT0FBQSxDQUFRLFNBQVIsQ0FBcEMsRUFBRSxrQkFBRixFQUFTLG9CQUFULEVBQWlCLGtCQUFqQixFQUF3QjtJQUN0QixRQUFVLE9BQUEsQ0FBUSxXQUFSO0lBRVosSUFBQSxHQUFPO1FBQUEsTUFBQSxFQUFPLElBQVA7UUFBYSxDQUFBLElBQUEsQ0FBQSxFQUFLLElBQWxCOztJQUVQLGdEQUFzQixDQUFFLGVBQXJCLEtBQThCLE1BQWpDO1FBRUksT0FBQSw0R0FBNkMsQ0FBRTtRQUMvQyxJQUFHLE9BQU8sSUFBSSxDQUFDLElBQUssQ0FBQSxPQUFBLENBQWpCLEtBQTZCLFVBQWhDO1lBQ0ksSUFBQSxHQUFPLElBQUksQ0FBQyxJQUFLLENBQUEsT0FBQSxDQUFWLENBQW1CO2dCQUFBLElBQUEsRUFBSyxJQUFMO2dCQUFXLElBQUEsRUFBSyxJQUFoQjtnQkFBc0IsSUFBQSxFQUFLLEVBQTNCO2FBQW5CLEVBRFg7U0FISjtLQUFBLE1BTUssaUZBQWdDLENBQUUsd0JBQS9CLEtBQXdDLE1BQTNDO1FBRUQsT0FBQSwySEFBc0QsQ0FBRTtRQUN4RCxJQUFHLE9BQU8sSUFBSSxDQUFDLElBQUssQ0FBQSxPQUFBLENBQWpCLEtBQTZCLFVBQWhDO1lBQ0ksSUFBQSxHQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEdBQXBCLENBQXdCLFNBQUMsQ0FBRDtBQUMzQixvQkFBQTt1REFBTSxDQUFFO1lBRG1CLENBQXhCO1lBRVAsSUFBQSxHQUFPLElBQUksQ0FBQyxHQUFMLENBQVMsU0FBQyxDQUFEO0FBQU8sb0JBQUE7Z0JBQUEsYUFBRyxDQUFFLENBQUEsQ0FBQSxFQUFGLEtBQVMsR0FBVCxJQUFBLEtBQUEsS0FBYyxHQUFqQjsyQkFBMkIsQ0FBRSxjQUE3QjtpQkFBQSxNQUFBOzJCQUF5QyxFQUF6Qzs7WUFBUCxDQUFUO1lBQ1AsSUFBQSxHQUFPLElBQUksQ0FBQyxJQUFLLENBQUEsT0FBQSxDQUFWLENBQW1CO2dCQUFBLElBQUEsRUFBSyxJQUFMO2dCQUFXLElBQUEsRUFBSyxJQUFoQjtnQkFBc0IsSUFBQSxFQUFLLElBQTNCO2FBQW5CLEVBSlg7U0FIQzs7SUFTTCxJQUFHLElBQUksQ0FBQyxJQUFSO0FBQWtCLGVBQU8sR0FBekI7O0lBRUEsSUFBRyxJQUFJLEVBQUMsSUFBRCxFQUFQO1FBRUksSUFBQSx5Q0FBbUIsSUFBSSxDQUFDLGVBQUwsQ0FBcUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxrQkFBZixDQUFrQyxJQUFsQyxFQUF3QyxDQUF4QyxDQUFyQjtBQUNuQjtZQUNJLEVBQUEsR0FBSyxPQUFBLENBQVEsSUFBUjtZQUNMLEVBQUEsR0FBSyxPQUFBLENBQVEsSUFBUjtZQUNMLElBQUksQ0FBQyxJQUFMLEdBQVcsQ0FBQyxDQUFFLElBQUEsQ0FBSyxJQUFMO1lBQ2QsSUFBRyxJQUFJLEVBQUMsSUFBRCxFQUFKLElBQWMsSUFBSSxDQUFDLE1BQW5CLElBQThCLENBQUksSUFBSSxDQUFDLElBQXZDLElBQWdELENBQUksSUFBSSxDQUFDLFFBQTVEO0FBQ0ksdUJBQU8sR0FEWDthQUpKO1NBQUEsYUFBQTtZQU1NO1lBQ0gsT0FBQSxDQUFDLEtBQUQsQ0FBTyxHQUFQLEVBUEg7U0FISjs7SUFZQSxJQUFBLEdBQU87SUFFUCxJQUFHLElBQUksQ0FBQyxNQUFMLEtBQWUsS0FBbEI7UUFDSSxJQUFBLEdBQU8sSUFBSSxDQUFDLE1BQUwsQ0FBWSxJQUFJLENBQUMsUUFBTCxDQUFjLE1BQWQsQ0FBWixFQUFtQyxJQUFJLENBQUMsUUFBTCxDQUFjLElBQUksQ0FBQyxJQUFuQixDQUFuQyxFQUE2RCxJQUFJLENBQUMsUUFBTCxDQUFjLE9BQWQsQ0FBN0Q7UUFFUCxNQUFBLEdBQVMsSUFBSSxDQUFDLE1BQUwsR0FBYztRQUN2QixPQUFBLEdBQVUsS0FBQSxDQUFNLElBQU4sRUFBWTtZQUFDLFFBQUEsTUFBRDtTQUFaLEVBSmQ7S0FBQSxNQUFBO1FBTUksTUFBQSxHQUFTLElBQUksQ0FBQztRQUNkLE9BQUEsR0FBVSxLQVBkOztJQVNBLElBQUcsSUFBSSxDQUFDLE1BQVI7UUFDSSxJQUFJLENBQUMsSUFBTCxDQUFVLElBQUksQ0FBQyxRQUFMLENBQWMsQ0FBQyxJQUFJLENBQUMsS0FBTCxLQUFjLEtBQWQsSUFBd0IsTUFBeEIsSUFBa0MsRUFBbkMsQ0FBQSxHQUF5QyxJQUFJLENBQUMsTUFBNUQsQ0FBVixFQURKOztJQUdBLElBQUcsSUFBSSxDQUFDLElBQVI7UUFDSSxJQUFHLElBQUksQ0FBQyxLQUFMLEtBQWMsS0FBakI7WUFDSSxJQUFBLEdBQU8sSUFBSSxDQUFDLFdBQUwsQ0FBaUIsSUFBSSxDQUFDLElBQXRCLEVBRFg7U0FBQSxNQUFBO1lBR0ksSUFBRyxJQUFJLENBQUMsSUFBTCxZQUFxQixLQUF4QjtnQkFDSSxJQUFBLEdBQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFZLENBQUEsQ0FBQSxFQURqQzthQUFBLE1BQUE7Z0JBR0ksSUFBQSxHQUFPLElBQUksQ0FBQyxLQUhoQjthQUhKOztRQU9BLElBQUcsSUFBSDtZQUNJLElBQUEsR0FBTyxJQUFJLENBQUMsTUFBTCxDQUFZLElBQUksQ0FBQyxrQkFBTCxDQUF3QixPQUF4QixDQUFaLEVBRFg7U0FSSjs7SUFXQSxJQUFHLElBQUksQ0FBQyxLQUFSO1FBQ0ksSUFBSSxDQUFDLElBQUwsQ0FBVSxJQUFJLENBQUMsUUFBTCxDQUFjLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBTCxLQUFjLEtBQWYsQ0FBQSxJQUEwQixDQUFDLElBQUEsR0FBTyxNQUFSLENBQTFCLElBQTZDLEVBQTlDLENBQUEsR0FBb0QsSUFBSSxDQUFDLEtBQXZFLENBQVYsRUFESjs7SUFHQSxJQUFHLENBQUksSUFBSSxDQUFDLE1BQVo7UUFDSSxJQUFJLENBQUMsSUFBTCxDQUFVLElBQUksQ0FBQyxRQUFMLENBQWMsSUFBQSxHQUFLLElBQUksQ0FBQyxHQUFWLEdBQWMsR0FBNUIsQ0FBVixFQURKOztJQUdBLElBQUcsSUFBSSxDQUFDLFFBQUwsSUFBa0IsQ0FBQyxJQUFJLENBQUMsTUFBTCxLQUFlLEtBQWYsSUFBd0IsSUFBSSxDQUFDLElBQUwsS0FBYSxLQUF0QyxDQUFyQjtRQUNJLElBQW9DLENBQUksSUFBSSxDQUFDLE1BQTdDO1lBQUEsSUFBSSxDQUFDLElBQUwsQ0FBVSxJQUFJLENBQUMsUUFBTCxDQUFjLFFBQWQsQ0FBVixFQUFBOztRQUNBLElBQUcsSUFBSSxDQUFDLE9BQVI7WUFDSSxJQUFBLEdBQU8sSUFBSSxDQUFDLE1BQUwsQ0FBWSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQWQsQ0FBQSxDQUFzQixDQUFDLGtCQUF2QixDQUEwQyxPQUExQyxDQUFaLEVBRFg7U0FBQSxNQUFBO1lBR0ksSUFBQSxHQUFPLElBQUksQ0FBQyxNQUFMLENBQVksSUFBSSxDQUFDLFFBQVEsQ0FBQyxrQkFBZCxDQUFpQyxPQUFqQyxDQUFaLEVBSFg7U0FGSjs7QUFPQSxXQUFPO0FBMUVLOztBQTJGaEIsU0FBQSxHQUFZLFNBQUMsR0FBRDtBQUVSLFFBQUE7SUFGUywwQ0FBRyxNQUFHLDBDQUFHLE1BQUcsMENBQUcsTUFBRyw0Q0FBSTtJQUUvQixPQUFPLENBQUMsT0FBUixHQUFrQixJQUFJLENBQUMsT0FBTyxDQUFDO0lBQy9CLE1BQUEsaUZBQXVDO0lBQ3ZDLEdBQUEsR0FBTTtJQUNOLElBQUcsTUFBSDtRQUNJLE9BQW1CLElBQUksQ0FBQyxRQUFMLENBQWMsTUFBZCxDQUFxQixDQUFDLEtBQXRCLENBQTRCLEdBQTVCLENBQW5CLEVBQUMsZ0JBQUQsRUFBUztRQUNULE1BQUEsR0FBVSxNQUFBLENBQU8sQ0FBQyxZQUFBLENBQWEsTUFBYixDQUFELEVBQXVCLEdBQUEsQ0FBSSxHQUFHLENBQUMsSUFBSixDQUFBLENBQUEsQ0FBSixDQUF2QixDQUF1QyxDQUFDLElBQXhDLENBQTZDLEdBQUEsQ0FBSSxHQUFKLENBQTdDLENBQVAsRUFGZDs7SUFHQSxNQUFBLEdBQVUsZUFBQSxHQUFnQixNQUFoQixHQUF3QixDQUFDLEdBQUEsQ0FBSSxJQUFBLENBQUssR0FBTCxDQUFKLENBQUQsQ0FBeEIsR0FBdUMsQ0FBQyxVQUFBLENBQVcsRUFBQSxHQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsVUFBNUIsR0FBdUMsQ0FBeEMsQ0FBYixDQUFELENBQXZDLEdBQWlHO0lBQzNHLElBQStDLElBQUssQ0FBQSxDQUFBLENBQXBEO1FBQUEsTUFBQSxJQUFVLEtBQUEsR0FBSyxDQUFDLElBQUEsQ0FBSyxXQUFBLENBQVksSUFBSyxDQUFBLENBQUEsQ0FBakIsQ0FBTCxDQUFELENBQUwsR0FBK0IsSUFBekM7O0lBQ0EsSUFBSSxLQUFKO1FBQ0ksTUFBQSxJQUFVLEtBRGQ7S0FBQSxNQUFBO1FBR0ksTUFBQSxJQUFVLEtBSGQ7O1dBSUE7QUFkUTs7QUFzQlosVUFBQSxHQUFhLFNBQUMsT0FBRDtBQUVULFFBQUE7O1FBQUE7O1FBQUEsVUFBVzs7SUFFVCxTQUFXLE9BQUEsQ0FBUSxXQUFSO0lBRWIsV0FBQSxHQUFjO0lBQ2QsSUFBSSxDQUFDLEdBQUwsQ0FBUyxTQUFDLENBQUQ7UUFBTyxXQUFZLENBQUEsQ0FBQyxDQUFDLEdBQUYsQ0FBWixHQUFxQixDQUFDLENBQUM7UUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQVAsR0FBYSxDQUFDLENBQUM7ZUFBSyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQVAsR0FBYyxDQUFDLENBQUM7SUFBeEUsQ0FBVDtJQUVBLElBQUEsR0FBVSxNQUFBLENBQU8sV0FBUCx5Q0FBbUMsRUFBbkM7SUFDVixPQUFBLEdBQVUsTUFBQSxDQUFPO1FBQUUsSUFBQSxFQUFNLElBQVI7S0FBUCxFQUF1QixPQUF2QjtXQUNWO0FBWFM7O0FBYWIsUUFBQSxHQUFXLFNBQUE7QUFFUCxRQUFBO0lBQUUsTUFBUSxPQUFBLENBQVEsV0FBUjtJQUNSLE9BQVMsT0FBQSxDQUFRLFdBQVI7SUFBbUIsT0FBQSxDQUM5QixHQUQ4QixDQUN4QixDQUFDLElBQUEsQ0FBSyxRQUFMLENBQUQsQ0FBQSxHQUFlLE1BQWYsR0FBb0IsQ0FBRSxJQUFJLENBQUMsR0FBTCxDQUFTLFNBQUMsQ0FBRDtBQUFPLFlBQUE7ZUFBQSxNQUFBLEdBQU0sQ0FBQyxHQUFBLENBQUksQ0FBQyxDQUFDLEdBQU4sQ0FBRCxDQUFOLEdBQWtCLENBQUMsSUFBQSxrQ0FBYyxHQUFBLEdBQUksQ0FBQyxDQUFDLEdBQU4sR0FBVSxNQUF4QixDQUFEO0lBQXpCLENBQVQsQ0FBbUUsQ0FBQyxJQUFwRSxDQUF5RSxJQUF6RSxDQUFGLENBREk7V0FDK0UsT0FBQSxDQUM3RyxHQUQ2RyxDQUN6Ryw4QkFBQSxHQUE4QixDQUFDLElBQUEsQ0FBSywyQ0FBTCxDQUFELENBQTlCLEdBQWdGLElBRHlCO0FBSnRHOztBQU9YLE1BQU0sQ0FBQyxPQUFQLEdBQWlCO0lBQUUsTUFBQSxJQUFGO0lBQVEsWUFBQSxVQUFSO0lBQW9CLFVBQUEsUUFBcEI7SUFBOEIsZUFBQSxhQUE5QiIsInNvdXJjZXNDb250ZW50IjpbIiMjI1xuMDAgICAgIDAwICAwMDAwMDAwMCAgMDAwMDAwMDAwICAgMDAwMDAwMCAgIFxuMDAwICAgMDAwICAwMDAgICAgICAgICAgMDAwICAgICAwMDAgICAwMDAgIFxuMDAwMDAwMDAwICAwMDAwMDAwICAgICAgMDAwICAgICAwMDAwMDAwMDAgIFxuMDAwIDAgMDAwICAwMDAgICAgICAgICAgMDAwICAgICAwMDAgICAwMDAgIFxuMDAwICAgMDAwICAwMDAwMDAwMCAgICAgMDAwICAgICAwMDAgICAwMDAgIFxuIyMjXG5cbnBhdGggPSByZXF1aXJlICdwYXRoJ1xuXG57IHJlZCwgZ3JlZW4sIGJsdWUsIGJsdWVCcmlnaHQsIHllbGxvdywgeWVsbG93QnJpZ2h0LCB3aGl0ZSwgd2hpdGVCcmlnaHQsIGdyYXksIGJvbGQsIGRpbSwgb3B0aW9ucyB9ID0gcmVxdWlyZSAnY29sb3JldHRlJ1xuXG5NRVRBID0gW1xuICAgIFxuICAgICMgMDAwMDAwMDAgICAwMDAwMDAwMCAgICAwMDAwMDAwICAgMDAwMDAwMDAgIDAwMCAgMDAwICAgICAgMDAwMDAwMDAgIFxuICAgICMgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgMDAwICAgICAgMDAwICAgICAgIFxuICAgICMgMDAwMDAwMDAgICAwMDAwMDAwICAgIDAwMCAgIDAwMCAgMDAwMDAwICAgIDAwMCAgMDAwICAgICAgMDAwMDAwMCAgIFxuICAgICMgMDAwICAgICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgMDAwICAgICAgMDAwICAgICAgIFxuICAgICMgMDAwICAgICAgICAwMDAgICAwMDAgICAwMDAwMDAwICAgMDAwICAgICAgIDAwMCAgMDAwMDAwMCAgMDAwMDAwMDAgIFxuICAgIGtleTogICdwcm9maWxlJyAgIFxuICAgIGRlc2M6ICdAcHJvZmlsZSBbaWRdIC4uLidcbiAgICBtZXRhOiAoYXJnczosbm9kZTopIC0+IFxuICAgICAgICBcbiAgICAgICAgaWQgPSBcIiN7bm9kZS5jb25kaXRpb24ubG9jYXRpb25EYXRhLmZpcnN0X2xpbmUrMX1fI3tub2RlLmNvbmRpdGlvbi5sb2NhdGlvbkRhdGEuZmlyc3RfY29sdW1ufVwiXG4gICAgICAgIG5hbWUgPSBhcmdzWzBdID8gaWRcbiAgICAgICAgYWZ0ZXI6ICBcImNvbnNvbGUubG9nKCcje25hbWV9JywgcmVxdWlyZSgncHJldHR5LXRpbWUnKShwcm9jZXNzLmhydGltZShrb2ZmZWVfI3tpZH0pKSk7XCJcbiAgICAgICAgY29kZTogICBcImtvZmZlZV8je2lkfSA9IHByb2Nlc3MuaHJ0aW1lKClcIlxuICAgICAgICByZWR1Y2U6IGZhbHNlXG4gICAgICAgIGJvZHk6ICAgdHJ1ZVxuLFxuICAgICMgIDAwMDAwMDAgIDAwMDAwMDAwMCAgIDAwMDAwMDAgICAwMDAwMDAwMCAgIDAwMDAwMDAwMCAgXG4gICAgIyAwMDAgICAgICAgICAgMDAwICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgICAgMDAwICAgICBcbiAgICAjIDAwMDAwMDAgICAgICAwMDAgICAgIDAwMDAwMDAwMCAgMDAwMDAwMCAgICAgICAwMDAgICAgIFxuICAgICMgICAgICAwMDAgICAgIDAwMCAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgICAgIDAwMCAgICAgXG4gICAgIyAwMDAwMDAwICAgICAgMDAwICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgICAgMDAwICAgICBcbiAgICBrZXk6ICAnc3RhcnQnICAgXG4gICAgZGVzYzogJ0BzdGFydCBpZCAuLi4nXG4gICAgaW5mbzpcbiAgICAgICAgdGhlbjogdHJ1ZVxuICAgICAgICBhcmdzOiAxXG4gICAgbWV0YTogKGFyZ3M6KSAtPiBcbiAgICAgICAgaWQgPSBhcmdzWzBdID8gJ3N0YXJ0X2VuZCdcbiAgICAgICAgYmVmb3JlOiBcImtvZmZlZV8je2lkfSA9IHByb2Nlc3MuaHJ0aW1lKClcIlxuICAgICAgICByZWR1Y2U6IHRydWVcbiAgICAgICAgYm9keTogICBmYWxzZVxuLFxuICAgIGtleTogICdlbmQnICAgICBcbiAgICBkZXNjOiAnQGVuZCBpZCAuLi4nXG4gICAgaW5mbzpcbiAgICAgICAgdGhlbjogdHJ1ZVxuICAgICAgICBhcmdzOiAxXG4gICAgbWV0YTogKGFyZ3M6KSAtPiBcbiAgICAgICAgaWQgPSBhcmdzWzBdID8gJ3N0YXJ0X2VuZCdcbiAgICAgICAgYmVmb3JlOiBcImNvbnNvbGUubG9nKCcje2lkfScsIHJlcXVpcmUoJ3ByZXR0eS10aW1lJykocHJvY2Vzcy5ocnRpbWUoa29mZmVlXyN7aWR9KSkpXCJcbiAgICAgICAgcmVkdWNlOiB0cnVlXG4gICAgICAgIGJvZHk6ICAgZmFsc2VcbiwgICAgICAgIFxuICAgICMgMDAwMDAwMCAgICAwMDAwMDAwICAgICAwMDAwMDAwICAgXG4gICAgIyAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICAgICBcbiAgICAjIDAwMCAgIDAwMCAgMDAwMDAwMCAgICAwMDAgIDAwMDAgIFxuICAgICMgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgXG4gICAgIyAwMDAwMDAwICAgIDAwMDAwMDAgICAgIDAwMDAwMDAgICBcbiAgICBrZXk6ICdkYmcnICAgIFxuICAgIGRlc2M6ICdAZGJnIG1zZyAuLi4nXG4gICAgaW5mbzpcbiAgICAgICAgdGhlbjogdHJ1ZVxuICAgICAgICBhcmdzOiAxXG4gICAgbWV0YTogKG9wdHM6LGFyZ3M6LG5vZGU6KSAtPlxuICAgICAgICBjb2RlOiAgIFwidHJ1ZVwiXG4gICAgICAgIGV2YWw6ICAgdHJ1ZVxuICAgICAgICBiZWZvcmU6IGxvZ1NvdXJjZSBvcHRzOm9wdHMsIGFyZ3M6YXJncywgbm9kZTpub2RlXG4gICAgICAgIGFmdGVyOiAgXCIpXCJcbiAgICAgICAgcmVkdWNlOiB0cnVlXG4gICAgICAgIGJsb2NrOiAgZmFsc2VcbiwgICAgXG4gICAgIyAwMDAwMDAwMDAgIDAwMDAwMDAwICAgMDAwMDAwMCAgMDAwMDAwMDAwICBcbiAgICAjICAgIDAwMCAgICAgMDAwICAgICAgIDAwMCAgICAgICAgICAwMDAgICAgIFxuICAgICMgICAgMDAwICAgICAwMDAwMDAwICAgMDAwMDAwMCAgICAgIDAwMCAgICAgXG4gICAgIyAgICAwMDAgICAgIDAwMCAgICAgICAgICAgIDAwMCAgICAgMDAwICAgICBcbiAgICAjICAgIDAwMCAgICAgMDAwMDAwMDAgIDAwMDAwMDAgICAgICAwMDAgICAgIFxuICAgIGtleTogJ3Rlc3QnXG4gICAgZGVzYzogJ0B0ZXN0IGlkIC4uLidcbiAgICBtZXRhOiAob3B0czosYXJnczosbm9kZTopIC0+XG4gICAgICAgIGJlZm9yZTogb3B0cy50ZXN0IGFuZCBsb2dTb3VyY2Ugb3B0czpvcHRzLCBhcmdzOmFyZ3MsIG5vZGU6bm9kZSwgY2xvc2U6dHJ1ZVxuICAgICAgICBza2lwOiAgIG5vdCBvcHRzLnRlc3RcbiAgICAgICAgcmVkdWNlOiB0cnVlXG4gICAgICAgIGJvZHk6ICAgdHJ1ZVxuLCAgICAgICAgXG4gICAgIyAwMDAwMDAwMCAgICAwMDAwMDAwICAgMDAwICAgMDAwICAwMDAwMDAwICAgIFxuICAgICMgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMDAgIDAwMCAgMDAwICAgMDAwICBcbiAgICAjIDAwMDAwMDAgICAgMDAwMDAwMDAwICAwMDAgMCAwMDAgIDAwMCAgIDAwMCAgXG4gICAgIyAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAwMDAwICAwMDAgICAwMDAgIFxuICAgICMgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgICBcbiAgICBrZXk6ICdyYW5kJyAgICBcbiAgICBtZXRhOiAoYXJnczopIC0+IFxuICAgICAgICBjb2RlOlwiTWF0aC5yYW5kb20oKSA8ICN7YXJncz9bMF0gPyAwLjV9XCIgXG4gICAgICAgIHJlZHVjZTpmYWxzZSBcbiAgICAgICAgYm9keTp0cnVlICAgXG4gICAgXG4gICAgIyBrZXk6ICd0b2tlbicgJ3BhcnNlJyAnY29kZScgJ3Rlc3QnICdhc3NlcnQnXG5dXG5cbiMgIDAwMDAwMDAgICAwMDAwMDAwICAgMDAgICAgIDAwICAwMDAwMDAwMCAgIDAwMCAgMDAwICAgICAgMDAwMDAwMDAgIFxuIyAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAwMDAgICAgICAwMDAgICAgICAgXG4jIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMDAwMDAwMCAgMDAwMDAwMDAgICAwMDAgIDAwMCAgICAgIDAwMDAwMDAgICBcbiMgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwIDAgMDAwICAwMDAgICAgICAgIDAwMCAgMDAwICAgICAgMDAwICAgICAgIFxuIyAgMDAwMDAwMCAgIDAwMDAwMDAgICAwMDAgICAwMDAgIDAwMCAgICAgICAgMDAwICAwMDAwMDAwICAwMDAwMDAwMCAgXG5cblRBQiA9ICcgICAgJ1xuXG5jb21waWxlTWV0YUlmID0gKG5vZGU6LG9wdHM6KSAtPlxuXG4gICAgeyBCbG9jaywgQXNzaWduLCBWYWx1ZSwgTGl0ZXJhbCB9ID0gcmVxdWlyZSAnLi9ub2RlcydcbiAgICB7IG1lcmdlIH0gPSByZXF1aXJlICcuL2hlbHBlcnMnXG4gICAgXG4gICAgaW5mbyA9IHJlZHVjZTp0cnVlLCBldmFsOnRydWVcbiAgICBcbiAgICBpZiBub2RlLmNvbmRpdGlvbi5iYXNlPy52YWx1ZSA9PSAndGhpcydcbiAgICAgICAgXG4gICAgICAgIG1ldGFLZXkgPSBub2RlLmNvbmRpdGlvbi5wcm9wZXJ0aWVzP1swXT8ubmFtZT8udmFsdWVcbiAgICAgICAgaWYgdHlwZW9mIG9wdHMubWV0YVttZXRhS2V5XSA9PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICBpbmZvID0gb3B0cy5tZXRhW21ldGFLZXldIG9wdHM6b3B0cywgbm9kZTpub2RlLCBhcmdzOltdXG4gICAgICAgICAgICBcbiAgICBlbHNlIGlmIG5vZGUuY29uZGl0aW9uLnZhcmlhYmxlPy5iYXNlPy52YWx1ZSA9PSAndGhpcydcbiAgICAgICAgXG4gICAgICAgIG1ldGFLZXkgPSBub2RlLmNvbmRpdGlvbi52YXJpYWJsZS5wcm9wZXJ0aWVzP1swXT8ubmFtZT8udmFsdWVcbiAgICAgICAgaWYgdHlwZW9mIG9wdHMubWV0YVttZXRhS2V5XSA9PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICBhcmdzID0gbm9kZS5jb25kaXRpb24uYXJncy5tYXAgKGEpIC0+IFxuICAgICAgICAgICAgICAgIGEuYmFzZT8udmFsdWVcbiAgICAgICAgICAgIGFyZ3MgPSBhcmdzLm1hcCAoYSkgLT4gaWYgYVswXSBpbiBbJ1wiJywgXCInXCJdIHRoZW4gYVsxLi4tMl0gZWxzZSBhXG4gICAgICAgICAgICBpbmZvID0gb3B0cy5tZXRhW21ldGFLZXldIG9wdHM6b3B0cywgbm9kZTpub2RlLCBhcmdzOmFyZ3NcbiAgICAgICAgXG4gICAgaWYgaW5mby5za2lwIHRoZW4gcmV0dXJuIFtdXG4gICAgXG4gICAgaWYgaW5mby5ldmFsXG4gICAgICAgIFxuICAgICAgICBjb25kID0gaW5mby5jb2RlID8gbm9kZS5mcmFnbWVudHNUb1RleHQgbm9kZS5jb25kaXRpb24uY29tcGlsZVRvRnJhZ21lbnRzIG9wdHMsIDIgI0xFVkVMX1BBUkVOXG4gICAgICAgIHRyeVxuICAgICAgICAgICAgb3MgPSByZXF1aXJlICdvcydcbiAgICAgICAgICAgIGZzID0gcmVxdWlyZSAnZnMnXG4gICAgICAgICAgICBpbmZvLmJvZHkgPSEhIGV2YWwgY29uZFxuICAgICAgICAgICAgaWYgaW5mby5ldmFsIGFuZCBpbmZvLnJlZHVjZSBhbmQgbm90IGluZm8uYm9keSBhbmQgbm90IG5vZGUuZWxzZUJvZHlcbiAgICAgICAgICAgICAgICByZXR1cm4gW11cbiAgICAgICAgY2F0Y2ggZXJyXG4gICAgICAgICAgICBlcnJvciBlcnJcbiAgICAgICAgXG4gICAgZnJhZyA9IFtdXG4gICAgXG4gICAgaWYgaW5mby5yZWR1Y2UgPT0gZmFsc2VcbiAgICAgICAgZnJhZyA9IGZyYWcuY29uY2F0IG5vZGUubWFrZUNvZGUoXCJpZiAoXCIpLCBub2RlLm1ha2VDb2RlKGluZm8uY29kZSksIG5vZGUubWFrZUNvZGUoXCIpIHtcXG5cIilcbiAgICAgICAgXG4gICAgICAgIGluZGVudCA9IG9wdHMuaW5kZW50ICsgVEFCXG4gICAgICAgIGJvZHlPcHQgPSBtZXJnZSBvcHRzLCB7aW5kZW50fVxuICAgIGVsc2VcbiAgICAgICAgaW5kZW50ID0gb3B0cy5pbmRlbnRcbiAgICAgICAgYm9keU9wdCA9IG9wdHNcblxuICAgIGlmIGluZm8uYmVmb3JlXG4gICAgICAgIGZyYWcucHVzaCBub2RlLm1ha2VDb2RlIChpbmZvLmJsb2NrICE9IGZhbHNlIGFuZCBpbmRlbnQgb3IgJycpICsgaW5mby5iZWZvcmVcbiAgICAgICAgXG4gICAgaWYgaW5mby5ib2R5XG4gICAgICAgIGlmIGluZm8uYmxvY2sgIT0gZmFsc2VcbiAgICAgICAgICAgIGJvZHkgPSBub2RlLmVuc3VyZUJsb2NrIG5vZGUuYm9keVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICBpZiBub2RlLmJvZHkgaW5zdGFuY2VvZiBCbG9ja1xuICAgICAgICAgICAgICAgIGJvZHkgPSBub2RlLmJvZHkuZXhwcmVzc2lvbnNbMF1cbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBib2R5ID0gbm9kZS5ib2R5XG4gICAgICAgIGlmIGJvZHlcbiAgICAgICAgICAgIGZyYWcgPSBmcmFnLmNvbmNhdCBib2R5LmNvbXBpbGVUb0ZyYWdtZW50cyBib2R5T3B0XG4gICAgICAgIFxuICAgIGlmIGluZm8uYWZ0ZXJcbiAgICAgICAgZnJhZy5wdXNoIG5vZGUubWFrZUNvZGUgKChpbmZvLmJsb2NrICE9IGZhbHNlKSBhbmQgKCdcXG4nICsgaW5kZW50KSBvciAnJykgKyBpbmZvLmFmdGVyXG5cbiAgICBpZiBub3QgaW5mby5yZWR1Y2VcbiAgICAgICAgZnJhZy5wdXNoIG5vZGUubWFrZUNvZGUoXCJcXG4je25vZGUudGFifX1cIilcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgaWYgbm9kZS5lbHNlQm9keSBhbmQgKGluZm8ucmVkdWNlID09IGZhbHNlIG9yIGluZm8uYm9keSA9PSBmYWxzZSlcbiAgICAgICAgZnJhZy5wdXNoIG5vZGUubWFrZUNvZGUgJyBlbHNlICcgaWYgbm90IGluZm8ucmVkdWNlXG4gICAgICAgIGlmIG5vZGUuaXNDaGFpblxuICAgICAgICAgICAgZnJhZyA9IGZyYWcuY29uY2F0IG5vZGUuZWxzZUJvZHkudW53cmFwKCkuY29tcGlsZVRvRnJhZ21lbnRzIGJvZHlPcHRcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgZnJhZyA9IGZyYWcuY29uY2F0IG5vZGUuZWxzZUJvZHkuY29tcGlsZVRvRnJhZ21lbnRzIGJvZHlPcHRcbiAgICAgICAgXG4gICAgcmV0dXJuIGZyYWdcbiAgICBcbiMgdXRpbGl0eSA9IChuYW1lLCBvKSAtPlxuICAgICMge3Jvb3R9ID0gby5zY29wZVxuICAgICMgaWYgbmFtZSBvZiByb290LnV0aWxpdGllc1xuICAgICAgICAjIHJvb3QudXRpbGl0aWVzW25hbWVdXG4gICAgIyBlbHNlXG4gICAgICAgICMgcmVmID0gcm9vdC5mcmVlVmFyaWFibGUgbmFtZVxuICAgICAgICAjIHJvb3QuYXNzaWduIHJlZiwgVVRJTElUSUVTW25hbWVdIG8gIyA8LSBhZGRzIHV0aWxpdHkgdG8gdG9wIGxldmVsIHNjb3BlXG4gICAgICAgICMgcm9vdC51dGlsaXRpZXNbbmFtZV0gPSByZWZcblxuIyAgMDAwMDAwMCAgIDAwMDAwMDAgICAwMDAgICAwMDAgIDAwMDAwMDAwICAgIDAwMDAwMDAgIDAwMDAwMDAwICBcbiMgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgICAgICAgXG4jIDAwMDAwMDAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgICAwMDAgICAgICAgMDAwMDAwMCAgIFxuIyAgICAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgICAgICBcbiMgMDAwMDAwMCAgICAwMDAwMDAwICAgIDAwMDAwMDAgICAwMDAgICAwMDAgICAwMDAwMDAwICAwMDAwMDAwMCAgXG5cbmxvZ1NvdXJjZSA9IChvcHRzOixhcmdzOixub2RlOixjbG9zZTopIC0+XG4gICAgXG4gICAgb3B0aW9ucy5lbmFibGVkID0gb3B0cy5mZWF0dXJlLmNvbG9yXG4gICAgc291cmNlID0gb3B0cy5zb3VyY2UgPyBvcHRzLmZpbGVuYW1lID8gJydcbiAgICBleHQgPSAnJ1xuICAgIGlmIHNvdXJjZVxuICAgICAgICBbc291cmNlLCBleHQuLi5dID0gcGF0aC5iYXNlbmFtZShzb3VyY2UpLnNwbGl0ICcuJ1xuICAgICAgICBzb3VyY2UgID0geWVsbG93IFt5ZWxsb3dCcmlnaHQoc291cmNlKSwgZGltIGV4dC5qb2luJy4nXS5qb2luIGRpbSAnLidcbiAgICBiZWZvcmUgID0gXCJjb25zb2xlLmxvZygnI3tzb3VyY2V9I3tkaW0gYmx1ZSAnOid9I3tibHVlQnJpZ2h0IFwiI3tub2RlLmNvbmRpdGlvbi5sb2NhdGlvbkRhdGEuZmlyc3RfbGluZSsxfVwifSdcIlxuICAgIGJlZm9yZSArPSBcIiwgJyN7Ym9sZCB3aGl0ZUJyaWdodCBhcmdzWzBdfSdcIiBpZiBhcmdzWzBdIFxuICAgIGlmIChjbG9zZSlcbiAgICAgICAgYmVmb3JlICs9ICcpOydcbiAgICBlbHNlXG4gICAgICAgIGJlZm9yZSArPSBcIiwgXCJcbiAgICBiZWZvcmVcbiAgICAgICAgXG4jIDAwMCAgMDAwICAgMDAwICAgICAgICAwMDAgIDAwMDAwMDAwICAgMDAwMDAwMCAgMDAwMDAwMDAwICBcbiMgMDAwICAwMDAwICAwMDAgICAgICAgIDAwMCAgMDAwICAgICAgIDAwMCAgICAgICAgICAwMDAgICAgIFxuIyAwMDAgIDAwMCAwIDAwMCAgICAgICAgMDAwICAwMDAwMDAwICAgMDAwICAgICAgICAgIDAwMCAgICAgXG4jIDAwMCAgMDAwICAwMDAwICAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgICAgICAgICAgMDAwICAgICBcbiMgMDAwICAwMDAgICAwMDAgICAwMDAwMDAwICAgMDAwMDAwMDAgICAwMDAwMDAwICAgICAwMDAgICAgIFxuXG5pbmplY3RNZXRhID0gKG9wdGlvbnMpIC0+ICMgbWFrZSBzdXJlIHRoYXQgb3B0aW9ucyBoYXMgYSBtZXRhIHNldFxuICAgIFxuICAgIG9wdGlvbnMgPz0ge31cbiAgICBcbiAgICB7IGV4dGVuZCB9ID0gcmVxdWlyZSAnLi9oZWxwZXJzJ1xuICAgIFxuICAgIGRlZmF1bHRNZXRhID0ge31cbiAgICBNRVRBLm1hcCAobSkgLT4gZGVmYXVsdE1ldGFbbS5rZXldID0gbS5tZXRhOyBtLm1ldGEua2V5ID0gbS5rZXk7IG0ubWV0YS5pbmZvID0gbS5pbmZvXG4gICAgXG4gICAgbWV0YSAgICA9IGV4dGVuZCBkZWZhdWx0TWV0YSwgb3B0aW9ucy5tZXRhID8ge31cbiAgICBvcHRpb25zID0gZXh0ZW5kIHsgbWV0YTogbWV0YSB9LCBvcHRpb25zXG4gICAgb3B0aW9uc1xuXG5sb2dNZXRhcyA9IC0+XG4gICAgXG4gICAgeyBwYWQgfSA9IHJlcXVpcmUgJy4vaGVscGVycydcbiAgICB7IGdyYXkgfSA9IHJlcXVpcmUgJ2NvbG9yZXR0ZSdcbiAgICBsb2cgXCIje2dyYXkgJ01ldGFzOid9XFxuXFxuI3sgTUVUQS5tYXAoKGYpIC0+IFwiICAgICN7cGFkIGYua2V5fSN7Z3JheSBmLmRlc2MgPyBcIkAje2Yua2V5fSAuLi5cIn1cIikuam9pbignXFxuJykgfVwiXG4gICAgbG9nIFwiICAgIGlmIGVsc2UgICAgICAgICAgICAgICAgICN7Z3JheSAnQGlmIGNvbmQgLi4uIFtbQGVsaWYgY29uZCAuLi5dIEBlbHNlIC4uLl0nfVxcblwiXG4gICAgXG5tb2R1bGUuZXhwb3J0cyA9IHsgTUVUQSwgaW5qZWN0TWV0YSwgbG9nTWV0YXMsIGNvbXBpbGVNZXRhSWYgfVxuIl19
//# sourceURL=../coffee/meta.coffee