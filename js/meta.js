// generated by koffee 0.18.0

/*
00     00  00000000  000000000   0000000   
000   000  000          000     000   000  
000000000  0000000      000     000000000  
000 0 000  000          000     000   000  
000   000  00000000     000     000   000
 */

(function() {
    var META, assertMeta, codeMeta, debugMeta, injectMeta, logMetas, parseMeta, profileMeta, randMeta, testMeta, tokenMeta;

    randMeta = function(o) {
        var ref, ref1;
        return {
            code: "Math.random() < " + ((ref = (ref1 = o.args) != null ? ref1[0] : void 0) != null ? ref : 0.5),
            reduce: false
        };
    };

    codeMeta = function(o) {};

    testMeta = function(o) {
        return {
            reduce: true
        };
    };

    tokenMeta = function(o) {
        return {
            reduce: true
        };
    };

    parseMeta = function(o) {
        return {
            reduce: true
        };
    };

    debugMeta = function(o) {
        return {
            reduce: true
        };
    };

    assertMeta = function(o) {
        return {
            reduce: true
        };
    };

    profileMeta = function(o) {
        var id, name;
        id = (o.node.condition.locationData.first_line + 1) + "_" + o.node.condition.locationData.first_column;
        if (o.args[0]) {
            name = o.args[0];
        } else {
            name = id;
        }
        return {
            after: "console.log('" + name + "', require('pretty-time')(process.hrtime(koffee_" + id + ")));",
            code: "koffee_" + id + " = process.hrtime()",
            reduce: false
        };
    };

    META = [
        {
            key: 'token',
            desc: 'tokenized expression',
            meta: tokenMeta
        }, {
            key: 'parse',
            desc: 'parsed    expression',
            meta: parseMeta
        }, {
            key: 'code',
            desc: 'compiled  expression',
            meta: codeMeta
        }, {
            key: 'test',
            desc: 'test',
            meta: testMeta
        }, {
            key: 'assert',
            desc: 'assert',
            meta: assertMeta
        }, {
            key: 'profile',
            desc: 'profile',
            meta: profileMeta
        }, {
            key: 'dbg',
            desc: 'debug',
            meta: debugMeta
        }, {
            key: 'rand',
            desc: 'rand',
            meta: randMeta
        }
    ];

    injectMeta = function(options) {
        var defaultMeta, extend, meta, ref;
        if (options != null) {
            options;
        } else {
            options = {};
        }
        extend = require('./helpers').extend;
        defaultMeta = {};
        META.map(function(m) {
            return defaultMeta[m.key] = m.meta;
        });
        meta = extend(defaultMeta, (ref = options.meta) != null ? ref : {});
        options = extend({
            meta: meta
        }, options);
        return options;
    };

    logMetas = function() {
        var pad;
        pad = require('./helpers').pad;
        return console.log("\nMetas:\n\n" + (META.map(function(f) {
            return "    " + (pad(f.key)) + f.desc;
        }).join('\n')) + "\n");
    };

    module.exports = {
        META: META,
        injectMeta: injectMeta,
        logMetas: logMetas
    };

}).call(this);
