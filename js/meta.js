// generated by koffee 0.17.0

/*
00     00  00000000  000000000   0000000   
000   000  000          000     000   000  
000000000  0000000      000     000000000  
000 0 000  000          000     000   000  
000   000  00000000     000     000   000
 */
var META, assertMeta, codeMeta, debugMeta, injectMeta, logMetas, parseMeta, profileMeta, randMeta, testMeta, tokenMeta;

randMeta = function(o) {
    var ref, ref1;
    return {
        code: "Math.random() < " + ((ref = (ref1 = o.args) != null ? ref1[0] : void 0) != null ? ref : 0.5),
        reduce: false
    };
};

codeMeta = function() {};

testMeta = function() {};

tokenMeta = function() {};

parseMeta = function() {};

debugMeta = function() {};

assertMeta = function() {};

profileMeta = function() {};

META = [
    {
        key: 'token',
        desc: 'tokenized expression',
        meta: tokenMeta
    }, {
        key: 'parse',
        desc: 'parsed    expression',
        meta: parseMeta
    }, {
        key: 'code',
        desc: 'compiled  expression',
        meta: codeMeta
    }, {
        key: 'test',
        desc: 'test',
        meta: testMeta
    }, {
        key: 'assert',
        desc: 'assert',
        meta: assertMeta
    }, {
        key: 'profile',
        desc: 'profile',
        meta: profileMeta
    }, {
        key: 'dbg',
        desc: 'debug',
        meta: debugMeta
    }, {
        key: 'rand',
        desc: 'rand',
        meta: randMeta
    }
];

injectMeta = function(options) {
    var defaultMeta, extend, meta, ref;
    if (options != null) {
        options;
    } else {
        options = {};
    }
    extend = require('./helpers').extend;
    defaultMeta = {};
    META.map(function(m) {
        return defaultMeta[m.key] = m.meta;
    });
    meta = extend(defaultMeta, (ref = options.meta) != null ? ref : {});
    options = extend({
        meta: meta
    }, options);
    return options;
};

logMetas = function() {
    var pad;
    pad = require('./helpers').pad;
    return console.log("\nMetas:\n\n" + (META.map(function(f) {
        return "    " + (pad(f.key)) + f.desc;
    }).join('\n')) + "\n");
};

module.exports = {
    META: META,
    injectMeta: injectMeta,
    logMetas: logMetas
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWV0YS5qcyIsInNvdXJjZVJvb3QiOiIuIiwic291cmNlcyI6WyIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7Ozs7OztBQUFBLElBQUE7O0FBUUEsUUFBQSxHQUFjLFNBQUMsQ0FBRDtBQUFPLFFBQUE7V0FBQTtRQUFBLElBQUEsRUFBSyxrQkFBQSxHQUFrQixvRUFBYyxHQUFkLENBQXZCO1FBQTJDLE1BQUEsRUFBTyxLQUFsRDs7QUFBUDs7QUFDZCxRQUFBLEdBQWUsU0FBQSxHQUFBOztBQUNmLFFBQUEsR0FBZSxTQUFBLEdBQUE7O0FBQ2YsU0FBQSxHQUFlLFNBQUEsR0FBQTs7QUFDZixTQUFBLEdBQWUsU0FBQSxHQUFBOztBQUNmLFNBQUEsR0FBZSxTQUFBLEdBQUE7O0FBQ2YsVUFBQSxHQUFlLFNBQUEsR0FBQTs7QUFDZixXQUFBLEdBQWUsU0FBQSxHQUFBOztBQUVmLElBQUEsR0FBTztJQUNIO1FBQUUsR0FBQSxFQUFLLE9BQVA7UUFBaUIsSUFBQSxFQUFNLHNCQUF2QjtRQUE4QyxJQUFBLEVBQUssU0FBbkQ7S0FERyxFQUVIO1FBQUUsR0FBQSxFQUFLLE9BQVA7UUFBaUIsSUFBQSxFQUFNLHNCQUF2QjtRQUE4QyxJQUFBLEVBQUssU0FBbkQ7S0FGRyxFQUdIO1FBQUUsR0FBQSxFQUFLLE1BQVA7UUFBaUIsSUFBQSxFQUFNLHNCQUF2QjtRQUE4QyxJQUFBLEVBQUssUUFBbkQ7S0FIRyxFQUlIO1FBQUUsR0FBQSxFQUFLLE1BQVA7UUFBaUIsSUFBQSxFQUFNLE1BQXZCO1FBQThDLElBQUEsRUFBSyxRQUFuRDtLQUpHLEVBS0g7UUFBRSxHQUFBLEVBQUssUUFBUDtRQUFpQixJQUFBLEVBQU0sUUFBdkI7UUFBOEMsSUFBQSxFQUFLLFVBQW5EO0tBTEcsRUFNSDtRQUFFLEdBQUEsRUFBSyxTQUFQO1FBQWlCLElBQUEsRUFBTSxTQUF2QjtRQUE4QyxJQUFBLEVBQUssV0FBbkQ7S0FORyxFQU9IO1FBQUUsR0FBQSxFQUFLLEtBQVA7UUFBaUIsSUFBQSxFQUFNLE9BQXZCO1FBQThDLElBQUEsRUFBSyxTQUFuRDtLQVBHLEVBUUg7UUFBRSxHQUFBLEVBQUssTUFBUDtRQUFpQixJQUFBLEVBQU0sTUFBdkI7UUFBOEMsSUFBQSxFQUFLLFFBQW5EO0tBUkc7OztBQVdQLFVBQUEsR0FBYSxTQUFDLE9BQUQ7QUFFVCxRQUFBOztRQUFBOztRQUFBLFVBQVc7O0lBRVQsU0FBVyxPQUFBLENBQVEsV0FBUjtJQUViLFdBQUEsR0FBYztJQUNkLElBQUksQ0FBQyxHQUFMLENBQVMsU0FBQyxDQUFEO2VBQU8sV0FBWSxDQUFBLENBQUMsQ0FBQyxHQUFGLENBQVosR0FBcUIsQ0FBQyxDQUFDO0lBQTlCLENBQVQ7SUFFQSxJQUFBLEdBQVUsTUFBQSxDQUFPLFdBQVAsdUNBQW1DLEVBQW5DO0lBQ1YsT0FBQSxHQUFVLE1BQUEsQ0FBTztRQUFFLElBQUEsRUFBTSxJQUFSO0tBQVAsRUFBdUIsT0FBdkI7V0FDVjtBQVhTOztBQWFiLFFBQUEsR0FBVyxTQUFBO0FBRVAsUUFBQTtJQUFFLE1BQVEsT0FBQSxDQUFRLFdBQVI7V0FBbUIsT0FBQSxDQUM3QixHQUQ2QixDQUN6QixjQUFBLEdBQWMsQ0FBRSxJQUFJLENBQUMsR0FBTCxDQUFTLFNBQUMsQ0FBRDtlQUFPLE1BQUEsR0FBTSxDQUFDLEdBQUEsQ0FBSSxDQUFDLENBQUMsR0FBTixDQUFELENBQU4sR0FBbUIsQ0FBQyxDQUFDO0lBQTVCLENBQVQsQ0FBNEMsQ0FBQyxJQUE3QyxDQUFrRCxJQUFsRCxDQUFGLENBQWQsR0FBeUUsSUFEaEQ7QUFGdEI7O0FBS1gsTUFBTSxDQUFDLE9BQVAsR0FBaUI7SUFBRSxNQUFBLElBQUY7SUFBUSxZQUFBLFVBQVI7SUFBb0IsVUFBQSxRQUFwQiIsInNvdXJjZXNDb250ZW50IjpbIiMjI1xuMDAgICAgIDAwICAwMDAwMDAwMCAgMDAwMDAwMDAwICAgMDAwMDAwMCAgIFxuMDAwICAgMDAwICAwMDAgICAgICAgICAgMDAwICAgICAwMDAgICAwMDAgIFxuMDAwMDAwMDAwICAwMDAwMDAwICAgICAgMDAwICAgICAwMDAwMDAwMDAgIFxuMDAwIDAgMDAwICAwMDAgICAgICAgICAgMDAwICAgICAwMDAgICAwMDAgIFxuMDAwICAgMDAwICAwMDAwMDAwMCAgICAgMDAwICAgICAwMDAgICAwMDAgIFxuIyMjXG5cbnJhbmRNZXRhICAgID0gKG8pIC0+IGNvZGU6XCJNYXRoLnJhbmRvbSgpIDwgI3tvLmFyZ3M/WzBdID8gMC41fVwiIHJlZHVjZTpmYWxzZVxuY29kZU1ldGEgICAgID0gKCkgLT4gXG50ZXN0TWV0YSAgICAgPSAoKSAtPiBcbnRva2VuTWV0YSAgICA9ICgpIC0+IFxucGFyc2VNZXRhICAgID0gKCkgLT4gXG5kZWJ1Z01ldGEgICAgPSAoKSAtPiBcbmFzc2VydE1ldGEgICA9ICgpIC0+IFxucHJvZmlsZU1ldGEgID0gKCkgLT4gXG5cbk1FVEEgPSBbXG4gICAgeyBrZXk6ICd0b2tlbicgICBkZXNjOiAndG9rZW5pemVkIGV4cHJlc3Npb24nIG1ldGE6dG9rZW5NZXRhICAgfVxuICAgIHsga2V5OiAncGFyc2UnICAgZGVzYzogJ3BhcnNlZCAgICBleHByZXNzaW9uJyBtZXRhOnBhcnNlTWV0YSAgIH1cbiAgICB7IGtleTogJ2NvZGUnICAgIGRlc2M6ICdjb21waWxlZCAgZXhwcmVzc2lvbicgbWV0YTpjb2RlTWV0YSAgICB9XG4gICAgeyBrZXk6ICd0ZXN0JyAgICBkZXNjOiAndGVzdCcgICAgICAgICAgICAgICAgIG1ldGE6dGVzdE1ldGEgICAgfVxuICAgIHsga2V5OiAnYXNzZXJ0JyAgZGVzYzogJ2Fzc2VydCcgICAgICAgICAgICAgICBtZXRhOmFzc2VydE1ldGEgIH1cbiAgICB7IGtleTogJ3Byb2ZpbGUnIGRlc2M6ICdwcm9maWxlJyAgICAgICAgICAgICAgbWV0YTpwcm9maWxlTWV0YSB9XG4gICAgeyBrZXk6ICdkYmcnICAgICBkZXNjOiAnZGVidWcnICAgICAgICAgICAgICAgIG1ldGE6ZGVidWdNZXRhICAgfVxuICAgIHsga2V5OiAncmFuZCcgICAgZGVzYzogJ3JhbmQnICAgICAgICAgICAgICAgICBtZXRhOnJhbmRNZXRhICAgIH1cbl1cblxuaW5qZWN0TWV0YSA9IChvcHRpb25zKSAtPiAjIG1ha2Ugc3VyZSB0aGF0IG9wdGlvbnMgaGFzIGEgbWV0YSBzZXRcbiAgICBcbiAgICBvcHRpb25zID89IHt9XG4gICAgXG4gICAgeyBleHRlbmQgfSA9IHJlcXVpcmUgJy4vaGVscGVycydcbiAgICBcbiAgICBkZWZhdWx0TWV0YSA9IHt9XG4gICAgTUVUQS5tYXAgKG0pIC0+IGRlZmF1bHRNZXRhW20ua2V5XSA9IG0ubWV0YVxuICAgIFxuICAgIG1ldGEgICAgPSBleHRlbmQgZGVmYXVsdE1ldGEsIG9wdGlvbnMubWV0YSA/IHt9XG4gICAgb3B0aW9ucyA9IGV4dGVuZCB7IG1ldGE6IG1ldGEgfSwgb3B0aW9uc1xuICAgIG9wdGlvbnNcblxubG9nTWV0YXMgPSAtPlxuICAgIFxuICAgIHsgcGFkIH0gPSByZXF1aXJlICcuL2hlbHBlcnMnXG4gICAgbG9nIFwiXFxuTWV0YXM6XFxuXFxuI3sgTUVUQS5tYXAoKGYpIC0+IFwiICAgICN7cGFkIGYua2V5fSN7Zi5kZXNjfVwiKS5qb2luKCdcXG4nKSB9XFxuXCJcbiAgICBcbm1vZHVsZS5leHBvcnRzID0geyBNRVRBLCBpbmplY3RNZXRhLCBsb2dNZXRhcyB9XG4iXX0=
//# sourceURL=../coffee/meta.coffee