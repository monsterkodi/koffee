// generated by koffee 0.18.0

/*
00     00  00000000  000000000   0000000   
000   000  000          000     000   000  
000000000  0000000      000     000000000  
000 0 000  000          000     000   000  
000   000  00000000     000     000   000
 */
var META, injectMeta, logMetas;

META = [
    {
        key: 'profile',
        meta: function(arg) {
            var args, id, name, node, ref, ref1, ref2;
            args = (ref = arg.args) != null ? ref : null, node = (ref1 = arg.node) != null ? ref1 : null;
            id = (node.condition.locationData.first_line + 1) + "_" + node.condition.locationData.first_column;
            name = (ref2 = args[0]) != null ? ref2 : id;
            return {
                after: "console.log('" + name + "', require('pretty-time')(process.hrtime(koffee_" + id + ")));",
                code: "koffee_" + id + " = process.hrtime()",
                reduce: false
            };
        }
    }, {
        key: 'start',
        meta: function(arg) {
            var args, id, ref, ref1;
            args = (ref = arg.args) != null ? ref : null;
            id = (ref1 = args[0]) != null ? ref1 : 'start_end';
            return {
                before: "koffee_" + id + " = process.hrtime()",
                reduce: true,
                body: false
            };
        }
    }, {
        key: 'end',
        meta: function(arg) {
            var args, id, ref, ref1;
            args = (ref = arg.args) != null ? ref : null;
            id = (ref1 = args[0]) != null ? ref1 : 'start_end';
            return {
                before: "console.log('" + id + "', require('pretty-time')(process.hrtime(koffee_" + id + ")))",
                reduce: true,
                body: false
            };
        }
    }, {
        key: 'rand',
        meta: function(arg) {
            var args, ref, ref1;
            args = (ref = arg.args) != null ? ref : null;
            return {
                code: "Math.random() < " + ((ref1 = args != null ? args[0] : void 0) != null ? ref1 : 0.5),
                reduce: false
            };
        }
    }
];

injectMeta = function(options) {
    var defaultMeta, extend, meta, ref;
    if (options != null) {
        options;
    } else {
        options = {};
    }
    extend = require('./helpers').extend;
    defaultMeta = {};
    META.map(function(m) {
        return defaultMeta[m.key] = m.meta;
    });
    meta = extend(defaultMeta, (ref = options.meta) != null ? ref : {});
    options = extend({
        meta: meta
    }, options);
    return options;
};

logMetas = function() {
    var pad;
    pad = require('./helpers').pad;
    return console.log("\nMetas:\n\n" + (META.map(function(f) {
        return "    " + (pad(f.key)) + f.desc;
    }).join('\n')) + "\n");
};

module.exports = {
    META: META,
    injectMeta: injectMeta,
    logMetas: logMetas
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWV0YS5qcyIsInNvdXJjZVJvb3QiOiIuIiwic291cmNlcyI6WyIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7Ozs7OztBQUFBLElBQUE7O0FBUUEsSUFBQSxHQUFPO0lBRUg7UUFBQSxHQUFBLEVBQUssU0FBTDtRQUNBLElBQUEsRUFBTSxTQUFDLEdBQUQ7QUFDRixnQkFBQTtZQURHLHdDQUFHLE1BQUcsMENBQUc7WUFDWixFQUFBLEdBQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxVQUE1QixHQUF1QyxDQUF4QyxDQUFBLEdBQTBDLEdBQTFDLEdBQTZDLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDO1lBQ2hGLElBQUEscUNBQWlCO21CQUNqQjtnQkFBQSxLQUFBLEVBQVEsZUFBQSxHQUFnQixJQUFoQixHQUFxQixrREFBckIsR0FBdUUsRUFBdkUsR0FBMEUsTUFBbEY7Z0JBQ0EsSUFBQSxFQUFRLFNBQUEsR0FBVSxFQUFWLEdBQWEscUJBRHJCO2dCQUVBLE1BQUEsRUFBUSxLQUZSOztRQUhFLENBRE47S0FGRyxFQVVIO1FBQUEsR0FBQSxFQUFLLE9BQUw7UUFDQSxJQUFBLEVBQU0sU0FBQyxHQUFEO0FBQ0YsZ0JBQUE7WUFERyx3Q0FBRztZQUNOLEVBQUEscUNBQWU7bUJBQ2Y7Z0JBQUEsTUFBQSxFQUFRLFNBQUEsR0FBVSxFQUFWLEdBQWEscUJBQXJCO2dCQUNBLE1BQUEsRUFBUSxJQURSO2dCQUVBLElBQUEsRUFBUSxLQUZSOztRQUZFLENBRE47S0FWRyxFQWlCSDtRQUFBLEdBQUEsRUFBSyxLQUFMO1FBQ0EsSUFBQSxFQUFNLFNBQUMsR0FBRDtBQUNGLGdCQUFBO1lBREcsd0NBQUc7WUFDTixFQUFBLHFDQUFlO21CQUNmO2dCQUFBLE1BQUEsRUFBUSxlQUFBLEdBQWdCLEVBQWhCLEdBQW1CLGtEQUFuQixHQUFxRSxFQUFyRSxHQUF3RSxLQUFoRjtnQkFDQSxNQUFBLEVBQVEsSUFEUjtnQkFFQSxJQUFBLEVBQVEsS0FGUjs7UUFGRSxDQUROO0tBakJHLEVBd0JIO1FBQUEsR0FBQSxFQUFLLE1BQUw7UUFDQSxJQUFBLEVBQU0sU0FBQyxHQUFEO0FBQVcsZ0JBQUE7WUFBVix3Q0FBRzttQkFBTztnQkFBQSxJQUFBLEVBQUssa0JBQUEsR0FBa0IsMkRBQVksR0FBWixDQUF2QjtnQkFBeUMsTUFBQSxFQUFPLEtBQWhEOztRQUFYLENBRE47S0F4Qkc7OztBQThCUCxVQUFBLEdBQWEsU0FBQyxPQUFEO0FBRVQsUUFBQTs7UUFBQTs7UUFBQSxVQUFXOztJQUVULFNBQVcsT0FBQSxDQUFRLFdBQVI7SUFFYixXQUFBLEdBQWM7SUFDZCxJQUFJLENBQUMsR0FBTCxDQUFTLFNBQUMsQ0FBRDtlQUFPLFdBQVksQ0FBQSxDQUFDLENBQUMsR0FBRixDQUFaLEdBQXFCLENBQUMsQ0FBQztJQUE5QixDQUFUO0lBRUEsSUFBQSxHQUFVLE1BQUEsQ0FBTyxXQUFQLHVDQUFtQyxFQUFuQztJQUNWLE9BQUEsR0FBVSxNQUFBLENBQU87UUFBRSxJQUFBLEVBQU0sSUFBUjtLQUFQLEVBQXVCLE9BQXZCO1dBQ1Y7QUFYUzs7QUFhYixRQUFBLEdBQVcsU0FBQTtBQUVQLFFBQUE7SUFBRSxNQUFRLE9BQUEsQ0FBUSxXQUFSO1dBQW1CLE9BQUEsQ0FDN0IsR0FENkIsQ0FDekIsY0FBQSxHQUFjLENBQUUsSUFBSSxDQUFDLEdBQUwsQ0FBUyxTQUFDLENBQUQ7ZUFBTyxNQUFBLEdBQU0sQ0FBQyxHQUFBLENBQUksQ0FBQyxDQUFDLEdBQU4sQ0FBRCxDQUFOLEdBQW1CLENBQUMsQ0FBQztJQUE1QixDQUFULENBQTRDLENBQUMsSUFBN0MsQ0FBa0QsSUFBbEQsQ0FBRixDQUFkLEdBQXlFLElBRGhEO0FBRnRCOztBQUtYLE1BQU0sQ0FBQyxPQUFQLEdBQWlCO0lBQUUsTUFBQSxJQUFGO0lBQVEsWUFBQSxVQUFSO0lBQW9CLFVBQUEsUUFBcEIiLCJzb3VyY2VzQ29udGVudCI6WyIjIyNcbjAwICAgICAwMCAgMDAwMDAwMDAgIDAwMDAwMDAwMCAgIDAwMDAwMDAgICBcbjAwMCAgIDAwMCAgMDAwICAgICAgICAgIDAwMCAgICAgMDAwICAgMDAwICBcbjAwMDAwMDAwMCAgMDAwMDAwMCAgICAgIDAwMCAgICAgMDAwMDAwMDAwICBcbjAwMCAwIDAwMCAgMDAwICAgICAgICAgIDAwMCAgICAgMDAwICAgMDAwICBcbjAwMCAgIDAwMCAgMDAwMDAwMDAgICAgIDAwMCAgICAgMDAwICAgMDAwICBcbiMjI1xuXG5NRVRBID0gW1xuICAgIFxuICAgIGtleTogJ3Byb2ZpbGUnICAgXG4gICAgbWV0YTogKGFyZ3M6LG5vZGU6KSAtPiBcbiAgICAgICAgaWQgPSBcIiN7bm9kZS5jb25kaXRpb24ubG9jYXRpb25EYXRhLmZpcnN0X2xpbmUrMX1fI3tub2RlLmNvbmRpdGlvbi5sb2NhdGlvbkRhdGEuZmlyc3RfY29sdW1ufVwiXG4gICAgICAgIG5hbWUgPSBhcmdzWzBdID8gaWRcbiAgICAgICAgYWZ0ZXI6ICBcImNvbnNvbGUubG9nKCcje25hbWV9JywgcmVxdWlyZSgncHJldHR5LXRpbWUnKShwcm9jZXNzLmhydGltZShrb2ZmZWVfI3tpZH0pKSk7XCJcbiAgICAgICAgY29kZTogICBcImtvZmZlZV8je2lkfSA9IHByb2Nlc3MuaHJ0aW1lKClcIlxuICAgICAgICByZWR1Y2U6IGZhbHNlXG4sXG4gICAga2V5OiAnc3RhcnQnICAgXG4gICAgbWV0YTogKGFyZ3M6KSAtPiBcbiAgICAgICAgaWQgPSBhcmdzWzBdID8gJ3N0YXJ0X2VuZCdcbiAgICAgICAgYmVmb3JlOiBcImtvZmZlZV8je2lkfSA9IHByb2Nlc3MuaHJ0aW1lKClcIlxuICAgICAgICByZWR1Y2U6IHRydWVcbiAgICAgICAgYm9keTogICBmYWxzZVxuLFxuICAgIGtleTogJ2VuZCcgICAgIFxuICAgIG1ldGE6IChhcmdzOikgLT4gXG4gICAgICAgIGlkID0gYXJnc1swXSA/ICdzdGFydF9lbmQnXG4gICAgICAgIGJlZm9yZTogXCJjb25zb2xlLmxvZygnI3tpZH0nLCByZXF1aXJlKCdwcmV0dHktdGltZScpKHByb2Nlc3MuaHJ0aW1lKGtvZmZlZV8je2lkfSkpKVwiXG4gICAgICAgIHJlZHVjZTogdHJ1ZVxuICAgICAgICBib2R5OiAgIGZhbHNlXG4sICAgICAgICBcbiAgICBrZXk6ICdyYW5kJyAgICBcbiAgICBtZXRhOiAoYXJnczopIC0+IGNvZGU6XCJNYXRoLnJhbmRvbSgpIDwgI3thcmdzP1swXSA/IDAuNX1cIiByZWR1Y2U6ZmFsc2UgICBcbiAgICBcbiAgICAjIGtleTogJ3Rva2VuJyAncGFyc2UnICdjb2RlJyAndGVzdCcgJ2Fzc2VydCcgJ2RiZycgXG5dXG5cbmluamVjdE1ldGEgPSAob3B0aW9ucykgLT4gIyBtYWtlIHN1cmUgdGhhdCBvcHRpb25zIGhhcyBhIG1ldGEgc2V0XG4gICAgXG4gICAgb3B0aW9ucyA/PSB7fVxuICAgIFxuICAgIHsgZXh0ZW5kIH0gPSByZXF1aXJlICcuL2hlbHBlcnMnXG4gICAgXG4gICAgZGVmYXVsdE1ldGEgPSB7fVxuICAgIE1FVEEubWFwIChtKSAtPiBkZWZhdWx0TWV0YVttLmtleV0gPSBtLm1ldGFcbiAgICBcbiAgICBtZXRhICAgID0gZXh0ZW5kIGRlZmF1bHRNZXRhLCBvcHRpb25zLm1ldGEgPyB7fVxuICAgIG9wdGlvbnMgPSBleHRlbmQgeyBtZXRhOiBtZXRhIH0sIG9wdGlvbnNcbiAgICBvcHRpb25zXG5cbmxvZ01ldGFzID0gLT5cbiAgICBcbiAgICB7IHBhZCB9ID0gcmVxdWlyZSAnLi9oZWxwZXJzJ1xuICAgIGxvZyBcIlxcbk1ldGFzOlxcblxcbiN7IE1FVEEubWFwKChmKSAtPiBcIiAgICAje3BhZCBmLmtleX0je2YuZGVzY31cIikuam9pbignXFxuJykgfVxcblwiXG4gICAgXG5tb2R1bGUuZXhwb3J0cyA9IHsgTUVUQSwgaW5qZWN0TWV0YSwgbG9nTWV0YXMgfVxuIl19
//# sourceURL=../coffee/meta.coffee