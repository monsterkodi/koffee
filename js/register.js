// Generated by koffee 0.5.0

/*
00000000   00000000   0000000   000   0000000  000000000  00000000  00000000   
000   000  000       000        000  000          000     000       000   000  
0000000    0000000   000  0000  000  0000000      000     0000000   0000000    
000   000  000       000   000  000       000     000     000       000   000  
000   000  00000000   0000000   000  0000000      000     00000000  000   000
 */
var Koffee, Module, binary, child_process, ext, findExtension, fork, helpers, i, len, loadFile, path, ref;

Koffee = require('./koffee');

child_process = require('child_process');

helpers = require('./helpers');

path = require('path');

loadFile = function(module, filename) {
    var answer;
    answer = Koffee._compileFile(filename, false, true);
    return module._compile(answer, filename);
};

if (require.extensions) {
    ref = Koffee.FILE_EXTENSIONS;
    for (i = 0, len = ref.length; i < len; i++) {
        ext = ref[i];
        require.extensions[ext] = loadFile;
    }
    Module = require('module');
    findExtension = function(filename) {
        var curExtension, extensions;
        extensions = path.basename(filename).split('.');
        if (extensions[0] === '') {
            extensions.shift();
        }
        while (extensions.shift()) {
            curExtension = '.' + extensions.join('.');
            if (Module._extensions[curExtension]) {
                return curExtension;
            }
        }
        return '.js';
    };
    Module.prototype.load = function(filename) {
        var extension;
        this.filename = filename;
        this.paths = Module._nodeModulePaths(path.dirname(filename));
        extension = findExtension(filename);
        Module._extensions[extension](this, filename);
        return this.loaded = true;
    };
}

if (child_process) {
    fork = child_process.fork;
    binary = require.resolve('../bin/koffee');
    child_process.fork = function(path, args, options) {
        if (helpers.isCoffee(path)) {
            if (!Array.isArray(args)) {
                options = args || {};
                args = [];
            }
            args = [path].concat(args);
            path = binary;
        }
        return fork(path, args, options);
    };
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVnaXN0ZXIuanMiLCJzb3VyY2VSb290IjoiLiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7Ozs7QUFBQSxJQUFBOztBQVFBLE1BQUEsR0FBZ0IsT0FBQSxDQUFRLFVBQVI7O0FBQ2hCLGFBQUEsR0FBZ0IsT0FBQSxDQUFRLGVBQVI7O0FBQ2hCLE9BQUEsR0FBZ0IsT0FBQSxDQUFRLFdBQVI7O0FBQ2hCLElBQUEsR0FBZ0IsT0FBQSxDQUFRLE1BQVI7O0FBSWhCLFFBQUEsR0FBVyxTQUFDLE1BQUQsRUFBUyxRQUFUO0FBQ1AsUUFBQTtJQUFBLE1BQUEsR0FBUyxNQUFNLENBQUMsWUFBUCxDQUFvQixRQUFwQixFQUE4QixLQUE5QixFQUFrQyxJQUFsQztXQUNULE1BQU0sQ0FBQyxRQUFQLENBQWdCLE1BQWhCLEVBQXdCLFFBQXhCO0FBRk87O0FBTVgsSUFBRyxPQUFPLENBQUMsVUFBWDtBQUNJO0FBQUEsU0FBQSxxQ0FBQTs7UUFDSSxPQUFPLENBQUMsVUFBVyxDQUFBLEdBQUEsQ0FBbkIsR0FBMEI7QUFEOUI7SUFNQSxNQUFBLEdBQVMsT0FBQSxDQUFRLFFBQVI7SUFFVCxhQUFBLEdBQWdCLFNBQUMsUUFBRDtBQUNaLFlBQUE7UUFBQSxVQUFBLEdBQWEsSUFBSSxDQUFDLFFBQUwsQ0FBYyxRQUFkLENBQXVCLENBQUMsS0FBeEIsQ0FBOEIsR0FBOUI7UUFFYixJQUFzQixVQUFXLENBQUEsQ0FBQSxDQUFYLEtBQWlCLEVBQXZDO1lBQUEsVUFBVSxDQUFDLEtBQVgsQ0FBQSxFQUFBOztBQUVBLGVBQU0sVUFBVSxDQUFDLEtBQVgsQ0FBQSxDQUFOO1lBQ0ksWUFBQSxHQUFlLEdBQUEsR0FBTSxVQUFVLENBQUMsSUFBWCxDQUFnQixHQUFoQjtZQUNyQixJQUF1QixNQUFNLENBQUMsV0FBWSxDQUFBLFlBQUEsQ0FBMUM7QUFBQSx1QkFBTyxhQUFQOztRQUZKO2VBR0E7SUFSWTtJQVVoQixNQUFNLENBQUEsU0FBRSxDQUFBLElBQVIsR0FBZSxTQUFDLFFBQUQ7QUFDWCxZQUFBO1FBQUEsSUFBQyxDQUFBLFFBQUQsR0FBWTtRQUNaLElBQUMsQ0FBQSxLQUFELEdBQVMsTUFBTSxDQUFDLGdCQUFQLENBQXdCLElBQUksQ0FBQyxPQUFMLENBQWEsUUFBYixDQUF4QjtRQUNULFNBQUEsR0FBWSxhQUFBLENBQWMsUUFBZDtRQUNaLE1BQU0sQ0FBQyxXQUFZLENBQUEsU0FBQSxDQUFuQixDQUE4QixJQUE5QixFQUFvQyxRQUFwQztlQUNBLElBQUMsQ0FBQSxNQUFELEdBQVU7SUFMQyxFQW5CbkI7OztBQTZCQSxJQUFHLGFBQUg7SUFFSyxPQUFRO0lBQ1QsTUFBQSxHQUFTLE9BQU8sQ0FBQyxPQUFSLENBQWdCLGVBQWhCO0lBRVQsYUFBYSxDQUFDLElBQWQsR0FBcUIsU0FBQyxJQUFELEVBQU8sSUFBUCxFQUFhLE9BQWI7UUFDakIsSUFBRyxPQUFPLENBQUMsUUFBUixDQUFpQixJQUFqQixDQUFIO1lBQ0ksSUFBQSxDQUFPLEtBQUssQ0FBQyxPQUFOLENBQWMsSUFBZCxDQUFQO2dCQUNJLE9BQUEsR0FBVSxJQUFBLElBQVE7Z0JBQ2xCLElBQUEsR0FBTyxHQUZYOztZQUdBLElBQUEsR0FBTyxDQUFDLElBQUQsQ0FBTSxDQUFDLE1BQVAsQ0FBYyxJQUFkO1lBQ1AsSUFBQSxHQUFPLE9BTFg7O2VBTUEsSUFBQSxDQUFLLElBQUwsRUFBVyxJQUFYLEVBQWlCLE9BQWpCO0lBUGlCLEVBTHpCIiwic291cmNlc0NvbnRlbnQiOlsiIyMjXG4wMDAwMDAwMCAgIDAwMDAwMDAwICAgMDAwMDAwMCAgIDAwMCAgIDAwMDAwMDAgIDAwMDAwMDAwMCAgMDAwMDAwMDAgIDAwMDAwMDAwICAgXG4wMDAgICAwMDAgIDAwMCAgICAgICAwMDAgICAgICAgIDAwMCAgMDAwICAgICAgICAgIDAwMCAgICAgMDAwICAgICAgIDAwMCAgIDAwMCAgXG4wMDAwMDAwICAgIDAwMDAwMDAgICAwMDAgIDAwMDAgIDAwMCAgMDAwMDAwMCAgICAgIDAwMCAgICAgMDAwMDAwMCAgIDAwMDAwMDAgICAgXG4wMDAgICAwMDAgIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgICAgIDAwMCAgICAgMDAwICAgICAgIDAwMCAgIDAwMCAgXG4wMDAgICAwMDAgIDAwMDAwMDAwICAgMDAwMDAwMCAgIDAwMCAgMDAwMDAwMCAgICAgIDAwMCAgICAgMDAwMDAwMDAgIDAwMCAgIDAwMCAgXG4jIyNcblxuS29mZmVlICAgICAgICA9IHJlcXVpcmUgJy4va29mZmVlJ1xuY2hpbGRfcHJvY2VzcyA9IHJlcXVpcmUgJ2NoaWxkX3Byb2Nlc3MnXG5oZWxwZXJzICAgICAgID0gcmVxdWlyZSAnLi9oZWxwZXJzJ1xucGF0aCAgICAgICAgICA9IHJlcXVpcmUgJ3BhdGgnXG5cbiMgTG9hZCBhbmQgcnVuIGZpbGUgZm9yIE5vZGUsIHN0cmlwcGluZyBhbnkgYEJPTWBzLlxuICAgIFxubG9hZEZpbGUgPSAobW9kdWxlLCBmaWxlbmFtZSkgLT5cbiAgICBhbnN3ZXIgPSBLb2ZmZWUuX2NvbXBpbGVGaWxlIGZpbGVuYW1lLCBubywgeWVzXG4gICAgbW9kdWxlLl9jb21waWxlIGFuc3dlciwgZmlsZW5hbWVcblxuIyBJZiB0aGUgaW5zdGFsbGVkIHZlcnNpb24gb2YgTm9kZSBzdXBwb3J0cyBgcmVxdWlyZS5leHRlbnNpb25zYCwgcmVnaXN0ZXIgb3VyIGV4dGVuc2lvbnMuXG5cbmlmIHJlcXVpcmUuZXh0ZW5zaW9uc1xuICAgIGZvciBleHQgaW4gS29mZmVlLkZJTEVfRVhURU5TSU9OU1xuICAgICAgICByZXF1aXJlLmV4dGVuc2lvbnNbZXh0XSA9IGxvYWRGaWxlXG5cbiAgICAjIFBhdGNoIE5vZGUncyBtb2R1bGUgbG9hZGVyIHRvIGJlIGFibGUgdG8gaGFuZGxlIG11bHRpLWRvdCBleHRlbnNpb25zLlxuICAgICMgVGhpcyBpcyBhIGhvcnJpYmxlIHRoaW5nIHRoYXQgc2hvdWxkIG5vdCBiZSByZXF1aXJlZC5cbiAgICBcbiAgICBNb2R1bGUgPSByZXF1aXJlICdtb2R1bGUnXG5cbiAgICBmaW5kRXh0ZW5zaW9uID0gKGZpbGVuYW1lKSAtPlxuICAgICAgICBleHRlbnNpb25zID0gcGF0aC5iYXNlbmFtZShmaWxlbmFtZSkuc3BsaXQgJy4nXG4gICAgICAgICMgUmVtb3ZlIHRoZSBpbml0aWFsIGRvdCBmcm9tIGRvdGZpbGVzLlxuICAgICAgICBleHRlbnNpb25zLnNoaWZ0KCkgaWYgZXh0ZW5zaW9uc1swXSBpcyAnJ1xuICAgICAgICAjIFN0YXJ0IHdpdGggdGhlIGxvbmdlc3QgcG9zc2libGUgZXh0ZW5zaW9uIGFuZCB3b3JrIG91ciB3YXkgc2hvcnR3YXJkcy5cbiAgICAgICAgd2hpbGUgZXh0ZW5zaW9ucy5zaGlmdCgpXG4gICAgICAgICAgICBjdXJFeHRlbnNpb24gPSAnLicgKyBleHRlbnNpb25zLmpvaW4gJy4nXG4gICAgICAgICAgICByZXR1cm4gY3VyRXh0ZW5zaW9uIGlmIE1vZHVsZS5fZXh0ZW5zaW9uc1tjdXJFeHRlbnNpb25dXG4gICAgICAgICcuanMnXG5cbiAgICBNb2R1bGU6OmxvYWQgPSAoZmlsZW5hbWUpIC0+XG4gICAgICAgIEBmaWxlbmFtZSA9IGZpbGVuYW1lXG4gICAgICAgIEBwYXRocyA9IE1vZHVsZS5fbm9kZU1vZHVsZVBhdGhzIHBhdGguZGlybmFtZSBmaWxlbmFtZVxuICAgICAgICBleHRlbnNpb24gPSBmaW5kRXh0ZW5zaW9uIGZpbGVuYW1lXG4gICAgICAgIE1vZHVsZS5fZXh0ZW5zaW9uc1tleHRlbnNpb25dKHRoaXMsIGZpbGVuYW1lKVxuICAgICAgICBAbG9hZGVkID0gdHJ1ZVxuXG4jIElmIHdlJ3JlIG9uIE5vZGUsIHBhdGNoIGBjaGlsZF9wcm9jZXNzLmZvcmtgIHNvIHRoYXQga29mZmVlIHNjcmlwdHMgYXJlIGFibGVcbiMgdG8gZm9yayBib3RoIGtvZmZlZSBhbmQgSmF2YVNjcmlwdCBmaWxlcywgZGlyZWN0bHkuXG5cbmlmIGNoaWxkX3Byb2Nlc3NcbiAgICBcbiAgICB7Zm9ya30gPSBjaGlsZF9wcm9jZXNzXG4gICAgYmluYXJ5ID0gcmVxdWlyZS5yZXNvbHZlICcuLi9iaW4va29mZmVlJ1xuICAgIFxuICAgIGNoaWxkX3Byb2Nlc3MuZm9yayA9IChwYXRoLCBhcmdzLCBvcHRpb25zKSAtPlxuICAgICAgICBpZiBoZWxwZXJzLmlzQ29mZmVlIHBhdGhcbiAgICAgICAgICAgIHVubGVzcyBBcnJheS5pc0FycmF5IGFyZ3NcbiAgICAgICAgICAgICAgICBvcHRpb25zID0gYXJncyBvciB7fVxuICAgICAgICAgICAgICAgIGFyZ3MgPSBbXVxuICAgICAgICAgICAgYXJncyA9IFtwYXRoXS5jb25jYXQgYXJnc1xuICAgICAgICAgICAgcGF0aCA9IGJpbmFyeVxuICAgICAgICBmb3JrIHBhdGgsIGFyZ3MsIG9wdGlvbnNcbiJdfQ==
//# sourceURL=../coffee/register.coffee