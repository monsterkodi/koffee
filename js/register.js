// koffee 1.19.0

/*
00000000   00000000   0000000   000   0000000  000000000  00000000  00000000   
000   000  000       000        000  000          000     000       000   000  
0000000    0000000   000  0000  000  0000000      000     0000000   0000000    
000   000  000       000   000  000       000     000     000       000   000  
000   000  00000000   0000000   000  0000000      000     00000000  000   000
 */
var Koffee, Module, binary, child_process, ext, findExtension, fork, fs, helpers, i, len, loadFile, path, ref;

Koffee = require('./koffee');

child_process = require('child_process');

helpers = require('./helpers');

path = require('path');

fs = require('fs');

loadFile = function(module, filename) {
    var answer, code, err;
    code = fs.readFileSync(filename, 'utf8');
    try {
        answer = Koffee.compile(code, {
            filename: filename,
            sourceMap: false,
            inlineMap: true,
            sourceFiles: [filename]
        });
        return module._compile(answer, filename);
    } catch (error) {
        err = error;
        throw helpers.updateSyntaxError(err, code, filename);
    }
};

if (require.extensions) {
    ref = Koffee.FILE_EXTENSIONS;
    for (i = 0, len = ref.length; i < len; i++) {
        ext = ref[i];
        require.extensions[ext] = loadFile;
    }
    Module = require('module');
    findExtension = function(filename) {
        var curExtension, extensions;
        extensions = path.basename(filename).split('.');
        if (extensions[0] === '') {
            extensions.shift();
        }
        while (extensions.shift()) {
            curExtension = '.' + extensions.join('.');
            if (Module._extensions[curExtension]) {
                return curExtension;
            }
        }
        return '.js';
    };
    Module.prototype.load = function(filename) {
        var extension;
        this.filename = filename;
        this.paths = Module._nodeModulePaths(path.dirname(filename));
        extension = findExtension(filename);
        Module._extensions[extension](this, filename);
        return this.loaded = true;
    };
}

if (child_process) {
    fork = child_process.fork;
    binary = require.resolve('../bin/koffee');
    child_process.fork = function(path, args, options) {
        if (helpers.isCoffee(path)) {
            if (!Array.isArray(args)) {
                options = args || {};
                args = [];
            }
            args = [path].concat(args);
            path = binary;
        }
        return fork(path, args, options);
    };
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVnaXN0ZXIuanMiLCJzb3VyY2VSb290IjoiLi4vY29mZmVlIiwic291cmNlcyI6WyJyZWdpc3Rlci5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7Ozs7OztBQUFBLElBQUE7O0FBUUEsTUFBQSxHQUFnQixPQUFBLENBQVEsVUFBUjs7QUFDaEIsYUFBQSxHQUFnQixPQUFBLENBQVEsZUFBUjs7QUFDaEIsT0FBQSxHQUFnQixPQUFBLENBQVEsV0FBUjs7QUFDaEIsSUFBQSxHQUFnQixPQUFBLENBQVEsTUFBUjs7QUFDaEIsRUFBQSxHQUFnQixPQUFBLENBQVEsSUFBUjs7QUFFaEIsUUFBQSxHQUFXLFNBQUMsTUFBRCxFQUFTLFFBQVQ7QUFFUCxRQUFBO0lBQUEsSUFBQSxHQUFPLEVBQUUsQ0FBQyxZQUFILENBQWdCLFFBQWhCLEVBQTBCLE1BQTFCO0FBRVA7UUFDSSxNQUFBLEdBQVMsTUFBTSxDQUFDLE9BQVAsQ0FBZSxJQUFmLEVBQ0w7WUFBQSxRQUFBLEVBQVcsUUFBWDtZQUNBLFNBQUEsRUFBVyxLQURYO1lBRUEsU0FBQSxFQUFXLElBRlg7WUFHQSxXQUFBLEVBQWEsQ0FBQyxRQUFELENBSGI7U0FESztlQUtULE1BQU0sQ0FBQyxRQUFQLENBQWdCLE1BQWhCLEVBQXdCLFFBQXhCLEVBTko7S0FBQSxhQUFBO1FBT007QUFDRixjQUFNLE9BQU8sQ0FBQyxpQkFBUixDQUEwQixHQUExQixFQUErQixJQUEvQixFQUFxQyxRQUFyQyxFQVJWOztBQUpPOztBQWdCWCxJQUFHLE9BQU8sQ0FBQyxVQUFYO0FBQ0k7QUFBQSxTQUFBLHFDQUFBOztRQUNJLE9BQU8sQ0FBQyxVQUFXLENBQUEsR0FBQSxDQUFuQixHQUEwQjtBQUQ5QjtJQU1BLE1BQUEsR0FBUyxPQUFBLENBQVEsUUFBUjtJQUVULGFBQUEsR0FBZ0IsU0FBQyxRQUFEO0FBQ1osWUFBQTtRQUFBLFVBQUEsR0FBYSxJQUFJLENBQUMsUUFBTCxDQUFjLFFBQWQsQ0FBdUIsQ0FBQyxLQUF4QixDQUE4QixHQUE5QjtRQUViLElBQXNCLFVBQVcsQ0FBQSxDQUFBLENBQVgsS0FBaUIsRUFBdkM7WUFBQSxVQUFVLENBQUMsS0FBWCxDQUFBLEVBQUE7O0FBRUEsZUFBTSxVQUFVLENBQUMsS0FBWCxDQUFBLENBQU47WUFDSSxZQUFBLEdBQWUsR0FBQSxHQUFNLFVBQVUsQ0FBQyxJQUFYLENBQWdCLEdBQWhCO1lBQ3JCLElBQXVCLE1BQU0sQ0FBQyxXQUFZLENBQUEsWUFBQSxDQUExQztBQUFBLHVCQUFPLGFBQVA7O1FBRko7ZUFHQTtJQVJZO0lBVWhCLE1BQU0sQ0FBQSxTQUFFLENBQUEsSUFBUixHQUFlLFNBQUMsUUFBRDtBQUNYLFlBQUE7UUFBQSxJQUFDLENBQUEsUUFBRCxHQUFZO1FBQ1osSUFBQyxDQUFBLEtBQUQsR0FBUyxNQUFNLENBQUMsZ0JBQVAsQ0FBd0IsSUFBSSxDQUFDLE9BQUwsQ0FBYSxRQUFiLENBQXhCO1FBQ1QsU0FBQSxHQUFZLGFBQUEsQ0FBYyxRQUFkO1FBQ1osTUFBTSxDQUFDLFdBQVksQ0FBQSxTQUFBLENBQW5CLENBQThCLElBQTlCLEVBQW9DLFFBQXBDO2VBQ0EsSUFBQyxDQUFBLE1BQUQsR0FBVTtJQUxDLEVBbkJuQjs7O0FBNkJBLElBQUcsYUFBSDtJQUVLLE9BQVE7SUFDVCxNQUFBLEdBQVMsT0FBTyxDQUFDLE9BQVIsQ0FBZ0IsZUFBaEI7SUFFVCxhQUFhLENBQUMsSUFBZCxHQUFxQixTQUFDLElBQUQsRUFBTyxJQUFQLEVBQWEsT0FBYjtRQUNqQixJQUFHLE9BQU8sQ0FBQyxRQUFSLENBQWlCLElBQWpCLENBQUg7WUFDSSxJQUFBLENBQU8sS0FBSyxDQUFDLE9BQU4sQ0FBYyxJQUFkLENBQVA7Z0JBQ0ksT0FBQSxHQUFVLElBQUEsSUFBUTtnQkFDbEIsSUFBQSxHQUFPLEdBRlg7O1lBR0EsSUFBQSxHQUFPLENBQUMsSUFBRCxDQUFNLENBQUMsTUFBUCxDQUFjLElBQWQ7WUFDUCxJQUFBLEdBQU8sT0FMWDs7ZUFNQSxJQUFBLENBQUssSUFBTCxFQUFXLElBQVgsRUFBaUIsT0FBakI7SUFQaUIsRUFMekIiLCJzb3VyY2VzQ29udGVudCI6WyIjIyNcbjAwMDAwMDAwICAgMDAwMDAwMDAgICAwMDAwMDAwICAgMDAwICAgMDAwMDAwMCAgMDAwMDAwMDAwICAwMDAwMDAwMCAgMDAwMDAwMDAgICBcbjAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgICAgICAgMDAwICAwMDAgICAgICAgICAgMDAwICAgICAwMDAgICAgICAgMDAwICAgMDAwICBcbjAwMDAwMDAgICAgMDAwMDAwMCAgIDAwMCAgMDAwMCAgMDAwICAwMDAwMDAwICAgICAgMDAwICAgICAwMDAwMDAwICAgMDAwMDAwMCAgICBcbjAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgICAgMDAwICAgICAwMDAgICAgICAgMDAwICAgMDAwICBcbjAwMCAgIDAwMCAgMDAwMDAwMDAgICAwMDAwMDAwICAgMDAwICAwMDAwMDAwICAgICAgMDAwICAgICAwMDAwMDAwMCAgMDAwICAgMDAwICBcbiMjI1xuXG5Lb2ZmZWUgICAgICAgID0gcmVxdWlyZSAnLi9rb2ZmZWUnXG5jaGlsZF9wcm9jZXNzID0gcmVxdWlyZSAnY2hpbGRfcHJvY2VzcydcbmhlbHBlcnMgICAgICAgPSByZXF1aXJlICcuL2hlbHBlcnMnXG5wYXRoICAgICAgICAgID0gcmVxdWlyZSAncGF0aCdcbmZzICAgICAgICAgICAgPSByZXF1aXJlICdmcydcblxubG9hZEZpbGUgPSAobW9kdWxlLCBmaWxlbmFtZSkgLT5cbiAgICBcbiAgICBjb2RlID0gZnMucmVhZEZpbGVTeW5jIGZpbGVuYW1lLCAndXRmOCdcblxuICAgIHRyeVxuICAgICAgICBhbnN3ZXIgPSBLb2ZmZWUuY29tcGlsZSBjb2RlLCBcbiAgICAgICAgICAgIGZpbGVuYW1lOiAgZmlsZW5hbWVcbiAgICAgICAgICAgIHNvdXJjZU1hcDogZmFsc2VcbiAgICAgICAgICAgIGlubGluZU1hcDogdHJ1ZVxuICAgICAgICAgICAgc291cmNlRmlsZXM6IFtmaWxlbmFtZV1cbiAgICAgICAgbW9kdWxlLl9jb21waWxlIGFuc3dlciwgZmlsZW5hbWVcbiAgICBjYXRjaCBlcnJcbiAgICAgICAgdGhyb3cgaGVscGVycy51cGRhdGVTeW50YXhFcnJvciBlcnIsIGNvZGUsIGZpbGVuYW1lXG5cbiMgSWYgdGhlIGluc3RhbGxlZCB2ZXJzaW9uIG9mIE5vZGUgc3VwcG9ydHMgYHJlcXVpcmUuZXh0ZW5zaW9uc2AsIHJlZ2lzdGVyIG91ciBleHRlbnNpb25zLlxuXG5pZiByZXF1aXJlLmV4dGVuc2lvbnNcbiAgICBmb3IgZXh0IGluIEtvZmZlZS5GSUxFX0VYVEVOU0lPTlNcbiAgICAgICAgcmVxdWlyZS5leHRlbnNpb25zW2V4dF0gPSBsb2FkRmlsZVxuXG4gICAgIyBQYXRjaCBOb2RlJ3MgbW9kdWxlIGxvYWRlciB0byBiZSBhYmxlIHRvIGhhbmRsZSBtdWx0aS1kb3QgZXh0ZW5zaW9ucy5cbiAgICAjIFRoaXMgaXMgYSBob3JyaWJsZSB0aGluZyB0aGF0IHNob3VsZCBub3QgYmUgcmVxdWlyZWQuXG4gICAgXG4gICAgTW9kdWxlID0gcmVxdWlyZSAnbW9kdWxlJ1xuXG4gICAgZmluZEV4dGVuc2lvbiA9IChmaWxlbmFtZSkgLT5cbiAgICAgICAgZXh0ZW5zaW9ucyA9IHBhdGguYmFzZW5hbWUoZmlsZW5hbWUpLnNwbGl0ICcuJ1xuICAgICAgICAjIFJlbW92ZSB0aGUgaW5pdGlhbCBkb3QgZnJvbSBkb3RmaWxlcy5cbiAgICAgICAgZXh0ZW5zaW9ucy5zaGlmdCgpIGlmIGV4dGVuc2lvbnNbMF0gaXMgJydcbiAgICAgICAgIyBTdGFydCB3aXRoIHRoZSBsb25nZXN0IHBvc3NpYmxlIGV4dGVuc2lvbiBhbmQgd29yayBvdXIgd2F5IHNob3J0d2FyZHMuXG4gICAgICAgIHdoaWxlIGV4dGVuc2lvbnMuc2hpZnQoKVxuICAgICAgICAgICAgY3VyRXh0ZW5zaW9uID0gJy4nICsgZXh0ZW5zaW9ucy5qb2luICcuJ1xuICAgICAgICAgICAgcmV0dXJuIGN1ckV4dGVuc2lvbiBpZiBNb2R1bGUuX2V4dGVuc2lvbnNbY3VyRXh0ZW5zaW9uXVxuICAgICAgICAnLmpzJ1xuXG4gICAgTW9kdWxlOjpsb2FkID0gKGZpbGVuYW1lKSAtPlxuICAgICAgICBAZmlsZW5hbWUgPSBmaWxlbmFtZVxuICAgICAgICBAcGF0aHMgPSBNb2R1bGUuX25vZGVNb2R1bGVQYXRocyBwYXRoLmRpcm5hbWUgZmlsZW5hbWVcbiAgICAgICAgZXh0ZW5zaW9uID0gZmluZEV4dGVuc2lvbiBmaWxlbmFtZVxuICAgICAgICBNb2R1bGUuX2V4dGVuc2lvbnNbZXh0ZW5zaW9uXSh0aGlzLCBmaWxlbmFtZSlcbiAgICAgICAgQGxvYWRlZCA9IHRydWVcblxuIyBJZiB3ZSdyZSBvbiBOb2RlLCBwYXRjaCBgY2hpbGRfcHJvY2Vzcy5mb3JrYCBzbyB0aGF0IGtvZmZlZSBzY3JpcHRzIGFyZSBhYmxlXG4jIHRvIGZvcmsgYm90aCBrb2ZmZWUgYW5kIEphdmFTY3JpcHQgZmlsZXMsIGRpcmVjdGx5LlxuXG5pZiBjaGlsZF9wcm9jZXNzXG4gICAgXG4gICAge2Zvcmt9ID0gY2hpbGRfcHJvY2Vzc1xuICAgIGJpbmFyeSA9IHJlcXVpcmUucmVzb2x2ZSAnLi4vYmluL2tvZmZlZSdcbiAgICBcbiAgICBjaGlsZF9wcm9jZXNzLmZvcmsgPSAocGF0aCwgYXJncywgb3B0aW9ucykgLT5cbiAgICAgICAgaWYgaGVscGVycy5pc0NvZmZlZSBwYXRoXG4gICAgICAgICAgICB1bmxlc3MgQXJyYXkuaXNBcnJheSBhcmdzXG4gICAgICAgICAgICAgICAgb3B0aW9ucyA9IGFyZ3Mgb3Ige31cbiAgICAgICAgICAgICAgICBhcmdzID0gW11cbiAgICAgICAgICAgIGFyZ3MgPSBbcGF0aF0uY29uY2F0IGFyZ3NcbiAgICAgICAgICAgIHBhdGggPSBiaW5hcnlcbiAgICAgICAgZm9yayBwYXRoLCBhcmdzLCBvcHRpb25zXG4iXX0=
//# sourceURL=../coffee/register.coffee