
/*
00000000   00000000  00000000   000      
000   000  000       000   000  000      
0000000    0000000   00000000   000      
000   000  000       000        000      
000   000  00000000  000        0000000
 */
var Koffee, addHistory, addMultilineHandler, fs, getCommandId, merge, nodeREPL, path, ref, replDefaults, runInContext, updateSyntaxError, vm;

fs = require('fs');

path = require('path');

vm = require('vm');

nodeREPL = require('repl');

Koffee = require('./koffee');

ref = require('./helpers'), merge = ref.merge, updateSyntaxError = ref.updateSyntaxError;

replDefaults = {
  prompt: 'koffee> ',
  historyFile: process.env.HOME ? path.join(process.env.HOME, '.koffee_history') : void 0,
  historyMaxInputSize: 10240,
  "eval": function(input, context, filename, cb) {
    var Assign, Block, Literal, Value, ast, err, js, ref1, referencedVars, token, tokens;
    input = input.replace(/\uFF00/g, '\n');
    input = input.replace(/^\(([\s\S]*)\n\)$/m, '$1');
    input = input.replace(/^\s*try\s*{([\s\S]*)}\s*catch.*$/m, '$1');
    ref1 = require('./nodes'), Block = ref1.Block, Assign = ref1.Assign, Value = ref1.Value, Literal = ref1.Literal;
    try {
      tokens = Koffee.tokens(input);
      referencedVars = (function() {
        var i, len, results;
        results = [];
        for (i = 0, len = tokens.length; i < len; i++) {
          token = tokens[i];
          if (token[0] === 'IDENTIFIER') {
            results.push(token[1]);
          }
        }
        return results;
      })();
      ast = Koffee.nodes(tokens);
      ast = new Block([new Assign(new Value(new Literal('__')), ast, '=')]);
      js = ast.compile({
        bare: true,
        locals: Object.keys(context),
        referencedVars: referencedVars
      });
      return cb(null, runInContext(js, context, filename));
    } catch (error) {
      err = error;
      updateSyntaxError(err, input);
      return cb(err);
    }
  }
};

runInContext = function(js, context, filename) {
  if (context === global) {
    return vm.runInThisContext(js, filename);
  } else {
    return vm.runInContext(js, context, filename);
  }
};

addMultilineHandler = function(repl) {
  var inputStream, multiline, nodeLineListener, origPrompt, outputStream, ref1, rli;
  rli = repl.rli, inputStream = repl.inputStream, outputStream = repl.outputStream;
  origPrompt = (ref1 = repl._prompt) != null ? ref1 : repl.prompt;
  multiline = {
    enabled: false,
    initialPrompt: origPrompt.replace(/^[^> ]*/, function(x) {
      return x.replace(/./g, '-');
    }),
    prompt: origPrompt.replace(/^[^> ]*>?/, function(x) {
      return x.replace(/./g, '.');
    }),
    buffer: ''
  };
  nodeLineListener = rli.listeners('line')[0];
  rli.removeListener('line', nodeLineListener);
  rli.on('line', function(cmd) {
    if (multiline.enabled) {
      multiline.buffer += cmd + "\n";
      rli.setPrompt(multiline.prompt);
      rli.prompt(true);
    } else {
      rli.setPrompt(origPrompt);
      nodeLineListener(cmd);
    }
  });
  return inputStream.on('keypress', function(char, key) {
    if (!(key && key.ctrl && !key.meta && !key.shift && key.name === 'v')) {
      return;
    }
    if (multiline.enabled) {
      if (!multiline.buffer.match(/\n/)) {
        multiline.enabled = !multiline.enabled;
        rli.setPrompt(origPrompt);
        rli.prompt(true);
        return;
      }
      if ((rli.line != null) && !rli.line.match(/^\s*$/)) {
        return;
      }
      multiline.enabled = !multiline.enabled;
      rli.line = '';
      rli.cursor = 0;
      rli.output.cursorTo(0);
      rli.output.clearLine(1);
      multiline.buffer = multiline.buffer.replace(/\n/g, '\uFF00');
      rli.emit('line', multiline.buffer);
      multiline.buffer = '';
    } else {
      multiline.enabled = !multiline.enabled;
      rli.setPrompt(multiline.initialPrompt);
      rli.prompt(true);
    }
  });
};

addHistory = function(repl, filename, maxSize) {
  var buffer, fd, lastLine, readFd, size, stat;
  lastLine = null;
  try {
    stat = fs.statSync(filename);
    size = Math.min(maxSize, stat.size);
    readFd = fs.openSync(filename, 'r');
    buffer = Buffer.alloc(size);
    fs.readSync(readFd, buffer, 0, size, stat.size - size);
    fs.closeSync(readFd);
    repl.rli.history = buffer.toString().split('\n').reverse();
    if (stat.size > maxSize) {
      repl.rli.history.pop();
    }
    if (repl.rli.history[0] === '') {
      repl.rli.history.shift();
    }
    repl.rli.historyIndex = -1;
    lastLine = repl.rli.history[0];
  } catch (error) {}
  fd = fs.openSync(filename, 'a');
  repl.rli.addListener('line', function(code) {
    if (code && code.length && code !== '.history' && code !== '.exit' && lastLine !== code) {
      fs.writeSync(fd, code + "\n");
      return lastLine = code;
    }
  });
  repl.on('exit', function() {
    return fs.closeSync(fd);
  });
  return repl.commands[getCommandId(repl, 'history')] = {
    help: 'Show command history',
    action: function() {
      repl.outputStream.write((repl.rli.history.slice(0).reverse().join('\n')) + "\n");
      return repl.displayPrompt();
    }
  };
};

getCommandId = function(repl, commandName) {
  var commandsHaveLeadingDot;
  commandsHaveLeadingDot = repl.commands['.help'] != null;
  if (commandsHaveLeadingDot) {
    return "." + commandName;
  } else {
    return commandName;
  }
};

module.exports = {
  start: function(opts) {
    var build, major, minor, ref1, repl;
    if (opts == null) {
      opts = {};
    }
    ref1 = process.versions.node.split('.').map(function(n) {
      return parseInt(n, 10);
    }), major = ref1[0], minor = ref1[1], build = ref1[2];
    if (major < 10) {
      console.warn("Node 10.0.0+ required for koffee REPL");
      process.exit(1);
    }
    Koffee.register();
    process.argv = ['koffee'].concat(process.argv.slice(2));
    opts = merge(replDefaults, opts);
    repl = nodeREPL.start(opts);
    if (opts.prelude) {
      runInContext(opts.prelude, repl.context, 'prelude');
    }
    repl.on('exit', function() {
      if (!repl.rli.closed) {
        return repl.outputStream.write('\n');
      }
    });
    addMultilineHandler(repl);
    if (opts.historyFile) {
      addHistory(repl, opts.historyFile, opts.historyMaxInputSize);
    }
    repl.commands[getCommandId(repl, 'load')].help = 'Load code from a file into this REPL session';
    return repl;
  }
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwbC5qcyIsInNvdXJjZVJvb3QiOiIuIiwic291cmNlcyI6WyIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7O0FBQUEsSUFBQTs7QUFRQSxFQUFBLEdBQVcsT0FBQSxDQUFRLElBQVI7O0FBQ1gsSUFBQSxHQUFXLE9BQUEsQ0FBUSxNQUFSOztBQUNYLEVBQUEsR0FBVyxPQUFBLENBQVEsSUFBUjs7QUFDWCxRQUFBLEdBQVcsT0FBQSxDQUFRLE1BQVI7O0FBQ1gsTUFBQSxHQUFXLE9BQUEsQ0FBUSxVQUFSOztBQUVYLE1BQTZCLE9BQUEsQ0FBUSxXQUFSLENBQTdCLEVBQUMsaUJBQUQsRUFBUTs7QUFRUixZQUFBLEdBRUk7RUFBQSxNQUFBLEVBQVEsVUFBUjtFQUNBLFdBQUEsRUFBOEQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUE3RCxHQUFBLElBQUksQ0FBQyxJQUFMLENBQVUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUF0QixFQUE0QixpQkFBNUIsQ0FBQSxHQUFBLE1BRGI7RUFFQSxtQkFBQSxFQUFxQixLQUZyQjtFQUlBLENBQUEsSUFBQSxDQUFBLEVBQU0sU0FBQyxLQUFELEVBQVEsT0FBUixFQUFpQixRQUFqQixFQUEyQixFQUEzQjtBQUVGLFFBQUE7SUFBQSxLQUFBLEdBQVEsS0FBSyxDQUFDLE9BQU4sQ0FBYyxTQUFkLEVBQXlCLElBQXpCO0lBR1IsS0FBQSxHQUFRLEtBQUssQ0FBQyxPQUFOLENBQWMsb0JBQWQsRUFBb0MsSUFBcEM7SUFHUixLQUFBLEdBQVEsS0FBSyxDQUFDLE9BQU4sQ0FBYyxtQ0FBZCxFQUFtRCxJQUFuRDtJQUdSLE9BQWtDLE9BQUEsQ0FBUSxTQUFSLENBQWxDLEVBQUMsa0JBQUQsRUFBUSxvQkFBUixFQUFnQixrQkFBaEIsRUFBdUI7QUFFdkI7TUFFSSxNQUFBLEdBQVMsTUFBTSxDQUFDLE1BQVAsQ0FBYyxLQUFkO01BRVQsY0FBQTs7QUFBbUI7YUFBQSx3Q0FBQTs7Y0FBa0MsS0FBTSxDQUFBLENBQUEsQ0FB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QUNQLElBQUEsR0FBTyxRQUFRLENBQUMsS0FBVCxDQUFlLElBQWY7SUFDUCxJQUFzRCxJQUFJLENBQUMsT0FBM0Q7TUFBQSxZQUFBLENBQWEsSUFBSSxDQUFDLE9BQWxCLEVBQTJCLElBQUksQ0FBQyxPQUFoQyxFQUF5QyxTQUF6QyxFQUFBOztJQUNBLElBQUksQ0FBQyxFQUFMLENBQVEsTUFBUixFQUFnQixTQUFBO01BQUcsSUFBZ0MsQ0FBSSxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQTdDO2VBQUEsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFsQixDQUF3QixJQUF4QixFQUFBOztJQUFILENBQWhCO0lBQ0EsbUJBQUEsQ0FBb0IsSUFBcEI7SUFDQSxJQUErRCxJQUFJLENBQUMsV0FBcEU7TUFBQSxVQUFBLENBQVcsSUFBWCxFQUFpQixJQUFJLENBQUMsV0FBdEIsRUFBbUMsSUFBSSxDQUFDLG1CQUF4QyxFQUFBOztJQUVBLElBQUksQ0FBQyxRQUFTLENBQUEsWUFBQSxDQUFhLElBQWIsRUFBbUIsTUFBbkIsQ0FBQSxDQUEyQixDQUFDLElBQTFDLEdBQWlEO1dBQ2pEO0VBakJHLENBQVAiLCJzb3VyY2VzQ29udGVudCI6WyIjIyNcbjAwMDAwMDAwICAgMDAwMDAwMDAgIDAwMDAwMDAwICAgMDAwICAgICAgXG4wMDAgICAwMDAgIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgICAgIFxuMDAwMDAwMCAgICAwMDAwMDAwICAgMDAwMDAwMDAgICAwMDAgICAgICBcbjAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgICAgICAgMDAwICAgICAgXG4wMDAgICAwMDAgIDAwMDAwMDAwICAwMDAgICAgICAgIDAwMDAwMDAgIFxuIyMjXG5cbmZzICAgICAgID0gcmVxdWlyZSAnZnMnXG5wYXRoICAgICA9IHJlcXVpcmUgJ3BhdGgnXG52bSAgICAgICA9IHJlcXVpcmUgJ3ZtJ1xubm9kZVJFUEwgPSByZXF1aXJlICdyZXBsJ1xuS29mZmVlICAgPSByZXF1aXJlICcuL2tvZmZlZSdcblxue21lcmdlLCB1cGRhdGVTeW50YXhFcnJvcn0gPSByZXF1aXJlICcuL2hlbHBlcnMnXG5cbiMgMDAwMDAwMCAgICAwMDAwMDAwMCAgMDAwMDAwMDAgICAwMDAwMDAwICAgMDAwICAgMDAwICAwMDAgICAgICAwMDAwMDAwMDAgICAwMDAwMDAwICBcbiMgMDAwICAgMDAwICAwMDAgICAgICAgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAgICAgICAwMDAgICAgIDAwMCAgICAgICBcbiMgMDAwICAgMDAwICAwMDAwMDAwICAgMDAwMDAwICAgIDAwMDAwMDAwMCAgMDAwICAgMDAwICAwMDAgICAgICAgICAwMDAgICAgIDAwMDAwMDAgICBcbiMgMDAwICAgMDAwICAwMDAgICAgICAgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAgICAgICAwMDAgICAgICAgICAgMDAwICBcbiMgMDAwMDAwMCAgICAwMDAwMDAwMCAgMDAwICAgICAgIDAwMCAgIDAwMCAgIDAwMDAwMDAgICAwMDAwMDAwICAgICAwMDAgICAgIDAwMDAwMDAgICBcblxucmVwbERlZmF1bHRzID1cbiAgICBcbiAgICBwcm9tcHQ6ICdrb2ZmZWU+ICcsXG4gICAgaGlzdG9yeUZpbGU6IHBhdGguam9pbiBwcm9jZXNzLmVudi5IT01FLCAnLmtvZmZlZV9oaXN0b3J5JyBpZiBwcm9jZXNzLmVudi5IT01FXG4gICAgaGlzdG9yeU1heElucHV0U2l6ZTogMTAyNDBcbiAgICBcbiAgICBldmFsOiAoaW5wdXQsIGNvbnRleHQsIGZpbGVuYW1lLCBjYikgLT5cbiAgICAgICAgIyBYWFg6IG11bHRpbGluZSBoYWNrLlxuICAgICAgICBpbnB1dCA9IGlucHV0LnJlcGxhY2UgL1xcdUZGMDAvZywgJ1xcbidcbiAgICAgICAgIyBOb2RlJ3MgUkVQTCBzZW5kcyB0aGUgaW5wdXQgZW5kaW5nIHdpdGggYSBuZXdsaW5lIGFuZCB0aGVuIHdyYXBwZWQgaW5cbiAgICAgICAgIyBwYXJlbnMuIFVud3JhcCBhbGwgdGhhdC5cbiAgICAgICAgaW5wdXQgPSBpbnB1dC5yZXBsYWNlIC9eXFwoKFtcXHNcXFNdKilcXG5cXCkkL20sICckMSdcbiAgICAgICAgIyBOb2RlJ3MgUkVQTCB2Ni45LjErIHNlbmRzIHRoZSBpbnB1dCB3cmFwcGVkIGluIGEgdHJ5L2NhdGNoIHN0YXRlbWVudC5cbiAgICAgICAgIyBVbndyYXAgdGhhdCB0b28uXG4gICAgICAgIGlucHV0ID0gaW5wdXQucmVwbGFjZSAvXlxccyp0cnlcXHMqeyhbXFxzXFxTXSopfVxccypjYXRjaC4qJC9tLCAnJDEnXG5cbiAgICAgICAgIyBSZXF1aXJlIEFTVCBub2RlcyB0byBkbyBzb21lIEFTVCBtYW5pcHVsYXRpb24uXG4gICAgICAgIHtCbG9jaywgQXNzaWduLCBWYWx1ZSwgTGl0ZXJhbH0gPSByZXF1aXJlICcuL25vZGVzJ1xuXG4gICAgICAgIHRyeVxuICAgICAgICAgICAgIyBUb2tlbml6ZSB0aGUgY2xlYW4gaW5wdXQuXG4gICAgICAgICAgICB0b2tlbnMgPSBLb2ZmZWUudG9rZW5zIGlucHV0XG4gICAgICAgICAgICAjIENvbGxlY3QgcmVmZXJlbmNlZCB2YXJpYWJsZSBuYW1lcyBqdXN0IGxpa2UgaW4gYEtvZmZlZS5jb21waWxlYC5cbiAgICAgICAgICAgIHJlZmVyZW5jZWRWYXJzID0gKCB0b2tlblsxXSBmb3IgdG9rZW4gaW4gdG9rZW5zIHdoZW4gdG9rZW5bMF0gaXMgJ0lERU5USUZJRVInIClcbiAgICAgICAgICAgICMgR2VuZXJhdGUgdGhlIEFTVCBvZiB0aGUgdG9rZW5zLlxuICAgICAgICAgICAgYXN0ID0gS29mZmVlLm5vZGVzIHRva2Vuc1xuICAgICAgICAgICAgIyBBZGQgYXNzaWdubWVudCB0byBgX2AgdmFyaWFibGUgdG8gZm9yY2UgdGhlIGlucHV0IHRvIGJlIGFuIGV4cHJlc3Npb24uXG4gICAgICAgICAgICBhc3QgPSBuZXcgQmxvY2sgW1xuICAgICAgICAgICAgICAgIG5ldyBBc3NpZ24gKG5ldyBWYWx1ZSBuZXcgTGl0ZXJhbCAnX18nKSwgYXN0LCAnPSdcbiAgICAgICAgICAgIF1cbiAgICAgICAgICAgIGpzID0gYXN0LmNvbXBpbGUge2JhcmU6IHllcywgbG9jYWxzOiBPYmplY3Qua2V5cyhjb250ZXh0KSwgcmVmZXJlbmNlZFZhcnN9XG4gICAgICAgICAgICBjYiBudWxsLCBydW5JbkNvbnRleHQganMsIGNvbnRleHQsIGZpbGVuYW1lXG4gICAgICAgIGNhdGNoIGVyclxuICAgICAgICAgICAgIyBBU1QncyBgY29tcGlsZWAgZG9lcyBub3QgYWRkIHNvdXJjZSBjb2RlIGluZm9ybWF0aW9uIHRvIHN5bnRheCBlcnJvcnMuXG4gICAgICAgICAgICB1cGRhdGVTeW50YXhFcnJvciBlcnIsIGlucHV0XG4gICAgICAgICAgICBjYiBlcnJcblxucnVuSW5Db250ZXh0ID0gKGpzLCBjb250ZXh0LCBmaWxlbmFtZSkgLT5cbiAgICBpZiBjb250ZXh0IGlzIGdsb2JhbFxuICAgICAgICB2bS5ydW5JblRoaXNDb250ZXh0IGpzLCBmaWxlbmFtZVxuICAgIGVsc2VcbiAgICAgICAgdm0ucnVuSW5Db250ZXh0IGpzLCBjb250ZXh0LCBmaWxlbmFtZVxuXG5hZGRNdWx0aWxpbmVIYW5kbGVyID0gKHJlcGwpIC0+XG4gICAge3JsaSwgaW5wdXRTdHJlYW0sIG91dHB1dFN0cmVhbX0gPSByZXBsXG4gICAgIyBOb2RlIDAuMTEuMTIgY2hhbmdlZCBBUEksIHByb21wdCBpcyBub3cgX3Byb21wdC5cbiAgICBvcmlnUHJvbXB0ID0gcmVwbC5fcHJvbXB0ID8gcmVwbC5wcm9tcHRcblxuICAgIG11bHRpbGluZSA9XG4gICAgICAgIGVuYWJsZWQ6IG9mZlxuICAgICAgICBpbml0aWFsUHJvbXB0OiBvcmlnUHJvbXB0LnJlcGxhY2UgL15bXj4gXSovLCAoeCkgLT4geC5yZXBsYWNlIC8uL2csICctJ1xuICAgICAgICBwcm9tcHQ6IG9yaWdQcm9tcHQucmVwbGFjZSAvXltePiBdKj4/LywgKHgpIC0+IHgucmVwbGFjZSAvLi9nLCAnLidcbiAgICAgICAgYnVmZmVyOiAnJ1xuXG4gICAgIyBQcm94eSBub2RlJ3MgbGluZSBsaXN0ZW5lclxuICAgIG5vZGVMaW5lTGlzdGVuZXIgPSBybGkubGlzdGVuZXJzKCdsaW5lJylbMF1cbiAgICBybGkucmVtb3ZlTGlzdGVuZXIgJ2xpbmUnLCBub2RlTGluZUxpc3RlbmVyXG4gICAgcmxpLm9uICdsaW5lJywgKGNtZCkgLT5cbiAgICAgICAgaWYgbXVsdGlsaW5lLmVuYWJsZWRcbiAgICAgICAgICAgIG11bHRpbGluZS5idWZmZXIgKz0gXCIje2NtZH1cXG5cIlxuICAgICAgICAgICAgcmxpLnNldFByb21wdCBtdWx0aWxpbmUucHJvbXB0XG4gICAgICAgICAgICBybGkucHJvbXB0IHRydWVcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgcmxpLnNldFByb21wdCBvcmlnUHJvbXB0XG4gICAgICAgICAgICBub2RlTGluZUxpc3RlbmVyIGNtZFxuICAgICAgICByZXR1cm5cblxuICAgICMgSGFuZGxlIEN0cmwtdlxuICAgIGlucHV0U3RyZWFtLm9uICdrZXlwcmVzcycsIChjaGFyLCBrZXkpIC0+XG4gICAgICAgIHJldHVybiB1bmxlc3Mga2V5IGFuZCBrZXkuY3RybCBhbmQgbm90IGtleS5tZXRhIGFuZCBub3Qga2V5LnNoaWZ0IGFuZCBrZXkubmFtZSBpcyAndidcbiAgICAgICAgaWYgbXVsdGlsaW5lLmVuYWJsZWRcbiAgICAgICAgICAgICMgYWxsb3cgYXJiaXRyYXJpbHkgc3dpdGNoaW5nIGJldHdlZW4gbW9kZXMgYW55IHRpbWUgYmVmb3JlIG11bHRpcGxlIGxpbmVzIGFyZSBlbnRlcmVkXG4gICAgICAgICAgICB1bmxlc3MgbXVsdGlsaW5lLmJ1ZmZlci5tYXRjaCAvXFxuL1xuICAgICAgICAgICAgICAgIG11bHRpbGluZS5lbmFibGVkID0gbm90IG11bHRpbGluZS5lbmFibGVkXG4gICAgICAgICAgICAgICAgcmxpLnNldFByb21wdCBvcmlnUHJvbXB0XG4gICAgICAgICAgICAgICAgcmxpLnByb21wdCB0cnVlXG4gICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAjIG5vLW9wIHVubGVzcyB0aGUgY3VycmVudCBsaW5lIGlzIGVtcHR5XG4gICAgICAgICAgICByZXR1cm4gaWYgcmxpLmxpbmU/IGFuZCBub3QgcmxpLmxpbmUubWF0Y2ggL15cXHMqJC9cbiAgICAgICAgICAgICMgZXZhbCwgcHJpbnQsIGxvb3BcbiAgICAgICAgICAgIG11bHRpbGluZS5lbmFibGVkID0gbm90IG11bHRpbGluZS5lbmFibGVkXG4gICAgICAgICAgICBybGkubGluZSA9ICcnXG4gICAgICAgICAgICBybGkuY3Vyc29yID0gMFxuICAgICAgICAgICAgcmxpLm91dHB1dC5jdXJzb3JUbyAwXG4gICAgICAgICAgICBybGkub3V0cHV0LmNsZWFyTGluZSAxXG4gICAgICAgICAgICAjIFhYWDogbXVsdGlsaW5lIGhhY2tcbiAgICAgICAgICAgIG11bHRpbGluZS5idWZmZXIgPSBtdWx0aWxpbmUuYnVmZmVyLnJlcGxhY2UgL1xcbi9nLCAnXFx1RkYwMCdcbiAgICAgICAgICAgIHJsaS5lbWl0ICdsaW5lJywgbXVsdGlsaW5lLmJ1ZmZlclxuICAgICAgICAgICAgbXVsdGlsaW5lLmJ1ZmZlciA9ICcnXG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIG11bHRpbGluZS5lbmFibGVkID0gbm90IG11bHRpbGluZS5lbmFibGVkXG4gICAgICAgICAgICBybGkuc2V0UHJvbXB0IG11bHRpbGluZS5pbml0aWFsUHJvbXB0XG4gICAgICAgICAgICBybGkucHJvbXB0IHRydWVcbiAgICAgICAgcmV0dXJuXG5cbiMgU3RvcmUgYW5kIGxvYWQgY29tbWFuZCBoaXN0b3J5IGZyb20gYSBmaWxlXG5hZGRIaXN0b3J5ID0gKHJlcGwsIGZpbGVuYW1lLCBtYXhTaXplKSAtPlxuICAgIGxhc3RMaW5lID0gbnVsbFxuICAgIHRyeVxuICAgICAgICAjIEdldCBmaWxlIGluZm8gYW5kIGF0IG1vc3QgbWF4U2l6ZSBvZiBjb21tYW5kIGhpc3RvcnlcbiAgICAgICAgc3RhdCA9IGZzLnN0YXRTeW5jIGZpbGVuYW1lXG4gICAgICAgIHNpemUgPSBNYXRoLm1pbiBtYXhTaXplLCBzdGF0LnNpemVcbiAgICAgICAgIyBSZWFkIGxhc3QgYHNpemVgIGJ5dGVzIGZyb20gdGhlIGZpbGVcbiAgICAgICAgcmVhZEZkID0gZnMub3BlblN5bmMgZmlsZW5hbWUsICdyJ1xuICAgICAgICBidWZmZXIgPSBCdWZmZXIuYWxsb2Moc2l6ZSlcbiAgICAgICAgZnMucmVhZFN5bmMgcmVhZEZkLCBidWZmZXIsIDAsIHNpemUsIHN0YXQuc2l6ZSAtIHNpemVcbiAgICAgICAgZnMuY2xvc2VTeW5jIHJlYWRGZFxuICAgICAgICAjIFNldCB0aGUgaGlzdG9yeSBvbiB0aGUgaW50ZXJwcmV0ZXJcbiAgICAgICAgcmVwbC5ybGkuaGlzdG9yeSA9IGJ1ZmZlci50b1N0cmluZygpLnNwbGl0KCdcXG4nKS5yZXZlcnNlKClcbiAgICAgICAgIyBJZiB0aGUgaGlzdG9yeSBmaWxlIHdhcyB0cnVuY2F0ZWQgd2Ugc2hvdWxkIHBvcCBvZmYgYSBwb3RlbnRpYWwgcGFydGlhbCBsaW5lXG4gICAgICAgIHJlcGwucmxpLmhpc3RvcnkucG9wKCkgaWYgc3RhdC5zaXplID4gbWF4U2l6ZVxuICAgICAgICAjIFNoaWZ0IG9mZiB0aGUgZmluYWwgYmxhbmsgbmV3bGluZVxuICAgICAgICByZXBsLnJsaS5oaXN0b3J5LnNoaWZ0KCkgaWYgcmVwbC5ybGkuaGlzdG9yeVswXSBpcyAnJ1xuICAgICAgICByZXBsLnJsaS5oaXN0b3J5SW5kZXggPSAtMVxuICAgICAgICBsYXN0TGluZSA9IHJlcGwucmxpLmhpc3RvcnlbMF1cblxuICAgIGZkID0gZnMub3BlblN5bmMgZmlsZW5hbWUsICdhJ1xuXG4gICAgcmVwbC5ybGkuYWRkTGlzdGVuZXIgJ2xpbmUnLCAoY29kZSkgLT5cbiAgICAgICAgaWYgY29kZSBhbmQgY29kZS5sZW5ndGggYW5kIGNvZGUgIT0gJy5oaXN0b3J5JyBhbmQgY29kZSAhPSAnLmV4aXQnIGFuZCBsYXN0TGluZSAhPSBjb2RlXG4gICAgICAgICAgICAjIFNhdmUgdGhlIGxhdGVzdCBjb21tYW5kIGluIHRoZSBmaWxlXG4gICAgICAgICAgICBmcy53cml0ZVN5bmMgZmQsIFwiI3tjb2RlfVxcblwiXG4gICAgICAgICAgICBsYXN0TGluZSA9IGNvZGVcblxuICAgIHJlcGwub24gJ2V4aXQnLCAtPiBmcy5jbG9zZVN5bmMgZmRcblxuICAgIHJlcGwuY29tbWFuZHNbZ2V0Q29tbWFuZElkKHJlcGwsICdoaXN0b3J5JyldID0gIyBBZGQgYSBjb21tYW5kIHRvIHNob3cgdGhlIGhpc3Rvcnkgc3RhY2tcbiAgICAgICAgaGVscDogJ1Nob3cgY29tbWFuZCBoaXN0b3J5J1xuICAgICAgICBhY3Rpb246IC0+XG4gICAgICAgICAgICByZXBsLm91dHB1dFN0cmVhbS53cml0ZSBcIiN7cmVwbC5ybGkuaGlzdG9yeVsuLl0ucmV2ZXJzZSgpLmpvaW4gJ1xcbid9XFxuXCJcbiAgICAgICAgICAgIHJlcGwuZGlzcGxheVByb21wdCgpXG5cbmdldENvbW1hbmRJZCA9IChyZXBsLCBjb21tYW5kTmFtZSkgLT5cbiAgICAjIE5vZGUgMC4xMSBjaGFuZ2VkIEFQSSwgYSBjb21tYW5kIHN1Y2ggYXMgJy5oZWxwJyBpcyBub3cgc3RvcmVkIGFzICdoZWxwJ1xuICAgIGNvbW1hbmRzSGF2ZUxlYWRpbmdEb3QgPSByZXBsLmNvbW1hbmRzWycuaGVscCddP1xuICAgIGlmIGNvbW1hbmRzSGF2ZUxlYWRpbmdEb3QgdGhlbiBcIi4je2NvbW1hbmROYW1lfVwiIGVsc2UgY29tbWFuZE5hbWVcblxubW9kdWxlLmV4cG9ydHMgPVxuICAgIHN0YXJ0OiAob3B0cyA9IHt9KSAtPlxuICAgICAgICBbbWFqb3IsIG1pbm9yLCBidWlsZF0gPSBwcm9jZXNzLnZlcnNpb25zLm5vZGUuc3BsaXQoJy4nKS5tYXAgKG4pIC0+IHBhcnNlSW50KG4sIDEwKVxuXG4gICAgICAgIGlmIG1ham9yIDwgMTBcbiAgICAgICAgICAgIGNvbnNvbGUud2FybiBcIk5vZGUgMTAuMC4wKyByZXF1aXJlZCBmb3Iga29mZmVlIFJFUExcIlxuICAgICAgICAgICAgcHJvY2Vzcy5leGl0IDFcblxuICAgICAgICBLb2ZmZWUucmVnaXN0ZXIoKVxuICAgICAgICBwcm9jZXNzLmFyZ3YgPSBbJ2tvZmZlZSddLmNvbmNhdCBwcm9jZXNzLmFyZ3ZbMi4uXVxuICAgICAgICBvcHRzID0gbWVyZ2UgcmVwbERlZmF1bHRzLCBvcHRzXG4gICAgICAgIHJlcGwgPSBub2RlUkVQTC5zdGFydCBvcHRzXG4gICAgICAgIHJ1bkluQ29udGV4dCBvcHRzLnByZWx1ZGUsIHJlcGwuY29udGV4dCwgJ3ByZWx1ZGUnIGlmIG9wdHMucHJlbHVkZVxuICAgICAgICByZXBsLm9uICdleGl0JywgLT4gcmVwbC5vdXRwdXRTdHJlYW0ud3JpdGUgJ1xcbicgaWYgbm90IHJlcGwucmxpLmNsb3NlZFxuICAgICAgICBhZGRNdWx0aWxpbmVIYW5kbGVyIHJlcGxcbiAgICAgICAgYWRkSGlzdG9yeSByZXBsLCBvcHRzLmhpc3RvcnlGaWxlLCBvcHRzLmhpc3RvcnlNYXhJbnB1dFNpemUgaWYgb3B0cy5oaXN0b3J5RmlsZVxuICAgICAgICAjIEFkYXB0IGhlbHAgaW5oZXJpdGVkIGZyb20gdGhlIG5vZGUgUkVQTFxuICAgICAgICByZXBsLmNvbW1hbmRzW2dldENvbW1hbmRJZChyZXBsLCAnbG9hZCcpXS5oZWxwID0gJ0xvYWQgY29kZSBmcm9tIGEgZmlsZSBpbnRvIHRoaXMgUkVQTCBzZXNzaW9uJ1xuICAgICAgICByZXBsXG4iXX0=
//# sourceURL=../src/repl.coffee