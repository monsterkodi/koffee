// Generated by koffee 0.5.0

/*
 0000000   0000000   0000000   00000000   00000000  
000       000       000   000  000   000  000       
0000000   000       000   000  00000000   0000000   
     000  000       000   000  000        000       
0000000    0000000   0000000   000        00000000
 */
var Scope,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

exports.Scope = Scope = (function() {
    function Scope(parent, expressions, method, referencedVars) {
        var ref, ref1;
        this.parent = parent;
        this.expressions = expressions;
        this.method = method;
        this.referencedVars = referencedVars;
        this.variables = [
            {
                name: 'arguments',
                type: 'arguments'
            }
        ];
        this.positions = {};
        if (!this.parent) {
            this.utilities = {};
        }
        this.root = (ref = (ref1 = this.parent) != null ? ref1.root : void 0) != null ? ref : this;
    }

    Scope.prototype.add = function(name, type, immediate) {
        if (this.shared && !immediate) {
            return this.parent.add(name, type, immediate);
        }
        if (Object.prototype.hasOwnProperty.call(this.positions, name)) {
            return this.variables[this.positions[name]].type = type;
        } else {
            return this.positions[name] = this.variables.push({
                name: name,
                type: type
            }) - 1;
        }
    };

    Scope.prototype.namedMethod = function() {
        var ref;
        if (((ref = this.method) != null ? ref.name : void 0) || !this.parent) {
            return this.method;
        }
        return this.parent.namedMethod();
    };

    Scope.prototype.find = function(name, type) {
        if (type == null) {
            type = 'var';
        }
        if (this.check(name)) {
            return true;
        }
        this.add(name, type);
        return false;
    };

    Scope.prototype.parameter = function(name) {
        if (this.shared && this.parent.check(name, true)) {
            return;
        }
        return this.add(name, 'param');
    };

    Scope.prototype.check = function(name) {
        var ref;
        return !!(this.type(name) || ((ref = this.parent) != null ? ref.check(name) : void 0));
    };

    Scope.prototype.temporary = function(name, index, single) {
        var diff, endCode, letter, newCode, num, startCode;
        if (single == null) {
            single = false;
        }
        if (single) {
            startCode = name.charCodeAt(0);
            endCode = 'z'.charCodeAt(0);
            diff = endCode - startCode;
            newCode = startCode + index % (diff + 1);
            letter = String.fromCharCode(newCode);
            num = Math.floor(index / (diff + 1));
            return "" + letter + (num || '');
        } else {
            return "" + name + (index || '');
        }
    };

    Scope.prototype.type = function(name) {
        var i, len, ref, v;
        ref = this.variables;
        for (i = 0, len = ref.length; i < len; i++) {
            v = ref[i];
            if (v.name === name) {
                return v.type;
            }
        }
        return null;
    };

    Scope.prototype.freeVariable = function(name, options) {
        var index, ref, temp;
        if (options == null) {
            options = {};
        }
        index = 0;
        while (true) {
            temp = this.temporary(name, index, options.single);
            if (!(this.check(temp) || indexOf.call(this.root.referencedVars, temp) >= 0)) {
                break;
            }
            index++;
        }
        if ((ref = options.reserve) != null ? ref : true) {
            this.add(temp, 'var', true);
        }
        return temp;
    };

    Scope.prototype.assign = function(name, value) {
        this.add(name, {
            value: value,
            assigned: true
        }, true);
        return this.hasAssignments = true;
    };

    Scope.prototype.hasDeclarations = function() {
        return !!this.declaredVariables().length;
    };

    Scope.prototype.declaredVariables = function() {
        var v;
        return ((function() {
            var i, len, ref, results;
            ref = this.variables;
            results = [];
            for (i = 0, len = ref.length; i < len; i++) {
                v = ref[i];
                if (v.type === 'var') {
                    results.push(v.name);
                }
            }
            return results;
        }).call(this)).sort();
    };

    Scope.prototype.assignedVariables = function() {
        var i, len, ref, results, v;
        ref = this.variables;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
            v = ref[i];
            if (v.type.assigned) {
                results.push(v.name + " = " + v.type.value);
            }
        }
        return results;
    };

    return Scope;

})();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NvcGUuanMiLCJzb3VyY2VSb290IjoiLiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7Ozs7QUFBQSxJQUFBLEtBQUE7SUFBQTs7QUFlQSxPQUFPLENBQUMsS0FBUixHQUFzQjtJQVFmLGVBQUMsTUFBRCxFQUFVLFdBQVYsRUFBd0IsTUFBeEIsRUFBaUMsY0FBakM7QUFDQyxZQUFBO1FBREEsSUFBQyxDQUFBLFNBQUQ7UUFBUyxJQUFDLENBQUEsY0FBRDtRQUFjLElBQUMsQ0FBQSxTQUFEO1FBQVMsSUFBQyxDQUFBLGlCQUFEO1FBQ2hDLElBQUMsQ0FBQSxTQUFELEdBQWE7WUFBQztnQkFBQyxJQUFBLEVBQU0sV0FBUDtnQkFBb0IsSUFBQSxFQUFNLFdBQTFCO2FBQUQ7O1FBQ2IsSUFBQyxDQUFBLFNBQUQsR0FBYTtRQUNiLElBQUEsQ0FBdUIsSUFBQyxDQUFBLE1BQXhCO1lBQUEsSUFBQyxDQUFBLFNBQUQsR0FBYSxHQUFiOztRQUlBLElBQUMsQ0FBQSxJQUFELDZFQUF3QjtJQVB6Qjs7b0JBV0gsR0FBQSxHQUFLLFNBQUMsSUFBRCxFQUFPLElBQVAsRUFBYSxTQUFiO1FBQ0QsSUFBNEMsSUFBQyxDQUFBLE1BQUQsSUFBWSxDQUFJLFNBQTVEO0FBQUEsbUJBQU8sSUFBQyxDQUFBLE1BQU0sQ0FBQyxHQUFSLENBQVksSUFBWixFQUFrQixJQUFsQixFQUF3QixTQUF4QixFQUFQOztRQUNBLElBQUcsTUFBTSxDQUFBLFNBQUUsQ0FBQSxjQUFjLENBQUMsSUFBdkIsQ0FBNEIsSUFBQyxDQUFBLFNBQTdCLEVBQXdDLElBQXhDLENBQUg7bUJBQ0ksSUFBQyxDQUFBLFNBQVUsQ0FBQSxJQUFDLENBQUEsU0FBVSxDQUFBLElBQUEsQ0FBWCxDQUFpQixDQUFDLElBQTdCLEdBQW9DLEtBRHhDO1NBQUEsTUFBQTttQkFHSSxJQUFDLENBQUEsU0FBVSxDQUFBLElBQUEsQ0FBWCxHQUFtQixJQUFDLENBQUEsU0FBUyxDQUFDLElBQVgs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QUMsQ0FBQyxJQUFDLENBQUEsaUJBQUQsQ0FBQSxDQUFvQixDQUFDO0lBRFY7O29CQUtqQixpQkFBQSxHQUFtQixTQUFBO0FBQ2YsWUFBQTtlQUFBOztBQUFDO0FBQUE7aUJBQUEscUNBQUE7O29CQUFnQyxDQUFDLENBQUMsSUFBRixLQUFVO2lDQUExQyxDQUFDLENBQUM7O0FBQUY7O3FCQUFELENBQWlELENBQUMsSUFBbEQsQ0FBQTtJQURlOztvQkFNbkIsaUJBQUEsR0FBbUIsU0FBQTtBQUNmLFlBQUE7QUFBQTtBQUFBO2FBQUEscUNBQUE7O2dCQUF1RCxDQUFDLENBQUMsSUFBSSxDQUFDOzZCQUEzRCxDQUFDLENBQUMsSUFBSCxHQUFRLEtBQVIsR0FBYSxDQUFDLENBQUMsSUFBSSxDQUFDOztBQUF0Qjs7SUFEZSIsInNvdXJjZXNDb250ZW50IjpbIiMjI1xuIDAwMDAwMDAgICAwMDAwMDAwICAgMDAwMDAwMCAgIDAwMDAwMDAwICAgMDAwMDAwMDAgIFxuMDAwICAgICAgIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICAgIFxuMDAwMDAwMCAgIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMDAwMDAwICAgMDAwMDAwMCAgIFxuICAgICAwMDAgIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgICAgICAgMDAwICAgICAgIFxuMDAwMDAwMCAgICAwMDAwMDAwICAgMDAwMDAwMCAgIDAwMCAgICAgICAgMDAwMDAwMDAgIFxuIyMjXG5cbiMgVGhlICoqU2NvcGUqKiBjbGFzcyByZWd1bGF0ZXMgbGV4aWNhbCBzY29waW5nIHdpdGhpbiBLb2ZmZWUuIEFzIHlvdVxuIyBnZW5lcmF0ZSBjb2RlLCB5b3UgY3JlYXRlIGEgdHJlZSBvZiBzY29wZXMgaW4gdGhlIHNhbWUgc2hhcGUgYXMgdGhlIG5lc3RlZFxuIyBmdW5jdGlvbiBib2RpZXMuIEVhY2ggc2NvcGUga25vd3MgYWJvdXQgdGhlIHZhcmlhYmxlcyBkZWNsYXJlZCB3aXRoaW4gaXQsXG4jIGFuZCBoYXMgYSByZWZlcmVuY2UgdG8gaXRzIHBhcmVudCBlbmNsb3Npbmcgc2NvcGUuIEluIHRoaXMgd2F5LCB3ZSBrbm93IHdoaWNoXG4jIHZhcmlhYmxlcyBhcmUgbmV3IGFuZCBuZWVkIHRvIGJlIGRlY2xhcmVkIHdpdGggYHZhcmAsIGFuZCB3aGljaCBhcmUgc2hhcmVkXG4jIHdpdGggZXh0ZXJuYWwgc2NvcGVzLlxuXG5leHBvcnRzLlNjb3BlID0gY2xhc3MgU2NvcGVcblxuICAgICMgSW5pdGlhbGl6ZSBhIHNjb3BlIHdpdGggaXRzIHBhcmVudCwgZm9yIGxvb2t1cHMgdXAgdGhlIGNoYWluLFxuICAgICMgYXMgd2VsbCBhcyBhIHJlZmVyZW5jZSB0byB0aGUgKipCbG9jayoqIG5vZGUgaXQgYmVsb25ncyB0bywgd2hpY2ggaXNcbiAgICAjIHdoZXJlIGl0IHNob3VsZCBkZWNsYXJlIGl0cyB2YXJpYWJsZXMsIGEgcmVmZXJlbmNlIHRvIHRoZSBmdW5jdGlvbiB0aGF0XG4gICAgIyBpdCBiZWxvbmdzIHRvLCBhbmQgYSBsaXN0IG9mIHZhcmlhYmxlcyByZWZlcmVuY2VkIGluIHRoZSBzb3VyY2UgY29kZVxuICAgICMgYW5kIHRoZXJlZm9yZSBzaG91bGQgYmUgYXZvaWRlZCB3aGVuIGdlbmVyYXRpbmcgdmFyaWFibGVzLlxuICAgIFxuICAgIEA6IChAcGFyZW50LCBAZXhwcmVzc2lvbnMsIEBtZXRob2QsIEByZWZlcmVuY2VkVmFycykgLT5cbiAgICAgICAgQHZhcmlhYmxlcyA9IFt7bmFtZTogJ2FyZ3VtZW50cycsIHR5cGU6ICdhcmd1bWVudHMnfV1cbiAgICAgICAgQHBvc2l0aW9ucyA9IHt9XG4gICAgICAgIEB1dGlsaXRpZXMgPSB7fSB1bmxlc3MgQHBhcmVudFxuXG4gICAgICAgICMgVGhlIGBAcm9vdGAgaXMgdGhlIHRvcC1sZXZlbCAqKlNjb3BlKiogb2JqZWN0IGZvciBhIGdpdmVuIGZpbGUuXG5cbiAgICAgICAgQHJvb3QgPSBAcGFyZW50Py5yb290ID8gdGhpc1xuXG4gICAgIyBBZGRzIGEgbmV3IHZhcmlhYmxlIG9yIG92ZXJyaWRlcyBhbiBleGlzdGluZyBvbmUuXG5cbiAgICBhZGQ6IChuYW1lLCB0eXBlLCBpbW1lZGlhdGUpIC0+XG4gICAgICAgIHJldHVybiBAcGFyZW50LmFkZCBuYW1lLCB0eXBlLCBpbW1lZGlhdGUgaWYgQHNoYXJlZCBhbmQgbm90IGltbWVkaWF0ZVxuICAgICAgICBpZiBPYmplY3Q6Omhhc093blByb3BlcnR5LmNhbGwgQHBvc2l0aW9ucywgbmFtZVxuICAgICAgICAgICAgQHZhcmlhYmxlc1tAcG9zaXRpb25zW25hbWVdXS50eXBlID0gdHlwZVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICBAcG9zaXRpb25zW25hbWVdID0gQHZhcmlhYmxlcy5wdXNoKHtuYW1lLCB0eXBlfSkgLSAxXG5cbiAgICAjIFdoZW4gYHN1cGVyYCBpcyBjYWxsZWQsIHdlIG5lZWQgdG8gZmluZCB0aGUgbmFtZSBvZiB0aGUgY3VycmVudCBtZXRob2Qgd2UncmVcbiAgICAjIGluLCBzbyB0aGF0IHdlIGtub3cgaG93IHRvIGludm9rZSB0aGUgc2FtZSBtZXRob2Qgb2YgdGhlIHBhcmVudCBjbGFzcy4gVGhpc1xuICAgICMgY2FuIGdldCBjb21wbGljYXRlZCBpZiBzdXBlciBpcyBiZWluZyBjYWxsZWQgZnJvbSBhbiBpbm5lciBmdW5jdGlvbi5cbiAgICAjIGBuYW1lZE1ldGhvZGAgd2lsbCB3YWxrIHVwIHRoZSBzY29wZSB0cmVlIHVudGlsIGl0IGVpdGhlciBmaW5kcyB0aGUgZmlyc3RcbiAgICAjIGZ1bmN0aW9uIG9iamVjdCB0aGF0IGhhcyBhIG5hbWUgZmlsbGVkIGluLCBvciBib3R0b21zIG91dC5cblxuICAgIG5hbWVkTWV0aG9kOiAtPlxuICAgICAgICByZXR1cm4gQG1ldGhvZCBpZiBAbWV0aG9kPy5uYW1lIG9yICFAcGFyZW50XG4gICAgICAgIEBwYXJlbnQubmFtZWRNZXRob2QoKVxuXG4gICAgIyBMb29rIHVwIGEgdmFyaWFibGUgbmFtZSBpbiBsZXhpY2FsIHNjb3BlLCBhbmQgZGVjbGFyZSBpdCBpZiBpdCBkb2VzIG5vdCBhbHJlYWR5IGV4aXN0LlxuXG4gICAgZmluZDogKG5hbWUsIHR5cGUgPSAndmFyJykgLT5cbiAgICAgICAgcmV0dXJuIHllcyBpZiBAY2hlY2sgbmFtZVxuICAgICAgICBAYWRkIG5hbWUsIHR5cGVcbiAgICAgICAgbm9cblxuICAgICMgUmVzZXJ2ZSBhIHZhcmlhYmxlIG5hbWUgYXMgb3JpZ2luYXRpbmcgZnJvbSBhIGZ1bmN0aW9uIHBhcmFtZXRlciBmb3IgdGhpcyBzY29wZS4gXG4gICAgIyBObyBgdmFyYCByZXF1aXJlZCBmb3IgaW50ZXJuYWwgcmVmZXJlbmNlcy5cblxuICAgIHBhcmFtZXRlcjogKG5hbWUpIC0+XG4gICAgICAgIHJldHVybiBpZiBAc2hhcmVkIGFuZCBAcGFyZW50LmNoZWNrIG5hbWUsIHllc1xuICAgICAgICBAYWRkIG5hbWUsICdwYXJhbSdcblxuICAgICMgSnVzdCBjaGVjayB0byBzZWUgaWYgYSB2YXJpYWJsZSBoYXMgYWxyZWFkeSBiZWVuIGRlY2xhcmVkLCB3aXRob3V0IHJlc2VydmluZywgd2Fsa3MgdXAgdG8gdGhlIHJvb3Qgc2NvcGUuXG5cbiAgICBjaGVjazogKG5hbWUpIC0+ICEhKEB0eXBlKG5hbWUpIG9yIEBwYXJlbnQ/LmNoZWNrKG5hbWUpKVxuXG4gICAgIyBHZW5lcmF0ZSBhIHRlbXBvcmFyeSB2YXJpYWJsZSBuYW1lIGF0IHRoZSBnaXZlbiBpbmRleC5cblxuICAgIHRlbXBvcmFyeTogKG5hbWUsIGluZGV4LCBzaW5nbGU9ZmFsc2UpIC0+XG4gICAgICAgIGlmIHNpbmdsZVxuICAgICAgICAgICAgc3RhcnRDb2RlID0gbmFtZS5jaGFyQ29kZUF0KDApXG4gICAgICAgICAgICBlbmRDb2RlID0gJ3onLmNoYXJDb2RlQXQoMClcbiAgICAgICAgICAgIGRpZmYgPSBlbmRDb2RlIC0gc3RhcnRDb2RlXG4gICAgICAgICAgICBuZXdDb2RlID0gc3RhcnRDb2RlICsgaW5kZXggJSAoZGlmZiArIDEpXG4gICAgICAgICAgICBsZXR0ZXIgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKG5ld0NvZGUpXG4gICAgICAgICAgICBudW0gPSBpbmRleCAvLyAoZGlmZiArIDEpXG4gICAgICAgICAgICBcIiN7bGV0dGVyfSN7bnVtIG9yICcnfVwiXG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIFwiI3tuYW1lfSN7aW5kZXggb3IgJyd9XCJcblxuICAgICMgR2V0cyB0aGUgdHlwZSBvZiBhIHZhcmlhYmxlLlxuXG4gICAgdHlwZTogKG5hbWUpIC0+XG4gICAgICAgIHJldHVybiB2LnR5cGUgZm9yIHYgaW4gQHZhcmlhYmxlcyB3aGVuIHYubmFtZSBpcyBuYW1lXG4gICAgICAgIG51bGxcblxuICAgICMgSWYgd2UgbmVlZCB0byBzdG9yZSBhbiBpbnRlcm1lZGlhdGUgcmVzdWx0LCBmaW5kIGFuIGF2YWlsYWJsZSBuYW1lIGZvciBhXG4gICAgIyBjb21waWxlci1nZW5lcmF0ZWQgdmFyaWFibGUuIGBfdmFyYCwgYF92YXIyYCwgYW5kIHNvIG9uLi4uXG5cbiAgICBmcmVlVmFyaWFibGU6IChuYW1lLCBvcHRpb25zPXt9KSAtPlxuICAgICAgICBpbmRleCA9IDBcbiAgICAgICAgbG9vcFxuICAgICAgICAgICAgdGVtcCA9IEB0ZW1wb3JhcnkgbmFtZSwgaW5kZXgsIG9wdGlvbnMuc2luZ2xlXG4gICAgICAgICAgICBicmVhayB1bmxlc3MgQGNoZWNrKHRlbXApIG9yIHRlbXAgaW4gQHJvb3QucmVmZXJlbmNlZFZhcnNcbiAgICAgICAgICAgIGluZGV4KytcbiAgICAgICAgQGFkZCB0ZW1wLCAndmFyJywgeWVzIGlmIG9wdGlvbnMucmVzZXJ2ZSA/IHRydWVcbiAgICAgICAgdGVtcFxuXG4gICAgIyBFbnN1cmUgdGhhdCBhbiBhc3NpZ25tZW50IGlzIG1hZGUgYXQgdGhlIHRvcCBvZiB0aGlzIHNjb3BlXG4gICAgIyAob3IgYXQgdGhlIHRvcC1sZXZlbCBzY29wZSwgaWYgcmVxdWVzdGVkKS5cblxuICAgIGFzc2lnbjogKG5hbWUsIHZhbHVlKSAtPlxuICAgICAgICBAYWRkIG5hbWUsIHt2YWx1ZSwgYXNzaWduZWQ6IHllc30sIHllc1xuICAgICAgICBAaGFzQXNzaWdubWVudHMgPSB5ZXNcblxuICAgICMgRG9lcyB0aGlzIHNjb3BlIGhhdmUgYW55IGRlY2xhcmVkIHZhcmlhYmxlcz9cblxuICAgIGhhc0RlY2xhcmF0aW9uczogLT5cbiAgICAgICAgISFAZGVjbGFyZWRWYXJpYWJsZXMoKS5sZW5ndGhcblxuICAgICMgUmV0dXJuIHRoZSBsaXN0IG9mIHZhcmlhYmxlcyBmaXJzdCBkZWNsYXJlZCBpbiB0aGlzIHNjb3BlLlxuXG4gICAgZGVjbGFyZWRWYXJpYWJsZXM6IC0+XG4gICAgICAgICh2Lm5hbWUgZm9yIHYgaW4gQHZhcmlhYmxlcyB3aGVuIHYudHlwZSBpcyAndmFyJykuc29ydCgpXG5cbiAgICAjIFJldHVybiB0aGUgbGlzdCBvZiBhc3NpZ25tZW50cyB0aGF0IGFyZSBzdXBwb3NlZCB0byBiZSBtYWRlIGF0IHRoZSB0b3BcbiAgICAjIG9mIHRoaXMgc2NvcGUuXG5cbiAgICBhc3NpZ25lZFZhcmlhYmxlczogLT5cbiAgICAgICAgXCIje3YubmFtZX0gPSAje3YudHlwZS52YWx1ZX1cIiBmb3IgdiBpbiBAdmFyaWFibGVzIHdoZW4gdi50eXBlLmFzc2lnbmVkXG4iXX0=
//# sourceURL=../coffee/scope.coffee