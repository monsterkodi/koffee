// Generated by koffee 0.4.0

/*
000   000   0000000   0000000    00000000   0000000  
0000  000  000   000  000   000  000       000       
000 0 000  000   000  000   000  0000000   0000000   
000  0000  000   000  000   000  000            000  
000   000   0000000   0000000    00000000  0000000
 */
var Access, Arr, Assign, Base, Block, BooleanLiteral, Call, Class, Code, CodeFragment, Comment, Existence, Expansion, ExportAllDeclaration, ExportDeclaration, ExportDefaultDeclaration, ExportNamedDeclaration, ExportSpecifier, ExportSpecifierList, Extends, For, IdentifierLiteral, If, ImportClause, ImportDeclaration, ImportDefaultSpecifier, ImportNamespaceSpecifier, ImportSpecifier, ImportSpecifierList, In, Index, InfinityLiteral, JS_FORBIDDEN, LEVEL_ACCESS, LEVEL_COND, LEVEL_LIST, LEVEL_OP, LEVEL_PAREN, LEVEL_TOP, Literal, ModuleDeclaration, ModuleSpecifier, ModuleSpecifierList, NEGATE, NO, NaNLiteral, NullLiteral, NumberLiteral, Obj, Op, Param, Parens, PassthroughLiteral, PropertyName, Range, RegexLiteral, RegexWithInterpolations, Return, SIMPLENUM, Scope, Slice, Splat, StatementLiteral, StringLiteral, StringWithInterpolations, SuperCall, Switch, TAB, THIS, TaggedTemplateCall, ThisLiteral, Throw, Try, UTILITIES, UndefinedLiteral, Value, While, YES, YieldReturn, addLocationDataFn, compact, del, ends, extend, flatten, fragmentsToText, isComplexOrAssignable, isLiteralArguments, isLiteralThis, isUnassignable, locationDataToString, log, merge, multident, ref1, ref2, some, starts, throwSyntaxError, unfoldSoak, utility,
    extend1 = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    slice = [].slice;

Error.stackTraceLimit = 2e308;

log = console.log;

Scope = require('./scope').Scope;

ref1 = require('./lexer'), isUnassignable = ref1.isUnassignable, JS_FORBIDDEN = ref1.JS_FORBIDDEN;

ref2 = require('./helpers'), compact = ref2.compact, flatten = ref2.flatten, extend = ref2.extend, merge = ref2.merge, del = ref2.del, starts = ref2.starts, ends = ref2.ends, some = ref2.some, addLocationDataFn = ref2.addLocationDataFn, locationDataToString = ref2.locationDataToString, throwSyntaxError = ref2.throwSyntaxError;

exports.extend = extend;

exports.addLocationDataFn = addLocationDataFn;

YES = function() {
    return true;
};

NO = function() {
    return false;
};

THIS = function() {
    return this;
};

NEGATE = function() {
    this.negated = !this.negated;
    return this;
};

exports.CodeFragment = CodeFragment = (function() {
    function CodeFragment(parent, code) {
        var ref3;
        this.code = "" + code;
        this.locationData = parent != null ? parent.locationData : void 0;
        this.type = (parent != null ? (ref3 = parent.constructor) != null ? ref3.name : void 0 : void 0) || 'unknown';
    }

    CodeFragment.prototype.toString = function() {
        return "" + this.code + (this.locationData ? ": " + locationDataToString(this.locationData) : '');
    };

    return CodeFragment;

})();

fragmentsToText = function(fragments) {
    var fragment;
    return ((function() {
        var j, len1, results;
        results = [];
        for (j = 0, len1 = fragments.length; j < len1; j++) {
            fragment = fragments[j];
            results.push(fragment.code);
        }
        return results;
    })()).join('');
};

exports.Base = Base = (function() {
    function Base() {}

    Base.prototype.compile = function(o, lvl) {
        return fragmentsToText(this.compileToFragments(o, lvl));
    };

    Base.prototype.compileToFragments = function(o, lvl) {
        var node;
        o = extend({}, o);
        if (lvl) {
            o.level = lvl;
        }
        node = this.unfoldSoak(o) || this;
        node.tab = o.indent;
        if (o.level === LEVEL_TOP || !node.isStatement(o)) {
            return node.compileNode(o);
        } else {
            return node.compileClosure(o);
        }
    };

    Base.prototype.compileClosure = function(o) {
        var args, argumentsNode, func, jumpNode, meth, parts, ref3;
        if (jumpNode = this.jumps()) {
            jumpNode.error('cannot use a pure statement in an expression');
        }
        o.sharedScope = true;
        func = new Code([], Block.wrap([this]));
        args = [];
        if ((argumentsNode = this.contains(isLiteralArguments)) || this.contains(isLiteralThis)) {
            args = [new ThisLiteral];
            if (argumentsNode) {
                meth = 'apply';
                args.push(new IdentifierLiteral('arguments'));
            } else {
                meth = 'call';
            }
            func = new Value(func, [new Access(new PropertyName(meth))]);
        }
        parts = (new Call(func, args)).compileNode(o);
        if (func.isGenerator || ((ref3 = func.base) != null ? ref3.isGenerator : void 0)) {
            parts.unshift(this.makeCode("(yield* "));
            parts.push(this.makeCode(")"));
        }
        return parts;
    };

    Base.prototype.cache = function(o, level, isComplex) {
        var complex, ref, sub;
        complex = isComplex != null ? isComplex(this) : this.isComplex();
        if (complex) {
            ref = new IdentifierLiteral(o.scope.freeVariable('ref'));
            sub = new Assign(ref, this);
            if (level) {
                return [sub.compileToFragments(o, level), [this.makeCode(ref.value)]];
            } else {
                return [sub, ref];
            }
        } else {
            ref = level ? this.compileToFragments(o, level) : this;
            return [ref, ref];
        }
    };

    Base.prototype.cacheToCodeFragments = function(cacheValues) {
        return [fragmentsToText(cacheValues[0]), fragmentsToText(cacheValues[1])];
    };

    Base.prototype.makeReturn = function(res) {
        var me;
        me = this.unwrapAll();
        if (res) {
            return new Call(new Literal(res + ".push"), [me]);
        } else {
            return new Return(me);
        }
    };

    Base.prototype.contains = function(pred) {
        var node;
        node = void 0;
        this.traverseChildren(false, function(n) {
            if (pred(n)) {
                node = n;
                return false;
            }
        });
        return node;
    };

    Base.prototype.lastNonComment = function(list) {
        var i;
        i = list.length;
        while (i--) {
            if (!(list[i] instanceof Comment)) {
                return list[i];
            }
        }
        return null;
    };

    Base.prototype.toString = function(idt, name) {
        var tree;
        if (idt == null) {
            idt = '';
        }
        if (name == null) {
            name = this.constructor.name;
        }
        tree = '\n' + idt + name;
        if (this.soak) {
            tree += '?';
        }
        this.eachChild(function(node) {
            return tree += node.toString(idt + TAB);
        });
        return tree;
    };

    Base.prototype.eachChild = function(func) {
        var attr, child, j, k, len1, len2, ref3, ref4;
        if (!this.children) {
            return this;
        }
        ref3 = this.children;
        for (j = 0, len1 = ref3.length; j < len1; j++) {
            attr = ref3[j];
            if (this[attr]) {
                ref4 = flatten([this[attr]]);
                for (k = 0, len2 = ref4.length; k < len2; k++) {
                    child = ref4[k];
                    if (func(child) === false) {
                        return this;
                    }
                }
            }
        }
        return this;
    };

    Base.prototype.traverseChildren = function(crossScope, func) {
        return this.eachChild(function(child) {
            var recur;
            recur = func(child);
            if (recur !== false) {
                return child.traverseChildren(crossScope, func);
            }
        });
    };

    Base.prototype.invert = function() {
        return new Op('!', this);
    };

    Base.prototype.unwrapAll = function() {
        var node;
        node = this;
        while (node !== (node = node.unwrap())) {
            continue;
        }
        return node;
    };

    Base.prototype.children = [];

    Base.prototype.isStatement = NO;

    Base.prototype.jumps = NO;

    Base.prototype.isComplex = YES;

    Base.prototype.isChainable = NO;

    Base.prototype.isAssignable = NO;

    Base.prototype.isNumber = NO;

    Base.prototype.unwrap = THIS;

    Base.prototype.unfoldSoak = NO;

    Base.prototype.assigns = NO;

    Base.prototype.updateLocationDataIfMissing = function(locationData) {
        if (this.locationData) {
            return this;
        }
        this.locationData = locationData;
        return this.eachChild(function(child) {
            return child.updateLocationDataIfMissing(locationData);
        });
    };

    Base.prototype.error = function(message) {
        return throwSyntaxError(message, this.locationData);
    };

    Base.prototype.makeCode = function(code) {
        return new CodeFragment(this, code);
    };

    Base.prototype.wrapInBraces = function(fragments) {
        return [].concat(this.makeCode('('), fragments, this.makeCode(')'));
    };

    Base.prototype.joinFragmentArrays = function(fragmentsList, joinStr) {
        var answer, fragments, i, j, len1;
        answer = [];
        for (i = j = 0, len1 = fragmentsList.length; j < len1; i = ++j) {
            fragments = fragmentsList[i];
            if (i) {
                answer.push(this.makeCode(joinStr));
            }
            answer = answer.concat(fragments);
        }
        return answer;
    };

    return Base;

})();

exports.Block = Block = (function(superClass1) {
    extend1(Block, superClass1);

    function Block(nodes) {
        this.expressions = compact(flatten(nodes || []));
    }

    Block.prototype.children = ['expressions'];

    Block.prototype.push = function(node) {
        this.expressions.push(node);
        return this;
    };

    Block.prototype.pop = function() {
        return this.expressions.pop();
    };

    Block.prototype.unshift = function(node) {
        this.expressions.unshift(node);
        return this;
    };

    Block.prototype.unwrap = function() {
        if (this.expressions.length === 1) {
            return this.expressions[0];
        } else {
            return this;
        }
    };

    Block.prototype.isEmpty = function() {
        return !this.expressions.length;
    };

    Block.prototype.isStatement = function(o) {
        var exp, j, len1, ref3;
        ref3 = this.expressions;
        for (j = 0, len1 = ref3.length; j < len1; j++) {
            exp = ref3[j];
            if (exp.isStatement(o)) {
                return true;
            }
        }
        return false;
    };

    Block.prototype.jumps = function(o) {
        var exp, j, jumpNode, len1, ref3;
        ref3 = this.expressions;
        for (j = 0, len1 = ref3.length; j < len1; j++) {
            exp = ref3[j];
            if (jumpNode = exp.jumps(o)) {
                return jumpNode;
            }
        }
    };

    Block.prototype.makeReturn = function(res) {
        var expr, len;
        len = this.expressions.length;
        while (len--) {
            expr = this.expressions[len];
            if (!(expr instanceof Comment)) {
                this.expressions[len] = expr.makeReturn(res);
                if (expr instanceof Return && !expr.expression) {
                    this.expressions.splice(len, 1);
                }
                break;
            }
        }
        return this;
    };

    Block.prototype.compileToFragments = function(o, level) {
        if (o == null) {
            o = {};
        }
        if (o.scope) {
            return Block.__super__.compileToFragments.call(this, o, level);
        } else {
            return this.compileRoot(o);
        }
    };

    Block.prototype.compileNode = function(o) {
        var answer, compiledNodes, fragments, index, j, len1, node, ref3, top;
        this.tab = o.indent;
        top = o.level === LEVEL_TOP;
        compiledNodes = [];
        ref3 = this.expressions;
        for (index = j = 0, len1 = ref3.length; j < len1; index = ++j) {
            node = ref3[index];
            node = node.unwrapAll();
            node = node.unfoldSoak(o) || node;
            if (node instanceof Block) {
                compiledNodes.push(node.compileNode(o));
            } else if (top) {
                node.front = true;
                fragments = node.compileToFragments(o);
                if (!node.isStatement(o)) {
                    fragments.unshift(this.makeCode("" + this.tab));
                    fragments.push(this.makeCode(";"));
                }
                compiledNodes.push(fragments);
            } else {
                compiledNodes.push(node.compileToFragments(o, LEVEL_LIST));
            }
        }
        if (top) {
            if (this.spaced) {
                return [].concat(this.joinFragmentArrays(compiledNodes, '\n\n'), this.makeCode("\n"));
            } else {
                return this.joinFragmentArrays(compiledNodes, '\n');
            }
        }
        if (compiledNodes.length) {
            answer = this.joinFragmentArrays(compiledNodes, ', ');
        } else {
            answer = [this.makeCode("void 0")];
        }
        if (compiledNodes.length > 1 && o.level >= LEVEL_LIST) {
            return this.wrapInBraces(answer);
        } else {
            return answer;
        }
    };

    Block.prototype.compileRoot = function(o) {
        var exp, fragments, i, j, len1, name, prelude, preludeExps, ref3, ref4, rest;
        o.indent = o.bare ? '' : TAB;
        o.level = LEVEL_TOP;
        this.spaced = true;
        o.scope = new Scope(null, this, null, (ref3 = o.referencedVars) != null ? ref3 : []);
        ref4 = o.locals || [];
        for (j = 0, len1 = ref4.length; j < len1; j++) {
            name = ref4[j];
            o.scope.parameter(name);
        }
        prelude = [];
        if (!o.bare) {
            preludeExps = (function() {
                var k, len2, ref5, results;
                ref5 = this.expressions;
                results = [];
                for (i = k = 0, len2 = ref5.length; k < len2; i = ++k) {
                    exp = ref5[i];
                    if (!(exp.unwrap() instanceof Comment)) {
                        break;
                    }
                    results.push(exp);
                }
                return results;
            }).call(this);
            rest = this.expressions.slice(preludeExps.length);
            this.expressions = preludeExps;
            if (preludeExps.length) {
                prelude = this.compileNode(merge(o, {
                    indent: ''
                }));
                prelude.push(this.makeCode("\n"));
            }
            this.expressions = rest;
        }
        fragments = this.compileWithDeclarations(o);
        if (o.bare) {
            return fragments;
        }
        return [].concat(prelude, this.makeCode("(function() {\n"), fragments, this.makeCode("\n}).call(this);\n"));
    };

    Block.prototype.compileWithDeclarations = function(o) {
        var assigns, declars, exp, fragments, i, j, len1, post, ref3, ref4, ref5, rest, scope, spaced;
        fragments = [];
        post = [];
        ref3 = this.expressions;
        for (i = j = 0, len1 = ref3.length; j < len1; i = ++j) {
            exp = ref3[i];
            exp = exp.unwrap();
            if (!(exp instanceof Comment || exp instanceof Literal)) {
                break;
            }
        }
        o = merge(o, {
            level: LEVEL_TOP
        });
        if (i) {
            rest = this.expressions.splice(i, 9e9);
            ref4 = [this.spaced, false], spaced = ref4[0], this.spaced = ref4[1];
            ref5 = [this.compileNode(o), spaced], fragments = ref5[0], this.spaced = ref5[1];
            this.expressions = rest;
        }
        post = this.compileNode(o);
        scope = o.scope;
        if (scope.expressions === this) {
            declars = o.scope.hasDeclarations();
            assigns = scope.hasAssignments;
            if (declars || assigns) {
                if (i) {
                    fragments.push(this.makeCode('\n'));
                }
                fragments.push(this.makeCode(this.tab + "var "));
                if (declars) {
                    fragments.push(this.makeCode(scope.declaredVariables().join(', ')));
                }
                if (assigns) {
                    if (declars) {
                        fragments.push(this.makeCode(",\n" + (this.tab + TAB)));
                    }
                    fragments.push(this.makeCode(scope.assignedVariables().join(",\n" + (this.tab + TAB))));
                }
                fragments.push(this.makeCode(";\n" + (this.spaced ? '\n' : '')));
            } else if (fragments.length && post.length) {
                fragments.push(this.makeCode("\n"));
            }
        }
        return fragments.concat(post);
    };

    Block.wrap = function(nodes) {
        if (nodes.length === 1 && nodes[0] instanceof Block) {
            return nodes[0];
        }
        return new Block(nodes);
    };

    return Block;

})(Base);

exports.Literal = Literal = (function(superClass1) {
    extend1(Literal, superClass1);

    function Literal(value1) {
        this.value = value1;
    }

    Literal.prototype.isComplex = NO;

    Literal.prototype.assigns = function(name) {
        return name === this.value;
    };

    Literal.prototype.compileNode = function(o) {
        return [this.makeCode(this.value)];
    };

    Literal.prototype.toString = function() {
        return " " + (this.isStatement() ? Literal.__super__.toString.apply(this, arguments) : this.constructor.name) + ": " + this.value;
    };

    return Literal;

})(Base);

exports.NumberLiteral = NumberLiteral = (function(superClass1) {
    extend1(NumberLiteral, superClass1);

    function NumberLiteral() {
        return NumberLiteral.__super__.constructor.apply(this, arguments);
    }

    return NumberLiteral;

})(Literal);

exports.InfinityLiteral = InfinityLiteral = (function(superClass1) {
    extend1(InfinityLiteral, superClass1);

    function InfinityLiteral() {
        return InfinityLiteral.__super__.constructor.apply(this, arguments);
    }

    InfinityLiteral.prototype.compileNode = function() {
        return [this.makeCode('2e308')];
    };

    return InfinityLiteral;

})(NumberLiteral);

exports.NaNLiteral = NaNLiteral = (function(superClass1) {
    extend1(NaNLiteral, superClass1);

    function NaNLiteral() {
        NaNLiteral.__super__.constructor.call(this, 'NaN');
    }

    NaNLiteral.prototype.compileNode = function(o) {
        var code;
        code = [this.makeCode('0/0')];
        if (o.level >= LEVEL_OP) {
            return this.wrapInBraces(code);
        } else {
            return code;
        }
    };

    return NaNLiteral;

})(NumberLiteral);

exports.StringLiteral = StringLiteral = (function(superClass1) {
    extend1(StringLiteral, superClass1);

    function StringLiteral() {
        return StringLiteral.__super__.constructor.apply(this, arguments);
    }

    return StringLiteral;

})(Literal);

exports.RegexLiteral = RegexLiteral = (function(superClass1) {
    extend1(RegexLiteral, superClass1);

    function RegexLiteral() {
        return RegexLiteral.__super__.constructor.apply(this, arguments);
    }

    return RegexLiteral;

})(Literal);

exports.PassthroughLiteral = PassthroughLiteral = (function(superClass1) {
    extend1(PassthroughLiteral, superClass1);

    function PassthroughLiteral() {
        return PassthroughLiteral.__super__.constructor.apply(this, arguments);
    }

    return PassthroughLiteral;

})(Literal);

exports.IdentifierLiteral = IdentifierLiteral = (function(superClass1) {
    extend1(IdentifierLiteral, superClass1);

    function IdentifierLiteral() {
        return IdentifierLiteral.__super__.constructor.apply(this, arguments);
    }

    IdentifierLiteral.prototype.isAssignable = YES;

    return IdentifierLiteral;

})(Literal);

exports.PropertyName = PropertyName = (function(superClass1) {
    extend1(PropertyName, superClass1);

    function PropertyName() {
        return PropertyName.__super__.constructor.apply(this, arguments);
    }

    PropertyName.prototype.isAssignable = YES;

    return PropertyName;

})(Literal);

exports.StatementLiteral = StatementLiteral = (function(superClass1) {
    extend1(StatementLiteral, superClass1);

    function StatementLiteral() {
        return StatementLiteral.__super__.constructor.apply(this, arguments);
    }

    StatementLiteral.prototype.isStatement = YES;

    StatementLiteral.prototype.makeReturn = THIS;

    StatementLiteral.prototype.jumps = function(o) {
        if (this.value === 'break' && !((o != null ? o.loop : void 0) || (o != null ? o.block : void 0))) {
            return this;
        }
        if (this.value === 'continue' && !(o != null ? o.loop : void 0)) {
            return this;
        }
    };

    StatementLiteral.prototype.compileNode = function(o) {
        return [this.makeCode("" + this.tab + this.value + ";")];
    };

    return StatementLiteral;

})(Literal);

exports.ThisLiteral = ThisLiteral = (function(superClass1) {
    extend1(ThisLiteral, superClass1);

    function ThisLiteral() {
        ThisLiteral.__super__.constructor.call(this, 'this');
    }

    ThisLiteral.prototype.compileNode = function(o) {
        var code, ref3;
        code = ((ref3 = o.scope.method) != null ? ref3.bound : void 0) ? o.scope.method.context : this.value;
        return [this.makeCode(code)];
    };

    return ThisLiteral;

})(Literal);

exports.UndefinedLiteral = UndefinedLiteral = (function(superClass1) {
    extend1(UndefinedLiteral, superClass1);

    function UndefinedLiteral() {
        UndefinedLiteral.__super__.constructor.call(this, 'undefined');
    }

    UndefinedLiteral.prototype.compileNode = function(o) {
        return [this.makeCode(o.level >= LEVEL_ACCESS ? '(void 0)' : 'void 0')];
    };

    return UndefinedLiteral;

})(Literal);

exports.NullLiteral = NullLiteral = (function(superClass1) {
    extend1(NullLiteral, superClass1);

    function NullLiteral() {
        NullLiteral.__super__.constructor.call(this, 'null');
    }

    return NullLiteral;

})(Literal);

exports.BooleanLiteral = BooleanLiteral = (function(superClass1) {
    extend1(BooleanLiteral, superClass1);

    function BooleanLiteral() {
        return BooleanLiteral.__super__.constructor.apply(this, arguments);
    }

    return BooleanLiteral;

})(Literal);

exports.Return = Return = (function(superClass1) {
    extend1(Return, superClass1);

    function Return(expression) {
        this.expression = expression;
    }

    Return.prototype.children = ['expression'];

    Return.prototype.isStatement = YES;

    Return.prototype.makeReturn = THIS;

    Return.prototype.jumps = THIS;

    Return.prototype.compileToFragments = function(o, level) {
        var expr, ref3;
        expr = (ref3 = this.expression) != null ? ref3.makeReturn() : void 0;
        if (expr && !(expr instanceof Return)) {
            return expr.compileToFragments(o, level);
        } else {
            return Return.__super__.compileToFragments.call(this, o, level);
        }
    };

    Return.prototype.compileNode = function(o) {
        var answer;
        answer = [];
        answer.push(this.makeCode(this.tab + ("return" + (this.expression ? " " : ""))));
        if (this.expression) {
            answer = answer.concat(this.expression.compileToFragments(o, LEVEL_PAREN));
        }
        answer.push(this.makeCode(";"));
        return answer;
    };

    return Return;

})(Base);

exports.YieldReturn = YieldReturn = (function(superClass1) {
    extend1(YieldReturn, superClass1);

    function YieldReturn() {
        return YieldReturn.__super__.constructor.apply(this, arguments);
    }

    YieldReturn.prototype.compileNode = function(o) {
        if (o.scope.parent == null) {
            this.error('yield can only occur inside functions');
        }
        return YieldReturn.__super__.compileNode.apply(this, arguments);
    };

    return YieldReturn;

})(Return);

exports.Value = Value = (function(superClass1) {
    extend1(Value, superClass1);

    function Value(base, props, tag) {
        if (!props && base instanceof Value) {
            return base;
        }
        this.base = base;
        this.properties = props || [];
        if (tag) {
            this[tag] = true;
        }
        return this;
    }

    Value.prototype.children = ['base', 'properties'];

    Value.prototype.add = function(props) {
        this.properties = this.properties.concat(props);
        return this;
    };

    Value.prototype.hasProperties = function() {
        return !!this.properties.length;
    };

    Value.prototype.bareLiteral = function(type) {
        return !this.properties.length && this.base instanceof type;
    };

    Value.prototype.isArray = function() {
        return this.bareLiteral(Arr);
    };

    Value.prototype.isRange = function() {
        return this.bareLiteral(Range);
    };

    Value.prototype.isComplex = function() {
        return this.hasProperties() || this.base.isComplex();
    };

    Value.prototype.isAssignable = function() {
        return this.hasProperties() || this.base.isAssignable();
    };

    Value.prototype.isNumber = function() {
        return this.bareLiteral(NumberLiteral);
    };

    Value.prototype.isString = function() {
        return this.bareLiteral(StringLiteral);
    };

    Value.prototype.isRegex = function() {
        return this.bareLiteral(RegexLiteral);
    };

    Value.prototype.isUndefined = function() {
        return this.bareLiteral(UndefinedLiteral);
    };

    Value.prototype.isNull = function() {
        return this.bareLiteral(NullLiteral);
    };

    Value.prototype.isBoolean = function() {
        return this.bareLiteral(BooleanLiteral);
    };

    Value.prototype.isAtomic = function() {
        var j, len1, node, ref3;
        ref3 = this.properties.concat(this.base);
        for (j = 0, len1 = ref3.length; j < len1; j++) {
            node = ref3[j];
            if (node.soak || node instanceof Call) {
                return false;
            }
        }
        return true;
    };

    Value.prototype.isNotCallable = function() {
        return this.isNumber() || this.isString() || this.isRegex() || this.isArray() || this.isRange() || this.isSplice() || this.isObject() || this.isUndefined() || this.isNull() || this.isBoolean();
    };

    Value.prototype.isStatement = function(o) {
        return !this.properties.length && this.base.isStatement(o);
    };

    Value.prototype.assigns = function(name) {
        return !this.properties.length && this.base.assigns(name);
    };

    Value.prototype.jumps = function(o) {
        return !this.properties.length && this.base.jumps(o);
    };

    Value.prototype.isObject = function(onlyGenerated) {
        if (this.properties.length) {
            return false;
        }
        return (this.base instanceof Obj) && (!onlyGenerated || this.base.generated);
    };

    Value.prototype.isSplice = function() {
        var lastProp, ref3;
        ref3 = this.properties, lastProp = ref3[ref3.length - 1];
        return lastProp instanceof Slice;
    };

    Value.prototype.looksStatic = function(className) {
        var ref3;
        return this.base.value === className && this.properties.length === 1 && ((ref3 = this.properties[0].name) != null ? ref3.value : void 0) !== 'prototype';
    };

    Value.prototype.unwrap = function() {
        if (this.properties.length) {
            return this;
        } else {
            return this.base;
        }
    };

    Value.prototype.cacheReference = function(o) {
        var base, bref, name, nref, ref3;
        ref3 = this.properties, name = ref3[ref3.length - 1];
        if (this.properties.length < 2 && !this.base.isComplex() && !(name != null ? name.isComplex() : void 0)) {
            return [this, this];
        }
        base = new Value(this.base, this.properties.slice(0, -1));
        if (base.isComplex()) {
            bref = new IdentifierLiteral(o.scope.freeVariable('base'));
            base = new Value(new Parens(new Assign(bref, base)));
        }
        if (!name) {
            return [base, bref];
        }
        if (name.isComplex()) {
            nref = new IdentifierLiteral(o.scope.freeVariable('name'));
            name = new Index(new Assign(nref, name.index));
            nref = new Index(nref);
        }
        return [base.add(name), new Value(bref || base.base, [nref || name])];
    };

    Value.prototype.compileNode = function(o) {
        var fragments, j, len1, prop, props;
        this.base.front = this.front;
        props = this.properties;
        fragments = this.base.compileToFragments(o, (props.length ? LEVEL_ACCESS : null));
        if (props.length && SIMPLENUM.test(fragmentsToText(fragments))) {
            fragments.push(this.makeCode('.'));
        }
        for (j = 0, len1 = props.length; j < len1; j++) {
            prop = props[j];
            fragments.push.apply(fragments, prop.compileToFragments(o));
        }
        return fragments;
    };

    Value.prototype.unfoldSoak = function(o) {
        return this.unfoldedSoak != null ? this.unfoldedSoak : this.unfoldedSoak = (function(_this) {
            return function() {
                var fst, i, ifn, j, len1, prop, ref, ref3, ref4, snd;
                if (ifn = _this.base.unfoldSoak(o)) {
                    (ref3 = ifn.body.properties).push.apply(ref3, _this.properties);
                    return ifn;
                }
                ref4 = _this.properties;
                for (i = j = 0, len1 = ref4.length; j < len1; i = ++j) {
                    prop = ref4[i];
                    if (!prop.soak) {
                        continue;
                    }
                    prop.soak = false;
                    fst = new Value(_this.base, _this.properties.slice(0, i));
                    snd = new Value(_this.base, _this.properties.slice(i));
                    if (fst.isComplex()) {
                        ref = new IdentifierLiteral(o.scope.freeVariable('ref'));
                        fst = new Parens(new Assign(ref, fst));
                        snd.base = ref;
                    }
                    return new If(new Existence(fst), snd, {
                        soak: true
                    });
                }
                return false;
            };
        })(this)();
    };

    return Value;

})(Base);

exports.Comment = Comment = (function(superClass1) {
    extend1(Comment, superClass1);

    function Comment(comment1) {
        this.comment = comment1;
    }

    Comment.prototype.isStatement = YES;

    Comment.prototype.makeReturn = THIS;

    Comment.prototype.compileNode = function(o, level) {
        var code, comment;
        comment = this.comment.replace(/^(\s*)#(?=\s)/gm, "$1 *");
        code = "/*" + (multident(comment, this.tab)) + (indexOf.call(comment, '\n') >= 0 ? "\n" + this.tab : '') + " */";
        if ((level || o.level) === LEVEL_TOP) {
            code = o.indent + code;
        }
        return [this.makeCode("\n"), this.makeCode(code)];
    };

    return Comment;

})(Base);

exports.Call = Call = (function(superClass1) {
    extend1(Call, superClass1);

    function Call(variable1, args1, soak1) {
        this.variable = variable1;
        this.args = args1 != null ? args1 : [];
        this.soak = soak1;
        this.isNew = false;
        if (this.variable instanceof Value && this.variable.isNotCallable()) {
            this.variable.error("literal is not a function");
        }
    }

    Call.prototype.children = ['variable', 'args'];

    Call.prototype.updateLocationDataIfMissing = function(locationData) {
        var base, ref3;
        if (this.locationData && this.needsUpdatedStartLocation) {
            this.locationData.first_line = locationData.first_line;
            this.locationData.first_column = locationData.first_column;
            base = ((ref3 = this.variable) != null ? ref3.base : void 0) || this.variable;
            if (base.needsUpdatedStartLocation) {
                this.variable.locationData.first_line = locationData.first_line;
                this.variable.locationData.first_column = locationData.first_column;
                base.updateLocationDataIfMissing(locationData);
            }
            delete this.needsUpdatedStartLocation;
        }
        return Call.__super__.updateLocationDataIfMissing.apply(this, arguments);
    };

    Call.prototype.newInstance = function() {
        var base, ref3;
        base = ((ref3 = this.variable) != null ? ref3.base : void 0) || this.variable;
        if (base instanceof Call && !base.isNew) {
            base.newInstance();
        } else {
            this.isNew = true;
        }
        this.needsUpdatedStartLocation = true;
        return this;
    };

    Call.prototype.unfoldSoak = function(o) {
        var call, ifn, j, left, len1, list, ref3, ref4, rite;
        if (this.soak) {
            if (this instanceof SuperCall) {
                left = new Literal(this.superReference(o));
                rite = new Value(left);
            } else {
                if (ifn = unfoldSoak(o, this, 'variable')) {
                    return ifn;
                }
                ref3 = new Value(this.variable).cacheReference(o), left = ref3[0], rite = ref3[1];
            }
            rite = new Call(rite, this.args);
            rite.isNew = this.isNew;
            left = new Literal("typeof " + (left.compile(o)) + " === \"function\"");
            return new If(left, new Value(rite), {
                soak: true
            });
        }
        call = this;
        list = [];
        while (true) {
            if (call.variable instanceof Call) {
                list.push(call);
                call = call.variable;
                continue;
            }
            if (!(call.variable instanceof Value)) {
                break;
            }
            list.push(call);
            if (!((call = call.variable.base) instanceof Call)) {
                break;
            }
        }
        ref4 = list.reverse();
        for (j = 0, len1 = ref4.length; j < len1; j++) {
            call = ref4[j];
            if (ifn) {
                if (call.variable instanceof Call) {
                    call.variable = ifn;
                } else {
                    call.variable.base = ifn;
                }
            }
            ifn = unfoldSoak(o, call, 'variable');
        }
        return ifn;
    };

    Call.prototype.compileNode = function(o) {
        var arg, argIndex, compiledArgs, compiledArray, fragments, j, len1, preface, ref3, ref4;
        if ((ref3 = this.variable) != null) {
            ref3.front = this.front;
        }
        compiledArray = Splat.compileSplattedArray(o, this.args, true);
        if (compiledArray.length) {
            return this.compileSplat(o, compiledArray);
        }
        compiledArgs = [];
        ref4 = this.args;
        for (argIndex = j = 0, len1 = ref4.length; j < len1; argIndex = ++j) {
            arg = ref4[argIndex];
            if (argIndex) {
                compiledArgs.push(this.makeCode(", "));
            }
            compiledArgs.push.apply(compiledArgs, arg.compileToFragments(o, LEVEL_LIST));
        }
        fragments = [];
        if (this instanceof SuperCall) {
            preface = this.superReference(o) + (".call(" + (this.superThis(o)));
            if (compiledArgs.length) {
                preface += ", ";
            }
            fragments.push(this.makeCode(preface));
        } else {
            if (this.isNew) {
                fragments.push(this.makeCode('new '));
            }
            fragments.push.apply(fragments, this.variable.compileToFragments(o, LEVEL_ACCESS));
            fragments.push(this.makeCode("("));
        }
        fragments.push.apply(fragments, compiledArgs);
        fragments.push(this.makeCode(")"));
        return fragments;
    };

    Call.prototype.compileSplat = function(o, splatArgs) {
        var answer, base, fun, idt, name, ref;
        if (this instanceof SuperCall) {
            return [].concat(this.makeCode((this.superReference(o)) + ".apply(" + (this.superThis(o)) + ", "), splatArgs, this.makeCode(")"));
        }
        if (this.isNew) {
            idt = this.tab + TAB;
            return [].concat(this.makeCode("(function(func, args, ctor) {\n" + idt + "ctor.prototype = func.prototype;\n" + idt + "var child = new ctor, result = func.apply(child, args);\n" + idt + "return Object(result) === result ? result : child;\n" + this.tab + "})("), this.variable.compileToFragments(o, LEVEL_LIST), this.makeCode(", "), splatArgs, this.makeCode(", function(){})"));
        }
        answer = [];
        base = new Value(this.variable);
        if ((name = base.properties.pop()) && base.isComplex()) {
            ref = o.scope.freeVariable('ref');
            answer = answer.concat(this.makeCode("(" + ref + " = "), base.compileToFragments(o, LEVEL_LIST), this.makeCode(")"), name.compileToFragments(o));
        } else {
            fun = base.compileToFragments(o, LEVEL_ACCESS);
            if (SIMPLENUM.test(fragmentsToText(fun))) {
                fun = this.wrapInBraces(fun);
            }
            if (name) {
                ref = fragmentsToText(fun);
                fun.push.apply(fun, name.compileToFragments(o));
            } else {
                ref = 'null';
            }
            answer = answer.concat(fun);
        }
        return answer = answer.concat(this.makeCode(".apply(" + ref + ", "), splatArgs, this.makeCode(")"));
    };

    return Call;

})(Base);

exports.SuperCall = SuperCall = (function(superClass1) {
    extend1(SuperCall, superClass1);

    function SuperCall(args) {
        SuperCall.__super__.constructor.call(this, null, args != null ? args : [new Splat(new IdentifierLiteral('arguments'))]);
        this.isBare = args != null;
    }

    SuperCall.prototype.superReference = function(o) {
        var accesses, base, bref, klass, method, name, nref, variable;
        method = o.scope.namedMethod();
        if (method != null ? method.klass : void 0) {
            klass = method.klass, name = method.name, variable = method.variable;
            if (klass.isComplex()) {
                bref = new IdentifierLiteral(o.scope.parent.freeVariable('base'));
                base = new Value(new Parens(new Assign(bref, klass)));
                variable.base = base;
                variable.properties.splice(0, klass.properties.length);
            }
            if (name.isComplex() || (name instanceof Index && name.index.isAssignable())) {
                nref = new IdentifierLiteral(o.scope.parent.freeVariable('name'));
                name = new Index(new Assign(nref, name.index));
                variable.properties.pop();
                variable.properties.push(name);
            }
            accesses = [new Access(new PropertyName('__super__'))];
            if (method["static"]) {
                accesses.push(new Access(new PropertyName('constructor')));
            }
            accesses.push(nref != null ? new Index(nref) : name);
            return (new Value(bref != null ? bref : klass, accesses)).compile(o);
        } else if (method != null ? method.ctor : void 0) {
            return method.name + ".__super__.constructor";
        } else {
            return this.error('cannot call super outside of an instance method.');
        }
    };

    SuperCall.prototype.superThis = function(o) {
        var method;
        method = o.scope.method;
        return (method && !method.klass && method.context) || "this";
    };

    SuperCall.prototype.compileSplat = function(o, splatArgs) {
        if (splatArgs.length === 1 && splatArgs[0].code === 'arguments' && (this.configParameter != null) && o.feature['config-parameters']) {
            return [].concat(this.makeCode("" + (this.configParameterCodeBeforeSuper()) + (this.superReference(o)) + ".apply(" + (this.superThis(o)) + ", "), splatArgs, this.makeCode(")"));
        }
        return SuperCall.__super__.compileSplat.apply(this, arguments);
    };

    SuperCall.prototype.configParameterCodeBeforeSuper = function() {
        var a, param;
        if (!(param = this.configParameter)) {
            return '';
        }
        a = param.objects.map(function(obj) {
            var n, t;
            n = obj.variable.base.value;
            t = obj.value.variable["this"] && 'this.' || '';
            return n + ":" + (t + n);
        });
        return "arguments[0] = _.defaults({" + (a.join(',')) + "}, arguments[0]); ";
    };

    return SuperCall;

})(Call);

exports.RegexWithInterpolations = RegexWithInterpolations = (function(superClass1) {
    extend1(RegexWithInterpolations, superClass1);

    function RegexWithInterpolations(args) {
        if (args == null) {
            args = [];
        }
        RegexWithInterpolations.__super__.constructor.call(this, new Value(new IdentifierLiteral('RegExp')), args, false);
    }

    return RegexWithInterpolations;

})(Call);

exports.TaggedTemplateCall = TaggedTemplateCall = (function(superClass1) {
    extend1(TaggedTemplateCall, superClass1);

    function TaggedTemplateCall(variable, arg, soak) {
        if (arg instanceof StringLiteral) {
            arg = new StringWithInterpolations(Block.wrap([new Value(arg)]));
        }
        TaggedTemplateCall.__super__.constructor.call(this, variable, [arg], soak);
    }

    TaggedTemplateCall.prototype.compileNode = function(o) {
        o.inTaggedTemplateCall = true;
        return this.variable.compileToFragments(o, LEVEL_ACCESS).concat(this.args[0].compileToFragments(o, LEVEL_LIST));
    };

    return TaggedTemplateCall;

})(Call);

exports.Extends = Extends = (function(superClass1) {
    extend1(Extends, superClass1);

    function Extends(child1, parent1) {
        this.child = child1;
        this.parent = parent1;
    }

    Extends.prototype.children = ['child', 'parent'];

    Extends.prototype.compileToFragments = function(o) {
        return new Call(new Value(new Literal(utility('extend', o))), [this.child, this.parent]).compileToFragments(o);
    };

    return Extends;

})(Base);

exports.Access = Access = (function(superClass1) {
    extend1(Access, superClass1);

    function Access(name1, tag) {
        this.name = name1;
        this.soak = tag === 'soak';
    }

    Access.prototype.children = ['name'];

    Access.prototype.compileToFragments = function(o) {
        var name, node, ref3;
        name = this.name.compileToFragments(o);
        node = this.name.unwrap();
        if (node instanceof PropertyName) {
            if (ref3 = node.value, indexOf.call(JS_FORBIDDEN, ref3) >= 0) {
                return [this.makeCode('["')].concat(slice.call(name), [this.makeCode('"]')]);
            } else {
                return [this.makeCode('.')].concat(slice.call(name));
            }
        } else {
            return [this.makeCode('[')].concat(slice.call(name), [this.makeCode(']')]);
        }
    };

    Access.prototype.isComplex = NO;

    return Access;

})(Base);

exports.Index = Index = (function(superClass1) {
    extend1(Index, superClass1);

    function Index(index1) {
        this.index = index1;
    }

    Index.prototype.children = ['index'];

    Index.prototype.compileToFragments = function(o) {
        return [].concat(this.makeCode("["), this.index.compileToFragments(o, LEVEL_PAREN), this.makeCode("]"));
    };

    Index.prototype.isComplex = function() {
        return this.index.isComplex();
    };

    return Index;

})(Base);

exports.Range = Range = (function(superClass1) {
    extend1(Range, superClass1);

    Range.prototype.children = ['from', 'to'];

    function Range(from1, to1, tag) {
        this.from = from1;
        this.to = to1;
        this.exclusive = tag === 'exclusive';
        this.equals = this.exclusive ? '' : '=';
    }

    Range.prototype.compileVariables = function(o) {
        var isComplex, ref3, ref4, ref5, step;
        o = merge(o, {
            top: true
        });
        isComplex = del(o, 'isComplex');
        ref3 = this.cacheToCodeFragments(this.from.cache(o, LEVEL_LIST, isComplex)), this.fromC = ref3[0], this.fromVar = ref3[1];
        ref4 = this.cacheToCodeFragments(this.to.cache(o, LEVEL_LIST, isComplex)), this.toC = ref4[0], this.toVar = ref4[1];
        if (step = del(o, 'step')) {
            ref5 = this.cacheToCodeFragments(step.cache(o, LEVEL_LIST, isComplex)), this.step = ref5[0], this.stepVar = ref5[1];
        }
        this.fromNum = this.from.isNumber() ? Number(this.fromVar) : null;
        this.toNum = this.to.isNumber() ? Number(this.toVar) : null;
        return this.stepNum = (step != null ? step.isNumber() : void 0) ? Number(this.stepVar) : null;
    };

    Range.prototype.compileNode = function(o) {
        var cond, condPart, from, gt, idx, idxName, known, lt, namedIndex, ref3, ref4, stepPart, to, varPart;
        if (!this.fromVar) {
            this.compileVariables(o);
        }
        if (!o.index) {
            return this.compileArray(o);
        }
        known = (this.fromNum != null) && (this.toNum != null);
        idx = del(o, 'index');
        idxName = del(o, 'name');
        namedIndex = idxName && idxName !== idx;
        varPart = idx + " = " + this.fromC;
        if (this.toC !== this.toVar) {
            varPart += ", " + this.toC;
        }
        if (this.step !== this.stepVar) {
            varPart += ", " + this.step;
        }
        ref3 = [idx + " <" + this.equals, idx + " >" + this.equals], lt = ref3[0], gt = ref3[1];
        condPart = this.stepNum != null ? this.stepNum > 0 ? lt + " " + this.toVar : gt + " " + this.toVar : known ? ((ref4 = [this.fromNum, this.toNum], from = ref4[0], to = ref4[1], ref4), from <= to ? lt + " " + to : gt + " " + to) : (cond = this.stepVar ? this.stepVar + " > 0" : this.fromVar + " <= " + this.toVar, cond + " ? " + lt + " " + this.toVar + " : " + gt + " " + this.toVar);
        stepPart = this.stepVar ? idx + " += " + this.stepVar : known ? namedIndex ? from <= to ? "++" + idx : "--" + idx : from <= to ? idx + "++" : idx + "--" : namedIndex ? cond + " ? ++" + idx + " : --" + idx : cond + " ? " + idx + "++ : " + idx + "--";
        if (namedIndex) {
            varPart = idxName + " = " + varPart;
        }
        if (namedIndex) {
            stepPart = idxName + " = " + stepPart;
        }
        return [this.makeCode(varPart + "; " + condPart + "; " + stepPart)];
    };

    Range.prototype.compileArray = function(o) {
        var args, body, cond, hasArgs, i, idt, j, known, post, pre, range, ref3, ref4, result, results, vars;
        known = (this.fromNum != null) && (this.toNum != null);
        if (known && Math.abs(this.fromNum - this.toNum) <= 20) {
            range = (function() {
                results = [];
                for (var j = ref3 = this.fromNum, ref4 = this.toNum; ref3 <= ref4 ? j <= ref4 : j >= ref4; ref3 <= ref4 ? j++ : j--){ results.push(j); }
                return results;
            }).apply(this);
            if (this.exclusive) {
                range.pop();
            }
            return [this.makeCode("[" + (range.join(', ')) + "]")];
        }
        idt = this.tab + TAB;
        i = o.scope.freeVariable('i', {
            single: true
        });
        result = o.scope.freeVariable('results');
        pre = "\n" + idt + result + " = [];";
        if (known) {
            o.index = i;
            body = fragmentsToText(this.compileNode(o));
        } else {
            vars = (i + " = " + this.fromC) + (this.toC !== this.toVar ? ", " + this.toC : '');
            cond = this.fromVar + " <= " + this.toVar;
            body = "var " + vars + "; " + cond + " ? " + i + " <" + this.equals + " " + this.toVar + " : " + i + " >" + this.equals + " " + this.toVar + "; " + cond + " ? " + i + "++ : " + i + "--";
        }
        post = "{ " + result + ".push(" + i + "); }\n" + idt + "return " + result + ";\n" + o.indent;
        hasArgs = function(node) {
            return node != null ? node.contains(isLiteralArguments) : void 0;
        };
        if (hasArgs(this.from) || hasArgs(this.to)) {
            args = ', arguments';
        }
        return [this.makeCode("(function() {" + pre + "\n" + idt + "for (" + body + ")" + post + "}).apply(this" + (args != null ? args : '') + ")")];
    };

    return Range;

})(Base);

exports.Slice = Slice = (function(superClass1) {
    extend1(Slice, superClass1);

    Slice.prototype.children = ['range'];

    function Slice(range1) {
        this.range = range1;
        Slice.__super__.constructor.call(this);
    }

    Slice.prototype.compileNode = function(o) {
        var compiled, compiledText, from, fromCompiled, ref3, to, toStr;
        ref3 = this.range, to = ref3.to, from = ref3.from;
        fromCompiled = from && from.compileToFragments(o, LEVEL_PAREN) || [this.makeCode('0')];
        if (to) {
            compiled = to.compileToFragments(o, LEVEL_PAREN);
            compiledText = fragmentsToText(compiled);
            if (!(!this.range.exclusive && +compiledText === -1)) {
                toStr = ', ' + (this.range.exclusive ? compiledText : to.isNumber() ? "" + (+compiledText + 1) : (compiled = to.compileToFragments(o, LEVEL_ACCESS), "+" + (fragmentsToText(compiled)) + " + 1 || 9e9"));
            }
        }
        return [this.makeCode(".slice(" + (fragmentsToText(fromCompiled)) + (toStr || '') + ")")];
    };

    return Slice;

})(Base);

exports.Obj = Obj = (function(superClass1) {
    extend1(Obj, superClass1);

    function Obj(props, generated) {
        this.generated = generated != null ? generated : false;
        this.objects = this.properties = props || [];
    }

    Obj.prototype.children = ['properties'];

    Obj.prototype.compileNode = function(o) {
        var answer, dynamicIndex, hasDynamic, i, idt, indent, j, join, k, key, l, lastNoncom, len1, len2, len3, node, oref, prop, props, ref3, value;
        props = this.properties;
        if (this.generated) {
            for (j = 0, len1 = props.length; j < len1; j++) {
                node = props[j];
                if (node instanceof Value) {
                    node.error('cannot have an implicit value in an implicit object');
                }
            }
        }
        for (dynamicIndex = k = 0, len2 = props.length; k < len2; dynamicIndex = ++k) {
            prop = props[dynamicIndex];
            if ((prop.variable || prop).base instanceof Parens) {
                break;
            }
        }
        hasDynamic = dynamicIndex < props.length;
        idt = o.indent += TAB;
        lastNoncom = this.lastNonComment(this.properties);
        answer = [];
        if (hasDynamic) {
            oref = o.scope.freeVariable('obj');
            answer.push(this.makeCode("(\n" + idt + oref + " = "));
        }
        answer.push(this.makeCode("{" + (props.length === 0 || dynamicIndex === 0 ? '}' : '\n')));
        for (i = l = 0, len3 = props.length; l < len3; i = ++l) {
            prop = props[i];
            if (i === dynamicIndex) {
                if (i !== 0) {
                    answer.push(this.makeCode("\n" + idt + "}"));
                }
                answer.push(this.makeCode(',\n'));
            }
            join = i === props.length - 1 || i === dynamicIndex - 1 ? '' : prop === lastNoncom || prop instanceof Comment ? '\n' : ',\n';
            indent = prop instanceof Comment ? '' : idt;
            if (hasDynamic && i < dynamicIndex) {
                indent += TAB;
            }
            if (prop instanceof Assign) {
                if (prop.context !== 'object') {
                    prop.operatorToken.error("unexpected " + prop.operatorToken.value);
                }
                if (prop.variable instanceof Value && prop.variable.hasProperties()) {
                    prop.variable.error('invalid object key');
                }
            }
            if (prop instanceof Value && prop["this"]) {
                prop = new Assign(prop.properties[0].name, prop, 'object');
            }
            if (!(prop instanceof Comment)) {
                if (i < dynamicIndex) {
                    if (!(prop instanceof Assign)) {
                        prop = new Assign(prop, prop, 'object');
                    }
                } else {
                    if (prop instanceof Assign) {
                        key = prop.variable;
                        value = prop.value;
                    } else {
                        ref3 = prop.base.cache(o), key = ref3[0], value = ref3[1];
                        if (key instanceof IdentifierLiteral) {
                            key = new PropertyName(key.value);
                        }
                    }
                    prop = new Assign(new Value(new IdentifierLiteral(oref), [new Access(key)]), value);
                }
            }
            if (indent) {
                answer.push(this.makeCode(indent));
            }
            answer.push.apply(answer, prop.compileToFragments(o, LEVEL_TOP));
            if (join) {
                answer.push(this.makeCode(join));
            }
        }
        if (hasDynamic) {
            answer.push(this.makeCode(",\n" + idt + oref + "\n" + this.tab + ")"));
        } else {
            if (props.length !== 0) {
                answer.push(this.makeCode("\n" + this.tab + "}"));
            }
        }
        if (this.front && !hasDynamic) {
            return this.wrapInBraces(answer);
        } else {
            return answer;
        }
    };

    Obj.prototype.assigns = function(name) {
        var j, len1, prop, ref3;
        ref3 = this.properties;
        for (j = 0, len1 = ref3.length; j < len1; j++) {
            prop = ref3[j];
            if (prop.assigns(name)) {
                return true;
            }
        }
        return false;
    };

    return Obj;

})(Base);

exports.Arr = Arr = (function(superClass1) {
    extend1(Arr, superClass1);

    function Arr(objs) {
        this.objects = objs || [];
    }

    Arr.prototype.children = ['objects'];

    Arr.prototype.compileNode = function(o) {
        var answer, compiledObjs, fragments, index, j, len1, obj;
        if (!this.objects.length) {
            return [this.makeCode('[]')];
        }
        o.indent += TAB;
        answer = Splat.compileSplattedArray(o, this.objects);
        if (answer.length) {
            return answer;
        }
        answer = [];
        compiledObjs = (function() {
            var j, len1, ref3, results;
            ref3 = this.objects;
            results = [];
            for (j = 0, len1 = ref3.length; j < len1; j++) {
                obj = ref3[j];
                results.push(obj.compileToFragments(o, LEVEL_LIST));
            }
            return results;
        }).call(this);
        for (index = j = 0, len1 = compiledObjs.length; j < len1; index = ++j) {
            fragments = compiledObjs[index];
            if (index) {
                answer.push(this.makeCode(", "));
            }
            answer.push.apply(answer, fragments);
        }
        if (fragmentsToText(answer).indexOf('\n') >= 0) {
            answer.unshift(this.makeCode("[\n" + o.indent));
            answer.push(this.makeCode("\n" + this.tab + "]"));
        } else {
            answer.unshift(this.makeCode("["));
            answer.push(this.makeCode("]"));
        }
        return answer;
    };

    Arr.prototype.assigns = function(name) {
        var j, len1, obj, ref3;
        ref3 = this.objects;
        for (j = 0, len1 = ref3.length; j < len1; j++) {
            obj = ref3[j];
            if (obj.assigns(name)) {
                return true;
            }
        }
        return false;
    };

    return Arr;

})(Base);

exports.Class = Class = (function(superClass1) {
    extend1(Class, superClass1);

    function Class(variable1, parent1, body1) {
        this.variable = variable1;
        this.parent = parent1;
        this.body = body1 != null ? body1 : new Block;
        this.boundFuncs = [];
        this.body.classBody = true;
    }

    Class.prototype.children = ['variable', 'parent', 'body'];

    Class.prototype.defaultClassVariableName = '_Class';

    Class.prototype.determineName = function() {
        var message, name, node, ref3, tail;
        if (!this.variable) {
            return this.defaultClassVariableName;
        }
        ref3 = this.variable.properties, tail = ref3[ref3.length - 1];
        node = tail ? tail instanceof Access && tail.name : this.variable.base;
        if (!(node instanceof IdentifierLiteral || node instanceof PropertyName)) {
            return this.defaultClassVariableName;
        }
        name = node.value;
        if (!tail) {
            message = isUnassignable(name);
            if (message) {
                this.variable.error(message);
            }
        }
        if (indexOf.call(JS_FORBIDDEN, name) >= 0) {
            return "_" + name;
        } else {
            return name;
        }
    };

    Class.prototype.setContext = function(name) {
        return this.body.traverseChildren(false, function(node) {
            if (node.classBody) {
                return false;
            }
            if (node instanceof ThisLiteral) {
                return node.value = name;
            } else if (node instanceof Code) {
                if (node.bound) {
                    return node.context = name;
                }
            }
        });
    };

    Class.prototype.addBoundFunctions = function(o) {
        var bvar, j, len1, lhs, ref3;
        ref3 = this.boundFuncs;
        for (j = 0, len1 = ref3.length; j < len1; j++) {
            bvar = ref3[j];
            lhs = (new Value(new ThisLiteral, [new Access(bvar)])).compile(o);
            this.ctor.body.unshift(new Literal(lhs + " = " + (utility('bind', o)) + "(" + lhs + ", this)"));
        }
    };

    Class.prototype.addProperties = function(node, name, o) {
        var acc, assign, base, exprs, func, props;
        props = node.base.properties.slice(0);
        exprs = (function() {
            var results;
            results = [];
            while (assign = props.shift()) {
                if (assign instanceof Assign) {
                    base = assign.variable.base;
                    delete assign.context;
                    func = assign.value;
                    if (base.value === 'constructor') {
                        if (this.ctor) {
                            assign.error('cannot define more than one constructor in a class');
                        }
                        if (func.bound) {
                            assign.error('cannot define a constructor as a bound function');
                        }
                        if (func instanceof Code) {
                            assign = this.ctor = func;
                        } else {
                            this.externalCtor = o.classScope.freeVariable('ctor');
                            assign = new Assign(new IdentifierLiteral(this.externalCtor), func);
                        }
                    } else {
                        if (assign.variable["this"]) {
                            func["static"] = true;
                        } else {
                            acc = base.isComplex() ? new Index(base) : new Access(base);
                            assign.variable = new Value(new IdentifierLiteral(name), [new Access(new PropertyName('prototype')), acc]);
                            if (func instanceof Code && func.bound) {
                                this.boundFuncs.push(base);
                                func.bound = false;
                            }
                        }
                    }
                }
                results.push(assign);
            }
            return results;
        }).call(this);
        return compact(exprs);
    };

    Class.prototype.walkBody = function(name, o) {
        return this.traverseChildren(false, (function(_this) {
            return function(child) {
                var cont, exps, i, j, len1, node, ref3;
                cont = true;
                if (child instanceof Class) {
                    return false;
                }
                if (child instanceof Block) {
                    ref3 = exps = child.expressions;
                    for (i = j = 0, len1 = ref3.length; j < len1; i = ++j) {
                        node = ref3[i];
                        if (node instanceof Assign && node.variable.looksStatic(name)) {
                            node.value["static"] = true;
                        } else if (node instanceof Value && node.isObject(true)) {
                            cont = false;
                            exps[i] = _this.addProperties(node, name, o);
                        }
                    }
                    child.expressions = exps = flatten(exps);
                    if (child.classBody && o.feature['config-parameters']) {
                        _this.prepareSuperCallForConfigParams(name, o, child);
                    }
                }
                return cont && !(child instanceof Class);
            };
        })(this));
    };

    Class.prototype.prepareSuperCallForConfigParams = function(name, o, classBody) {
        var bodyExpr, expr, j, k, len1, len2, param0, ref3, ref4, ref5;
        ref3 = classBody.expressions;
        for (j = 0, len1 = ref3.length; j < len1; j++) {
            expr = ref3[j];
            if (expr instanceof Code) {
                if (!((ref4 = expr.params[0]) != null ? ref4.name : void 0)) {
                    continue;
                }
                param0 = expr.params[0].name;
                if (!param0.generated) {
                    return;
                }
                if (!param0 instanceof Obj) {
                    return log('CONSTRUCTOR PARAM0 NOT AN OBJ?');
                }
                if (!expr.body instanceof Block) {
                    return log('CONSTRUCTOR BODY NOT AN BLOCK?');
                }
                ref5 = expr.body.expressions;
                for (k = 0, len2 = ref5.length; k < len2; k++) {
                    bodyExpr = ref5[k];
                    if (bodyExpr instanceof SuperCall) {
                        bodyExpr.configParameter = param0;
                    }
                }
            }
        }
    };

    Class.prototype.hoistDirectivePrologue = function() {
        var expressions, index, node;
        index = 0;
        expressions = this.body.expressions;
        while ((node = expressions[index]) && node instanceof Comment || node instanceof Value && node.isString()) {
            ++index;
        }
        return this.directives = expressions.splice(0, index);
    };

    Class.prototype.ensureConstructor = function(name) {
        if (!this.ctor) {
            this.ctor = new Code;
            if (this.externalCtor) {
                this.ctor.body.push(new Literal(this.externalCtor + ".apply(this, arguments)"));
            } else if (this.parent) {
                this.ctor.body.push(new Literal(name + ".__super__.constructor.apply(this, arguments)"));
            }
            this.ctor.body.makeReturn();
            this.body.expressions.unshift(this.ctor);
        }
        this.ctor.ctor = this.ctor.name = name;
        this.ctor.klass = null;
        return this.ctor.noReturn = true;
    };

    Class.prototype.compileNode = function(o) {
        var args, argumentsNode, func, jumpNode, klass, lname, name, ref3, superClass;
        if (jumpNode = this.body.jumps()) {
            jumpNode.error('Class bodies cannot contain pure statements');
        }
        if (argumentsNode = this.body.contains(isLiteralArguments)) {
            argumentsNode.error("Class bodies shouldn't reference arguments");
        }
        name = this.determineName();
        lname = new IdentifierLiteral(name);
        func = new Code([], Block.wrap([this.body]));
        args = [];
        o.classScope = func.makeScope(o.scope);
        this.hoistDirectivePrologue();
        this.setContext(name);
        this.walkBody(name, o);
        this.ensureConstructor(name);
        this.addBoundFunctions(o);
        this.body.spaced = true;
        this.body.expressions.push(lname);
        if (this.parent) {
            superClass = new IdentifierLiteral(o.classScope.freeVariable('superClass', {
                reserve: false
            }));
            this.body.expressions.unshift(new Extends(lname, superClass));
            func.params.push(new Param(superClass));
            args.push(this.parent);
        }
        (ref3 = this.body.expressions).unshift.apply(ref3, this.directives);
        klass = new Parens(new Call(func, args));
        if (this.variable) {
            klass = new Assign(this.variable, klass, null, {
                moduleDeclaration: this.moduleDeclaration
            });
        }
        return klass.compileToFragments(o);
    };

    return Class;

})(Base);

exports.ModuleDeclaration = ModuleDeclaration = (function(superClass1) {
    extend1(ModuleDeclaration, superClass1);

    function ModuleDeclaration(clause, source1) {
        this.clause = clause;
        this.source = source1;
        this.checkSource();
    }

    ModuleDeclaration.prototype.children = ['clause', 'source'];

    ModuleDeclaration.prototype.isStatement = YES;

    ModuleDeclaration.prototype.jumps = THIS;

    ModuleDeclaration.prototype.makeReturn = THIS;

    ModuleDeclaration.prototype.checkSource = function() {
        if ((this.source != null) && this.source instanceof StringWithInterpolations) {
            return this.source.error('the name of the module to be imported from must be an uninterpolated string');
        }
    };

    ModuleDeclaration.prototype.checkScope = function(o, moduleDeclarationType) {
        if (o.indent.length !== 0) {
            return this.error(moduleDeclarationType + " statements must be at top-level scope");
        }
    };

    return ModuleDeclaration;

})(Base);

exports.ImportDeclaration = ImportDeclaration = (function(superClass1) {
    extend1(ImportDeclaration, superClass1);

    function ImportDeclaration() {
        return ImportDeclaration.__super__.constructor.apply(this, arguments);
    }

    ImportDeclaration.prototype.compileNode = function(o) {
        var code, ref3;
        this.checkScope(o, 'import');
        o.importedSymbols = [];
        code = [];
        code.push(this.makeCode(this.tab + "import "));
        if (this.clause != null) {
            code.push.apply(code, this.clause.compileNode(o));
        }
        if (((ref3 = this.source) != null ? ref3.value : void 0) != null) {
            if (this.clause !== null) {
                code.push(this.makeCode(' from '));
            }
            code.push(this.makeCode(this.source.value));
        }
        code.push(this.makeCode(';'));
        return code;
    };

    return ImportDeclaration;

})(ModuleDeclaration);

exports.ImportClause = ImportClause = (function(superClass1) {
    extend1(ImportClause, superClass1);

    function ImportClause(defaultBinding, namedImports) {
        this.defaultBinding = defaultBinding;
        this.namedImports = namedImports;
    }

    ImportClause.prototype.children = ['defaultBinding', 'namedImports'];

    ImportClause.prototype.compileNode = function(o) {
        var code;
        code = [];
        if (this.defaultBinding != null) {
            code.push.apply(code, this.defaultBinding.compileNode(o));
            if (this.namedImports != null) {
                code.push(this.makeCode(', '));
            }
        }
        if (this.namedImports != null) {
            code.push.apply(code, this.namedImports.compileNode(o));
        }
        return code;
    };

    return ImportClause;

})(Base);

exports.ExportDeclaration = ExportDeclaration = (function(superClass1) {
    extend1(ExportDeclaration, superClass1);

    function ExportDeclaration() {
        return ExportDeclaration.__super__.constructor.apply(this, arguments);
    }

    ExportDeclaration.prototype.compileNode = function(o) {
        var code, ref3;
        this.checkScope(o, 'export');
        code = [];
        code.push(this.makeCode(this.tab + "export "));
        if (this instanceof ExportDefaultDeclaration) {
            code.push(this.makeCode('default '));
        }
        if (!(this instanceof ExportDefaultDeclaration) && (this.clause instanceof Assign || this.clause instanceof Class)) {
            if (this.clause instanceof Class && !this.clause.variable) {
                this.clause.error('anonymous classes cannot be exported');
            }
            code.push(this.makeCode('var '));
            this.clause.moduleDeclaration = 'export';
        }
        if ((this.clause.body != null) && this.clause.body instanceof Block) {
            code = code.concat(this.clause.compileToFragments(o, LEVEL_TOP));
        } else {
            code = code.concat(this.clause.compileNode(o));
        }
        if (((ref3 = this.source) != null ? ref3.value : void 0) != null) {
            code.push(this.makeCode(" from " + this.source.value));
        }
        code.push(this.makeCode(';'));
        return code;
    };

    return ExportDeclaration;

})(ModuleDeclaration);

exports.ExportNamedDeclaration = ExportNamedDeclaration = (function(superClass1) {
    extend1(ExportNamedDeclaration, superClass1);

    function ExportNamedDeclaration() {
        return ExportNamedDeclaration.__super__.constructor.apply(this, arguments);
    }

    return ExportNamedDeclaration;

})(ExportDeclaration);

exports.ExportDefaultDeclaration = ExportDefaultDeclaration = (function(superClass1) {
    extend1(ExportDefaultDeclaration, superClass1);

    function ExportDefaultDeclaration() {
        return ExportDefaultDeclaration.__super__.constructor.apply(this, arguments);
    }

    return ExportDefaultDeclaration;

})(ExportDeclaration);

exports.ExportAllDeclaration = ExportAllDeclaration = (function(superClass1) {
    extend1(ExportAllDeclaration, superClass1);

    function ExportAllDeclaration() {
        return ExportAllDeclaration.__super__.constructor.apply(this, arguments);
    }

    return ExportAllDeclaration;

})(ExportDeclaration);

exports.ModuleSpecifierList = ModuleSpecifierList = (function(superClass1) {
    extend1(ModuleSpecifierList, superClass1);

    function ModuleSpecifierList(specifiers) {
        this.specifiers = specifiers;
    }

    ModuleSpecifierList.prototype.children = ['specifiers'];

    ModuleSpecifierList.prototype.compileNode = function(o) {
        var code, compiledList, fragments, index, j, len1, specifier;
        code = [];
        o.indent += TAB;
        compiledList = (function() {
            var j, len1, ref3, results;
            ref3 = this.specifiers;
            results = [];
            for (j = 0, len1 = ref3.length; j < len1; j++) {
                specifier = ref3[j];
                results.push(specifier.compileToFragments(o, LEVEL_LIST));
            }
            return results;
        }).call(this);
        if (this.specifiers.length !== 0) {
            code.push(this.makeCode("{\n" + o.indent));
            for (index = j = 0, len1 = compiledList.length; j < len1; index = ++j) {
                fragments = compiledList[index];
                if (index) {
                    code.push(this.makeCode(",\n" + o.indent));
                }
                code.push.apply(code, fragments);
            }
            code.push(this.makeCode("\n}"));
        } else {
            code.push(this.makeCode('{}'));
        }
        return code;
    };

    return ModuleSpecifierList;

})(Base);

exports.ImportSpecifierList = ImportSpecifierList = (function(superClass1) {
    extend1(ImportSpecifierList, superClass1);

    function ImportSpecifierList() {
        return ImportSpecifierList.__super__.constructor.apply(this, arguments);
    }

    return ImportSpecifierList;

})(ModuleSpecifierList);

exports.ExportSpecifierList = ExportSpecifierList = (function(superClass1) {
    extend1(ExportSpecifierList, superClass1);

    function ExportSpecifierList() {
        return ExportSpecifierList.__super__.constructor.apply(this, arguments);
    }

    return ExportSpecifierList;

})(ModuleSpecifierList);

exports.ModuleSpecifier = ModuleSpecifier = (function(superClass1) {
    extend1(ModuleSpecifier, superClass1);

    function ModuleSpecifier(original, alias, moduleDeclarationType1) {
        this.original = original;
        this.alias = alias;
        this.moduleDeclarationType = moduleDeclarationType1;
        this.identifier = this.alias != null ? this.alias.value : this.original.value;
    }

    ModuleSpecifier.prototype.children = ['original', 'alias'];

    ModuleSpecifier.prototype.compileNode = function(o) {
        var code;
        o.scope.find(this.identifier, this.moduleDeclarationType);
        code = [];
        code.push(this.makeCode(this.original.value));
        if (this.alias != null) {
            code.push(this.makeCode(" as " + this.alias.value));
        }
        return code;
    };

    return ModuleSpecifier;

})(Base);

exports.ImportSpecifier = ImportSpecifier = (function(superClass1) {
    extend1(ImportSpecifier, superClass1);

    function ImportSpecifier(imported, local) {
        ImportSpecifier.__super__.constructor.call(this, imported, local, 'import');
    }

    ImportSpecifier.prototype.compileNode = function(o) {
        var ref3;
        if ((ref3 = this.identifier, indexOf.call(o.importedSymbols, ref3) >= 0) || o.scope.check(this.identifier)) {
            this.error("'" + this.identifier + "' has already been declared");
        } else {
            o.importedSymbols.push(this.identifier);
        }
        return ImportSpecifier.__super__.compileNode.call(this, o);
    };

    return ImportSpecifier;

})(ModuleSpecifier);

exports.ImportDefaultSpecifier = ImportDefaultSpecifier = (function(superClass1) {
    extend1(ImportDefaultSpecifier, superClass1);

    function ImportDefaultSpecifier() {
        return ImportDefaultSpecifier.__super__.constructor.apply(this, arguments);
    }

    return ImportDefaultSpecifier;

})(ImportSpecifier);

exports.ImportNamespaceSpecifier = ImportNamespaceSpecifier = (function(superClass1) {
    extend1(ImportNamespaceSpecifier, superClass1);

    function ImportNamespaceSpecifier() {
        return ImportNamespaceSpecifier.__super__.constructor.apply(this, arguments);
    }

    return ImportNamespaceSpecifier;

})(ImportSpecifier);

exports.ExportSpecifier = ExportSpecifier = (function(superClass1) {
    extend1(ExportSpecifier, superClass1);

    function ExportSpecifier(local, exported) {
        ExportSpecifier.__super__.constructor.call(this, local, exported, 'export');
    }

    return ExportSpecifier;

})(ModuleSpecifier);

exports.Assign = Assign = (function(superClass1) {
    extend1(Assign, superClass1);

    function Assign(variable1, value1, context, options) {
        this.variable = variable1;
        this.value = value1;
        this.context = context;
        if (options == null) {
            options = {};
        }
        this.param = options.param, this.subpattern = options.subpattern, this.operatorToken = options.operatorToken, this.moduleDeclaration = options.moduleDeclaration;
    }

    Assign.prototype.children = ['variable', 'value'];

    Assign.prototype.isStatement = function(o) {
        return (o != null ? o.level : void 0) === LEVEL_TOP && (this.context != null) && (this.moduleDeclaration || indexOf.call(this.context, "?") >= 0);
    };

    Assign.prototype.checkAssignability = function(o, varBase) {
        if (Object.prototype.hasOwnProperty.call(o.scope.positions, varBase.value) && o.scope.variables[o.scope.positions[varBase.value]].type === 'import') {
            return varBase.error("'" + varBase.value + "' is read-only");
        }
    };

    Assign.prototype.assigns = function(name) {
        return this[this.context === 'object' ? 'value' : 'variable'].assigns(name);
    };

    Assign.prototype.unfoldSoak = function(o) {
        return unfoldSoak(o, this, 'variable');
    };

    Assign.prototype.compileNode = function(o) {
        var answer, compiledName, isValue, j, name, properties, prototype, ref3, ref4, ref5, ref6, ref7, ref8, val, varBase;
        if (isValue = this.variable instanceof Value) {
            if (this.variable.isArray() || this.variable.isObject()) {
                return this.compilePatternMatch(o);
            }
            if (this.variable.isSplice()) {
                return this.compileSplice(o);
            }
            if ((ref3 = this.context) === '||=' || ref3 === '&&=' || ref3 === '?=') {
                return this.compileConditional(o);
            }
            if ((ref4 = this.context) === '**=' || ref4 === '//=' || ref4 === '%%=') {
                return this.compileSpecialMath(o);
            }
        }
        if (this.value instanceof Code) {
            if (this.value["static"]) {
                this.value.klass = this.variable.base;
                this.value.name = this.variable.properties[0];
                this.value.variable = this.variable;
            } else if (((ref5 = this.variable.properties) != null ? ref5.length : void 0) >= 2) {
                ref6 = this.variable.properties, properties = 3 <= ref6.length ? slice.call(ref6, 0, j = ref6.length - 2) : (j = 0, []), prototype = ref6[j++], name = ref6[j++];
                if (((ref7 = prototype.name) != null ? ref7.value : void 0) === 'prototype') {
                    this.value.klass = new Value(this.variable.base, properties);
                    this.value.name = name;
                    this.value.variable = this.variable;
                }
            }
        }
        if (!this.context) {
            varBase = this.variable.unwrapAll();
            if (!varBase.isAssignable()) {
                this.variable.error("'" + (this.variable.compile(o)) + "' can't be assigned");
            }
            if (!(typeof varBase.hasProperties === "function" ? varBase.hasProperties() : void 0)) {
                if (this.moduleDeclaration) {
                    this.checkAssignability(o, varBase);
                    o.scope.add(varBase.value, this.moduleDeclaration);
                } else if (this.param) {
                    o.scope.add(varBase.value, 'var');
                } else {
                    this.checkAssignability(o, varBase);
                    o.scope.find(varBase.value);
                }
            }
        }
        val = this.value.compileToFragments(o, LEVEL_LIST);
        if (isValue && this.variable.base instanceof Obj) {
            this.variable.front = true;
        }
        compiledName = this.variable.compileToFragments(o, LEVEL_LIST);
        if (this.context === 'object') {
            if (ref8 = fragmentsToText(compiledName), indexOf.call(JS_FORBIDDEN, ref8) >= 0) {
                compiledName.unshift(this.makeCode('"'));
                compiledName.push(this.makeCode('"'));
            }
            return compiledName.concat(this.makeCode(": "), val);
        }
        answer = compiledName.concat(this.makeCode(" " + (this.context || '=') + " "), val);
        if (o.level <= LEVEL_LIST) {
            return answer;
        } else {
            return this.wrapInBraces(answer);
        }
    };

    Assign.prototype.compilePatternMatch = function(o) {
        var acc, assigns, code, defaultValue, expandedIdx, fragments, i, idx, isObject, ivar, j, len1, message, name, obj, objects, olen, ref, ref3, ref4, ref5, ref6, rest, top, val, value, vvar, vvarText;
        top = o.level === LEVEL_TOP;
        value = this.value;
        objects = this.variable.base.objects;
        if (!(olen = objects.length)) {
            code = value.compileToFragments(o);
            if (o.level >= LEVEL_OP) {
                return this.wrapInBraces(code);
            } else {
                return code;
            }
        }
        obj = objects[0];
        if (olen === 1 && obj instanceof Expansion) {
            obj.error('Destructuring assignment has no target');
        }
        isObject = this.variable.isObject();
        if (top && olen === 1 && !(obj instanceof Splat)) {
            defaultValue = null;
            if (obj instanceof Assign && obj.context === 'object') {
                ref3 = obj, (ref4 = ref3.variable, idx = ref4.base), obj = ref3.value;
                if (obj instanceof Assign) {
                    defaultValue = obj.value;
                    obj = obj.variable;
                }
            } else {
                if (obj instanceof Assign) {
                    defaultValue = obj.value;
                    obj = obj.variable;
                }
                idx = isObject ? obj["this"] ? obj.properties[0].name : new PropertyName(obj.unwrap().value) : new NumberLiteral(0);
            }
            acc = idx.unwrap() instanceof PropertyName;
            value = new Value(value);
            value.properties.push(new (acc ? Access : Index)(idx));
            message = isUnassignable(obj.unwrap().value);
            if (message) {
                obj.error(message);
            }
            if (defaultValue) {
                value = new Op('?', value, defaultValue);
            }
            return new Assign(obj, value, null, {
                param: this.param
            }).compileToFragments(o, LEVEL_TOP);
        }
        vvar = value.compileToFragments(o, LEVEL_LIST);
        vvarText = fragmentsToText(vvar);
        assigns = [];
        expandedIdx = false;
        if (!(value.unwrap() instanceof IdentifierLiteral) || this.variable.assigns(vvarText)) {
            assigns.push([this.makeCode((ref = o.scope.freeVariable('ref')) + " = ")].concat(slice.call(vvar)));
            vvar = [this.makeCode(ref)];
            vvarText = ref;
        }
        for (i = j = 0, len1 = objects.length; j < len1; i = ++j) {
            obj = objects[i];
            idx = i;
            if (!expandedIdx && obj instanceof Splat) {
                name = obj.name.unwrap().value;
                obj = obj.unwrap();
                val = olen + " <= " + vvarText + ".length ? " + (utility('slice', o)) + ".call(" + vvarText + ", " + i;
                if (rest = olen - i - 1) {
                    ivar = o.scope.freeVariable('i', {
                        single: true
                    });
                    val += ", " + ivar + " = " + vvarText + ".length - " + rest + ") : (" + ivar + " = " + i + ", [])";
                } else {
                    val += ") : []";
                }
                val = new Literal(val);
                expandedIdx = ivar + "++";
            } else if (!expandedIdx && obj instanceof Expansion) {
                if (rest = olen - i - 1) {
                    if (rest === 1) {
                        expandedIdx = vvarText + ".length - 1";
                    } else {
                        ivar = o.scope.freeVariable('i', {
                            single: true
                        });
                        val = new Literal(ivar + " = " + vvarText + ".length - " + rest);
                        expandedIdx = ivar + "++";
                        assigns.push(val.compileToFragments(o, LEVEL_LIST));
                    }
                }
                continue;
            } else {
                if (obj instanceof Splat || obj instanceof Expansion) {
                    obj.error("multiple splats/expansions are disallowed in an assignment");
                }
                defaultValue = null;
                if (obj instanceof Assign && obj.context === 'object') {
                    ref5 = obj, (ref6 = ref5.variable, idx = ref6.base), obj = ref5.value;
                    if (obj instanceof Assign) {
                        defaultValue = obj.value;
                        obj = obj.variable;
                    }
                } else {
                    if (obj instanceof Assign) {
                        defaultValue = obj.value;
                        obj = obj.variable;
                    }
                    idx = isObject ? obj["this"] ? obj.properties[0].name : new PropertyName(obj.unwrap().value) : new Literal(expandedIdx || idx);
                }
                name = obj.unwrap().value;
                acc = idx.unwrap() instanceof PropertyName;
                val = new Value(new Literal(vvarText), [new (acc ? Access : Index)(idx)]);
                if (defaultValue) {
                    val = new Op('?', val, defaultValue);
                }
            }
            if (name != null) {
                message = isUnassignable(name);
                if (message) {
                    obj.error(message);
                }
            }
            assigns.push(new Assign(obj, val, null, {
                param: this.param,
                subpattern: true
            }).compileToFragments(o, LEVEL_LIST));
        }
        if (!(top || this.subpattern)) {
            assigns.push(vvar);
        }
        fragments = this.joinFragmentArrays(assigns, ', ');
        if (o.level < LEVEL_LIST) {
            return fragments;
        } else {
            return this.wrapInBraces(fragments);
        }
    };

    Assign.prototype.compileConditional = function(o) {
        var fragments, left, ref3, right;
        ref3 = this.variable.cacheReference(o), left = ref3[0], right = ref3[1];
        if (!left.properties.length && left.base instanceof Literal && !(left.base instanceof ThisLiteral) && !o.scope.check(left.base.value)) {
            this.variable.error("the variable \"" + left.base.value + "\" can't be assigned with " + this.context + " because it has not been declared before");
        }
        if (indexOf.call(this.context, "?") >= 0) {
            o.isExistentialEquals = true;
            return new If(new Existence(left), right, {
                type: 'if'
            }).addElse(new Assign(right, this.value, '=')).compileToFragments(o);
        } else {
            fragments = new Op(this.context.slice(0, -1), left, new Assign(right, this.value, '=')).compileToFragments(o);
            if (o.level <= LEVEL_LIST) {
                return fragments;
            } else {
                return this.wrapInBraces(fragments);
            }
        }
    };

    Assign.prototype.compileSpecialMath = function(o) {
        var left, ref3, right;
        ref3 = this.variable.cacheReference(o), left = ref3[0], right = ref3[1];
        return new Assign(left, new Op(this.context.slice(0, -1), right, this.value)).compileToFragments(o);
    };

    Assign.prototype.compileSplice = function(o) {
        var answer, exclusive, from, fromDecl, fromRef, name, ref3, ref4, ref5, to, valDef, valRef;
        ref3 = this.variable.properties.pop().range, from = ref3.from, to = ref3.to, exclusive = ref3.exclusive;
        name = this.variable.compile(o);
        if (from) {
            ref4 = this.cacheToCodeFragments(from.cache(o, LEVEL_OP)), fromDecl = ref4[0], fromRef = ref4[1];
        } else {
            fromDecl = fromRef = '0';
        }
        if (to) {
            if ((from != null ? from.isNumber() : void 0) && to.isNumber()) {
                to = to.compile(o) - fromRef;
                if (!exclusive) {
                    to += 1;
                }
            } else {
                to = to.compile(o, LEVEL_ACCESS) + ' - ' + fromRef;
                if (!exclusive) {
                    to += ' + 1';
                }
            }
        } else {
            to = "9e9";
        }
        ref5 = this.value.cache(o, LEVEL_LIST), valDef = ref5[0], valRef = ref5[1];
        answer = [].concat(this.makeCode("[].splice.apply(" + name + ", [" + fromDecl + ", " + to + "].concat("), valDef, this.makeCode(")), "), valRef);
        if (o.level > LEVEL_TOP) {
            return this.wrapInBraces(answer);
        } else {
            return answer;
        }
    };

    return Assign;

})(Base);

exports.Code = Code = (function(superClass1) {
    extend1(Code, superClass1);

    function Code(params, body, tag) {
        this.params = params || [];
        this.body = body || new Block;
        this.bound = tag === 'boundfunc';
        this.isGenerator = !!this.body.contains(function(node) {
            return (node instanceof Op && node.isYield()) || node instanceof YieldReturn;
        });
    }

    Code.prototype.children = ['params', 'body'];

    Code.prototype.isStatement = function() {
        return !!this.ctor;
    };

    Code.prototype.jumps = NO;

    Code.prototype.makeScope = function(parentScope) {
        return new Scope(parentScope, this.body, this);
    };

    Code.prototype.compileNode = function(o) {
        var answer, boundfunc, code, exprs, i, j, k, l, len1, len2, len3, len4, len5, len6, lit, m, p, param, params, q, r, ref, ref3, ref4, ref5, ref6, ref7, ref8, splats, uniqs, val, wasEmpty, wrapper;
        if (this.bound && ((ref3 = o.scope.method) != null ? ref3.bound : void 0)) {
            this.context = o.scope.method.context;
        }
        if (this.bound && !this.context) {
            this.context = '_this';
            wrapper = new Code([new Param(new IdentifierLiteral(this.context))], new Block([this]));
            boundfunc = new Call(wrapper, [new ThisLiteral]);
            boundfunc.updateLocationDataIfMissing(this.locationData);
            return boundfunc.compileNode(o);
        }
        o.scope = del(o, 'classScope') || this.makeScope(o.scope);
        o.scope.shared = del(o, 'sharedScope');
        o.indent += TAB;
        delete o.bare;
        delete o.isExistentialEquals;
        params = [];
        exprs = [];
        ref4 = this.params;
        for (j = 0, len1 = ref4.length; j < len1; j++) {
            param = ref4[j];
            if (!(param instanceof Expansion)) {
                o.scope.parameter(param.asReference(o));
            }
        }
        ref5 = this.params;
        for (k = 0, len2 = ref5.length; k < len2; k++) {
            param = ref5[k];
            if (!(param.splat || param instanceof Expansion)) {
                continue;
            }
            ref6 = this.params;
            for (l = 0, len3 = ref6.length; l < len3; l++) {
                p = ref6[l];
                if (!(p instanceof Expansion) && p.name.value) {
                    o.scope.add(p.name.value, 'var', true);
                }
            }
            splats = new Assign(new Value(new Arr((function() {
                var len4, m, ref7, results;
                ref7 = this.params;
                results = [];
                for (m = 0, len4 = ref7.length; m < len4; m++) {
                    p = ref7[m];
                    results.push(p.asReference(o));
                }
                return results;
            }).call(this))), new Value(new IdentifierLiteral('arguments')));
            break;
        }
        ref7 = this.params;
        for (m = 0, len4 = ref7.length; m < len4; m++) {
            param = ref7[m];
            if (param.isComplex()) {
                val = ref = param.asReference(o);
                if (param.value) {
                    val = new Op('?', ref, param.value);
                }
                exprs.push(new Assign(new Value(param.name), val, '=', {
                    param: true
                }));
            } else {
                ref = param;
                if (param.value) {
                    lit = new Literal(ref.name.value + ' == null');
                    val = new Assign(new Value(param.name), param.value, '=');
                    exprs.push(new If(lit, val));
                }
            }
            if (!splats) {
                params.push(ref);
            }
        }
        wasEmpty = this.body.isEmpty();
        if (splats) {
            exprs.unshift(splats);
        }
        if (exprs.length) {
            (ref8 = this.body.expressions).unshift.apply(ref8, exprs);
        }
        for (i = q = 0, len5 = params.length; q < len5; i = ++q) {
            p = params[i];
            params[i] = p.compileToFragments(o);
            o.scope.parameter(fragmentsToText(params[i]));
        }
        uniqs = [];
        this.eachParamName(function(name, node) {
            if (indexOf.call(uniqs, name) >= 0) {
                node.error("multiple parameters named " + name);
            }
            return uniqs.push(name);
        });
        if (!(wasEmpty || this.noReturn)) {
            this.body.makeReturn();
        }
        code = 'function';
        if (this.isGenerator) {
            code += '*';
        }
        if (this.ctor) {
            code += ' ' + this.name;
        }
        code += '(';
        answer = [this.makeCode(code)];
        for (i = r = 0, len6 = params.length; r < len6; i = ++r) {
            p = params[i];
            if (i) {
                answer.push(this.makeCode(", "));
            }
            answer.push.apply(answer, p);
        }
        answer.push(this.makeCode(') {'));
        if (!this.body.isEmpty()) {
            answer = answer.concat(this.makeCode("\n"), this.body.compileWithDeclarations(o), this.makeCode("\n" + this.tab));
        }
        answer.push(this.makeCode('}'));
        if (this.ctor) {
            return [this.makeCode(this.tab)].concat(slice.call(answer));
        }
        if (this.front || (o.level >= LEVEL_ACCESS)) {
            return this.wrapInBraces(answer);
        } else {
            return answer;
        }
    };

    Code.prototype.eachParamName = function(iterator) {
        var j, len1, param, ref3, results;
        ref3 = this.params;
        results = [];
        for (j = 0, len1 = ref3.length; j < len1; j++) {
            param = ref3[j];
            results.push(param.eachName(iterator));
        }
        return results;
    };

    Code.prototype.traverseChildren = function(crossScope, func) {
        if (crossScope) {
            return Code.__super__.traverseChildren.call(this, crossScope, func);
        }
    };

    return Code;

})(Base);

exports.Param = Param = (function(superClass1) {
    extend1(Param, superClass1);

    function Param(name1, value1, splat) {
        var message;
        this.name = name1;
        this.value = value1;
        this.splat = splat;
        message = isUnassignable(this.name.unwrapAll().value);
        if (message) {
            this.name.error(message);
        }
    }

    Param.prototype.children = ['name', 'value'];

    Param.prototype.compileToFragments = function(o) {
        return this.name.compileToFragments(o, LEVEL_LIST);
    };

    Param.prototype.asReference = function(o) {
        var name, node;
        if (this.reference) {
            return this.reference;
        }
        node = this.name;
        if (node["this"]) {
            name = node.properties[0].name.value;
            if (indexOf.call(JS_FORBIDDEN, name) >= 0) {
                name = "_" + name;
            }
            node = new IdentifierLiteral(o.scope.freeVariable(name));
        } else if (node.isComplex()) {
            node = new IdentifierLiteral(o.scope.freeVariable('arg'));
        }
        node = new Value(node);
        if (this.splat) {
            node = new Splat(node);
        }
        node.updateLocationDataIfMissing(this.locationData);
        return this.reference = node;
    };

    Param.prototype.isComplex = function() {
        return this.name.isComplex();
    };

    Param.prototype.eachName = function(iterator, name) {
        var atParam, j, len1, node, obj, ref3, ref4;
        if (name == null) {
            name = this.name;
        }
        atParam = function(obj) {
            return iterator("@" + obj.properties[0].name.value, obj);
        };
        if (name instanceof IdentifierLiteral) {
            if (name instanceof NullLiteral) {
                return;
            }
            return iterator(name.value, name);
        }
        if (name instanceof Value) {
            return atParam(name);
        }
        ref4 = (ref3 = name.objects) != null ? ref3 : [];
        for (j = 0, len1 = ref4.length; j < len1; j++) {
            obj = ref4[j];
            if (obj instanceof Assign && (obj.context == null)) {
                obj = obj.variable;
            }
            if (obj instanceof Assign) {
                if (obj.value instanceof Assign) {
                    obj = obj.value;
                }
                this.eachName(iterator, obj.value.unwrap());
            } else if (obj instanceof Splat) {
                node = obj.name.unwrap();
                iterator(node.value, node);
            } else if (obj instanceof Value) {
                if (obj.isArray() || obj.isObject()) {
                    this.eachName(iterator, obj.base);
                } else if (obj["this"]) {
                    atParam(obj);
                } else {
                    iterator(obj.base.value, obj.base);
                }
            } else if (!(obj instanceof Expansion)) {
                obj.error("illegal parameter " + (obj.compile()));
            }
        }
    };

    return Param;

})(Base);

exports.Splat = Splat = (function(superClass1) {
    extend1(Splat, superClass1);

    Splat.prototype.children = ['name'];

    Splat.prototype.isAssignable = YES;

    function Splat(name) {
        this.name = name.compile ? name : new Literal(name);
    }

    Splat.prototype.assigns = function(name) {
        return this.name.assigns(name);
    };

    Splat.prototype.compileNode = function(o) {
        return this.name.compileToFragments(o);
    };

    Splat.prototype.unwrap = function() {
        return this.name;
    };

    Splat.compileSplattedArray = function(o, list, apply) {
        var args, base, compiledNode, concatPart, fragments, i, index, j, last, len1, node;
        index = -1;
        while ((node = list[++index]) && !(node instanceof Splat)) {
            continue;
        }
        if (index >= list.length) {
            return [];
        }
        if (list.length === 1) {
            node = list[0];
            fragments = node.compileToFragments(o, LEVEL_LIST);
            if (apply) {
                return fragments;
            }
            return [].concat(node.makeCode((utility('slice', o)) + ".call("), fragments, node.makeCode(")"));
        }
        args = list.slice(index);
        for (i = j = 0, len1 = args.length; j < len1; i = ++j) {
            node = args[i];
            compiledNode = node.compileToFragments(o, LEVEL_LIST);
            args[i] = node instanceof Splat ? [].concat(node.makeCode((utility('slice', o)) + ".call("), compiledNode, node.makeCode(")")) : [].concat(node.makeCode("["), compiledNode, node.makeCode("]"));
        }
        if (index === 0) {
            node = list[0];
            concatPart = node.joinFragmentArrays(args.slice(1), ', ');
            return args[0].concat(node.makeCode(".concat("), concatPart, node.makeCode(")"));
        }
        base = (function() {
            var k, len2, ref3, results;
            ref3 = list.slice(0, index);
            results = [];
            for (k = 0, len2 = ref3.length; k < len2; k++) {
                node = ref3[k];
                results.push(node.compileToFragments(o, LEVEL_LIST));
            }
            return results;
        })();
        base = list[0].joinFragmentArrays(base, ', ');
        concatPart = list[index].joinFragmentArrays(args, ', ');
        last = list[list.length - 1];
        return [].concat(list[0].makeCode("["), base, list[index].makeCode("].concat("), concatPart, last.makeCode(")"));
    };

    return Splat;

})(Base);

exports.Expansion = Expansion = (function(superClass1) {
    extend1(Expansion, superClass1);

    function Expansion() {
        return Expansion.__super__.constructor.apply(this, arguments);
    }

    Expansion.prototype.isComplex = NO;

    Expansion.prototype.compileNode = function(o) {
        return this.error('Expansion must be used inside a destructuring assignment or parameter list');
    };

    Expansion.prototype.asReference = function(o) {
        return this;
    };

    Expansion.prototype.eachName = function(iterator) {};

    return Expansion;

})(Base);

exports.While = While = (function(superClass1) {
    extend1(While, superClass1);

    function While(condition, options) {
        this.condition = (options != null ? options.invert : void 0) ? condition.invert() : condition;
        this.guard = options != null ? options.guard : void 0;
    }

    While.prototype.children = ['condition', 'guard', 'body'];

    While.prototype.isStatement = YES;

    While.prototype.makeReturn = function(res) {
        if (res) {
            return While.__super__.makeReturn.apply(this, arguments);
        } else {
            this.returns = !this.jumps({
                loop: true
            });
            return this;
        }
    };

    While.prototype.addBody = function(body1) {
        this.body = body1;
        return this;
    };

    While.prototype.jumps = function() {
        var expressions, j, jumpNode, len1, node;
        expressions = this.body.expressions;
        if (!expressions.length) {
            return false;
        }
        for (j = 0, len1 = expressions.length; j < len1; j++) {
            node = expressions[j];
            if (jumpNode = node.jumps({
                loop: true
            })) {
                return jumpNode;
            }
        }
        return false;
    };

    While.prototype.compileNode = function(o) {
        var answer, body, rvar, set;
        o.indent += TAB;
        set = '';
        body = this.body;
        if (body.isEmpty()) {
            body = this.makeCode('');
        } else {
            if (this.returns) {
                body.makeReturn(rvar = o.scope.freeVariable('results'));
                set = "" + this.tab + rvar + " = [];\n";
            }
            if (this.guard) {
                if (body.expressions.length > 1) {
                    body.expressions.unshift(new If((new Parens(this.guard)).invert(), new StatementLiteral("continue")));
                } else {
                    if (this.guard) {
                        body = Block.wrap([new If(this.guard, body)]);
                    }
                }
            }
            body = [].concat(this.makeCode("\n"), body.compileToFragments(o, LEVEL_TOP), this.makeCode("\n" + this.tab));
        }
        answer = [].concat(this.makeCode(set + this.tab + "while ("), this.condition.compileToFragments(o, LEVEL_PAREN), this.makeCode(") {"), body, this.makeCode("}"));
        if (this.returns) {
            answer.push(this.makeCode("\n" + this.tab + "return " + rvar + ";"));
        }
        return answer;
    };

    return While;

})(Base);

exports.Op = Op = (function(superClass1) {
    var CONVERSIONS, INVERSIONS;

    extend1(Op, superClass1);

    function Op(op, first, second, flip) {
        if (op === 'in') {
            return new In(first, second);
        }
        if (op === 'do') {
            return this.generateDo(first);
        }
        if (op === 'new') {
            if (first instanceof Call && !first["do"] && !first.isNew) {
                return first.newInstance();
            }
            if (first instanceof Code && first.bound || first["do"]) {
                first = new Parens(first);
            }
        }
        this.operator = CONVERSIONS[op] || op;
        this.first = first;
        this.second = second;
        this.flip = !!flip;
        return this;
    }

    CONVERSIONS = {
        '==': '===',
        '!=': '!==',
        'of': 'in',
        'yieldfrom': 'yield*'
    };

    INVERSIONS = {
        '!==': '===',
        '===': '!=='
    };

    Op.prototype.children = ['first', 'second'];

    Op.prototype.isNumber = function() {
        var ref3;
        return this.isUnary() && ((ref3 = this.operator) === '+' || ref3 === '-') && this.first instanceof Value && this.first.isNumber();
    };

    Op.prototype.isYield = function() {
        var ref3;
        return (ref3 = this.operator) === 'yield' || ref3 === 'yield*';
    };

    Op.prototype.isUnary = function() {
        return !this.second;
    };

    Op.prototype.isComplex = function() {
        return !this.isNumber();
    };

    Op.prototype.isChainable = function() {
        var ref3;
        return (ref3 = this.operator) === '<' || ref3 === '>' || ref3 === '>=' || ref3 === '<=' || ref3 === '===' || ref3 === '!==';
    };

    Op.prototype.invert = function() {
        var allInvertable, curr, fst, op, ref3;
        if (this.isChainable() && this.first.isChainable()) {
            allInvertable = true;
            curr = this;
            while (curr && curr.operator) {
                allInvertable && (allInvertable = curr.operator in INVERSIONS);
                curr = curr.first;
            }
            if (!allInvertable) {
                return new Parens(this).invert();
            }
            curr = this;
            while (curr && curr.operator) {
                curr.invert = !curr.invert;
                curr.operator = INVERSIONS[curr.operator];
                curr = curr.first;
            }
            return this;
        } else if (op = INVERSIONS[this.operator]) {
            this.operator = op;
            if (this.first.unwrap() instanceof Op) {
                this.first.invert();
            }
            return this;
        } else if (this.second) {
            return new Parens(this).invert();
        } else if (this.operator === '!' && (fst = this.first.unwrap()) instanceof Op && ((ref3 = fst.operator) === '!' || ref3 === 'in' || ref3 === 'instanceof')) {
            return fst;
        } else {
            return new Op('!', this);
        }
    };

    Op.prototype.unfoldSoak = function(o) {
        var ref3;
        return ((ref3 = this.operator) === '++' || ref3 === '--' || ref3 === 'delete') && unfoldSoak(o, this, 'first');
    };

    Op.prototype.generateDo = function(exp) {
        var call, func, j, len1, param, passedParams, ref, ref3;
        passedParams = [];
        func = exp instanceof Assign && (ref = exp.value.unwrap()) instanceof Code ? ref : exp;
        ref3 = func.params || [];
        for (j = 0, len1 = ref3.length; j < len1; j++) {
            param = ref3[j];
            if (param.value) {
                passedParams.push(param.value);
                delete param.value;
            } else {
                passedParams.push(param);
            }
        }
        call = new Call(exp, passedParams);
        call["do"] = true;
        return call;
    };

    Op.prototype.compileNode = function(o) {
        var answer, isChain, lhs, message, ref3, rhs;
        isChain = this.isChainable() && this.first.isChainable();
        if (!isChain) {
            this.first.front = this.front;
        }
        if (this.operator === 'delete' && o.scope.check(this.first.unwrapAll().value)) {
            this.error('delete operand may not be argument or var');
        }
        if ((ref3 = this.operator) === '--' || ref3 === '++') {
            message = isUnassignable(this.first.unwrapAll().value);
            if (message) {
                this.first.error(message);
            }
        }
        if (this.isYield()) {
            return this.compileYield(o);
        }
        if (this.isUnary()) {
            return this.compileUnary(o);
        }
        if (isChain) {
            return this.compileChain(o);
        }
        switch (this.operator) {
            case '?':
                return this.compileExistence(o);
            case '**':
                return this.compilePower(o);
            case '//':
                return this.compileFloorDivision(o);
            case '%%':
                return this.compileModulo(o);
            default:
                lhs = this.first.compileToFragments(o, LEVEL_OP);
                rhs = this.second.compileToFragments(o, LEVEL_OP);
                answer = [].concat(lhs, this.makeCode(" " + this.operator + " "), rhs);
                if (o.level <= LEVEL_OP) {
                    return answer;
                } else {
                    return this.wrapInBraces(answer);
                }
        }
    };

    Op.prototype.compileChain = function(o) {
        var fragments, fst, ref3, shared;
        ref3 = this.first.second.cache(o), this.first.second = ref3[0], shared = ref3[1];
        fst = this.first.compileToFragments(o, LEVEL_OP);
        fragments = fst.concat(this.makeCode(" " + (this.invert ? '&&' : '||') + " "), shared.compileToFragments(o), this.makeCode(" " + this.operator + " "), this.second.compileToFragments(o, LEVEL_OP));
        return this.wrapInBraces(fragments);
    };

    Op.prototype.compileExistence = function(o) {
        var fst, ref;
        if (this.first.isComplex()) {
            ref = new IdentifierLiteral(o.scope.freeVariable('ref'));
            fst = new Parens(new Assign(ref, this.first));
        } else {
            fst = this.first;
            ref = fst;
        }
        return new If(new Existence(fst), ref, {
            type: 'if'
        }).addElse(this.second).compileToFragments(o);
    };

    Op.prototype.compileUnary = function(o) {
        var op, parts, plusMinus;
        parts = [];
        op = this.operator;
        parts.push([this.makeCode(op)]);
        if (op === '!' && this.first instanceof Existence) {
            this.first.negated = !this.first.negated;
            return this.first.compileToFragments(o);
        }
        if (o.level >= LEVEL_ACCESS) {
            return (new Parens(this)).compileToFragments(o);
        }
        plusMinus = op === '+' || op === '-';
        if ((op === 'new' || op === 'typeof' || op === 'delete') || plusMinus && this.first instanceof Op && this.first.operator === op) {
            parts.push([this.makeCode(' ')]);
        }
        if ((plusMinus && this.first instanceof Op) || (op === 'new' && this.first.isStatement(o))) {
            this.first = new Parens(this.first);
        }
        parts.push(this.first.compileToFragments(o, LEVEL_OP));
        if (this.flip) {
            parts.reverse();
        }
        return this.joinFragmentArrays(parts, '');
    };

    Op.prototype.compileYield = function(o) {
        var op, parts, ref3;
        parts = [];
        op = this.operator;
        if (o.scope.parent == null) {
            this.error('yield can only occur inside functions');
        }
        if (indexOf.call(Object.keys(this.first), 'expression') >= 0 && !(this.first instanceof Throw)) {
            if (this.first.expression != null) {
                parts.push(this.first.expression.compileToFragments(o, LEVEL_OP));
            }
        } else {
            if (o.level >= LEVEL_PAREN) {
                parts.push([this.makeCode("(")]);
            }
            parts.push([this.makeCode(op)]);
            if (((ref3 = this.first.base) != null ? ref3.value : void 0) !== '') {
                parts.push([this.makeCode(" ")]);
            }
            parts.push(this.first.compileToFragments(o, LEVEL_OP));
            if (o.level >= LEVEL_PAREN) {
                parts.push([this.makeCode(")")]);
            }
        }
        return this.joinFragmentArrays(parts, '');
    };

    Op.prototype.compilePower = function(o) {
        var pow;
        pow = new Value(new IdentifierLiteral('Math'), [new Access(new PropertyName('pow'))]);
        return new Call(pow, [this.first, this.second]).compileToFragments(o);
    };

    Op.prototype.compileFloorDivision = function(o) {
        var div, floor, second;
        floor = new Value(new IdentifierLiteral('Math'), [new Access(new PropertyName('floor'))]);
        second = this.second.isComplex() ? new Parens(this.second) : this.second;
        div = new Op('/', this.first, second);
        return new Call(floor, [div]).compileToFragments(o);
    };

    Op.prototype.compileModulo = function(o) {
        var mod;
        mod = new Value(new Literal(utility('modulo', o)));
        return new Call(mod, [this.first, this.second]).compileToFragments(o);
    };

    Op.prototype.toString = function(idt) {
        return Op.__super__.toString.call(this, idt, this.constructor.name + ' ' + this.operator);
    };

    return Op;

})(Base);

exports.In = In = (function(superClass1) {
    extend1(In, superClass1);

    function In(object, array) {
        this.object = object;
        this.array = array;
    }

    In.prototype.children = ['object', 'array'];

    In.prototype.invert = NEGATE;

    In.prototype.compileNode = function(o) {
        var hasSplat, j, len1, obj, ref3;
        if (this.array instanceof Value && this.array.isArray() && this.array.base.objects.length) {
            ref3 = this.array.base.objects;
            for (j = 0, len1 = ref3.length; j < len1; j++) {
                obj = ref3[j];
                if (!(obj instanceof Splat)) {
                    continue;
                }
                hasSplat = true;
                break;
            }
            if (!hasSplat) {
                return this.compileOrTest(o);
            }
        }
        return this.compileLoopTest(o);
    };

    In.prototype.compileOrTest = function(o) {
        var cmp, cnj, i, item, j, len1, ref, ref3, ref4, ref5, sub, tests;
        ref3 = this.object.cache(o, LEVEL_OP), sub = ref3[0], ref = ref3[1];
        ref4 = this.negated ? [' !== ', ' && '] : [' === ', ' || '], cmp = ref4[0], cnj = ref4[1];
        tests = [];
        ref5 = this.array.base.objects;
        for (i = j = 0, len1 = ref5.length; j < len1; i = ++j) {
            item = ref5[i];
            if (i) {
                tests.push(this.makeCode(cnj));
            }
            tests = tests.concat((i ? ref : sub), this.makeCode(cmp), item.compileToFragments(o, LEVEL_ACCESS));
        }
        if (o.level < LEVEL_OP) {
            return tests;
        } else {
            return this.wrapInBraces(tests);
        }
    };

    In.prototype.compileLoopTest = function(o) {
        var fragments, ref, ref3, sub;
        ref3 = this.object.cache(o, LEVEL_LIST), sub = ref3[0], ref = ref3[1];
        fragments = [].concat(this.makeCode(utility('indexOf', o) + ".call("), this.array.compileToFragments(o, LEVEL_LIST), this.makeCode(", "), ref, this.makeCode(") " + (this.negated ? '< 0' : '>= 0')));
        if (fragmentsToText(sub) === fragmentsToText(ref)) {
            return fragments;
        }
        fragments = sub.concat(this.makeCode(', '), fragments);
        if (o.level < LEVEL_LIST) {
            return fragments;
        } else {
            return this.wrapInBraces(fragments);
        }
    };

    In.prototype.toString = function(idt) {
        return In.__super__.toString.call(this, idt, this.constructor.name + (this.negated ? '!' : ''));
    };

    return In;

})(Base);

exports.Try = Try = (function(superClass1) {
    extend1(Try, superClass1);

    function Try(attempt, errorVariable, recovery, ensure) {
        this.attempt = attempt;
        this.errorVariable = errorVariable;
        this.recovery = recovery;
        this.ensure = ensure;
    }

    Try.prototype.children = ['attempt', 'recovery', 'ensure'];

    Try.prototype.isStatement = YES;

    Try.prototype.jumps = function(o) {
        var ref3;
        return this.attempt.jumps(o) || ((ref3 = this.recovery) != null ? ref3.jumps(o) : void 0);
    };

    Try.prototype.makeReturn = function(res) {
        if (this.attempt) {
            this.attempt = this.attempt.makeReturn(res);
        }
        if (this.recovery) {
            this.recovery = this.recovery.makeReturn(res);
        }
        return this;
    };

    Try.prototype.compileNode = function(o) {
        var catchPart, ensurePart, generatedErrorVariableName, message, placeholder, tryPart;
        o.indent += TAB;
        tryPart = this.attempt.compileToFragments(o, LEVEL_TOP);
        catchPart = this.recovery ? (generatedErrorVariableName = o.scope.freeVariable('error', {
            reserve: false
        }), placeholder = new IdentifierLiteral(generatedErrorVariableName), this.errorVariable ? (message = isUnassignable(this.errorVariable.unwrapAll().value), message ? this.errorVariable.error(message) : void 0, this.recovery.unshift(new Assign(this.errorVariable, placeholder))) : void 0, [].concat(this.makeCode(" catch ("), placeholder.compileToFragments(o), this.makeCode(") {\n"), this.recovery.compileToFragments(o, LEVEL_TOP), this.makeCode("\n" + this.tab + "}"))) : !(this.ensure || this.recovery) ? (generatedErrorVariableName = o.scope.freeVariable('error', {
            reserve: false
        }), [this.makeCode(" catch (" + generatedErrorVariableName + ") {}")]) : [];
        ensurePart = this.ensure ? [].concat(this.makeCode(" finally {\n"), this.ensure.compileToFragments(o, LEVEL_TOP), this.makeCode("\n" + this.tab + "}")) : [];
        return [].concat(this.makeCode(this.tab + "try {\n"), tryPart, this.makeCode("\n" + this.tab + "}"), catchPart, ensurePart);
    };

    return Try;

})(Base);

exports.Throw = Throw = (function(superClass1) {
    extend1(Throw, superClass1);

    function Throw(expression) {
        this.expression = expression;
    }

    Throw.prototype.children = ['expression'];

    Throw.prototype.isStatement = YES;

    Throw.prototype.jumps = NO;

    Throw.prototype.makeReturn = THIS;

    Throw.prototype.compileNode = function(o) {
        return [].concat(this.makeCode(this.tab + "throw "), this.expression.compileToFragments(o), this.makeCode(";"));
    };

    return Throw;

})(Base);

exports.Existence = Existence = (function(superClass1) {
    extend1(Existence, superClass1);

    function Existence(expression) {
        this.expression = expression;
    }

    Existence.prototype.children = ['expression'];

    Existence.prototype.invert = NEGATE;

    Existence.prototype.compileNode = function(o) {
        var cmp, cnj, code, ref3;
        this.expression.front = this.front;
        code = this.expression.compile(o, LEVEL_OP);
        if (this.expression.unwrap() instanceof IdentifierLiteral && !o.scope.check(code)) {
            ref3 = this.negated ? ['===', '||'] : ['!==', '&&'], cmp = ref3[0], cnj = ref3[1];
            code = "typeof " + code + " " + cmp + " \"undefined\" " + cnj + " " + code + " " + cmp + " null";
        } else {
            code = code + " " + (this.negated ? '==' : '!=') + " null";
        }
        return [this.makeCode(o.level <= LEVEL_COND ? code : "(" + code + ")")];
    };

    return Existence;

})(Base);

exports.Parens = Parens = (function(superClass1) {
    extend1(Parens, superClass1);

    function Parens(body1) {
        this.body = body1;
    }

    Parens.prototype.children = ['body'];

    Parens.prototype.unwrap = function() {
        return this.body;
    };

    Parens.prototype.isComplex = function() {
        return this.body.isComplex();
    };

    Parens.prototype.compileNode = function(o) {
        var bare, expr, fragments;
        expr = this.body.unwrap();
        if (expr instanceof Value && expr.isAtomic()) {
            expr.front = this.front;
            return expr.compileToFragments(o);
        }
        fragments = expr.compileToFragments(o, LEVEL_PAREN);
        bare = o.level < LEVEL_OP && (expr instanceof Op || expr instanceof Call || (expr instanceof For && expr.returns)) && (o.level < LEVEL_COND || fragments.length <= 3);
        if (bare) {
            return fragments;
        } else {
            return this.wrapInBraces(fragments);
        }
    };

    return Parens;

})(Base);

exports.StringWithInterpolations = StringWithInterpolations = (function(superClass1) {
    extend1(StringWithInterpolations, superClass1);

    function StringWithInterpolations() {
        return StringWithInterpolations.__super__.constructor.apply(this, arguments);
    }

    StringWithInterpolations.prototype.compileNode = function(o) {
        var element, elements, expr, fragments, j, len1, value;
        if (!o.inTaggedTemplateCall) {
            return StringWithInterpolations.__super__.compileNode.apply(this, arguments);
        }
        expr = this.body.unwrap();
        elements = [];
        expr.traverseChildren(false, function(node) {
            if (node instanceof StringLiteral) {
                elements.push(node);
                return true;
            } else if (node instanceof Parens) {
                elements.push(node);
                return false;
            }
            return true;
        });
        fragments = [];
        fragments.push(this.makeCode('`'));
        for (j = 0, len1 = elements.length; j < len1; j++) {
            element = elements[j];
            if (element instanceof StringLiteral) {
                value = element.value.slice(1, -1);
                value = value.replace(/(\\*)(`|\$\{)/g, function(match, backslashes, toBeEscaped) {
                    if (backslashes.length % 2 === 0) {
                        return backslashes + "\\" + toBeEscaped;
                    } else {
                        return match;
                    }
                });
                fragments.push(this.makeCode(value));
            } else {
                fragments.push(this.makeCode('${'));
                fragments.push.apply(fragments, element.compileToFragments(o, LEVEL_PAREN));
                fragments.push(this.makeCode('}'));
            }
        }
        fragments.push(this.makeCode('`'));
        return fragments;
    };

    return StringWithInterpolations;

})(Parens);

exports.For = For = (function(superClass1) {
    extend1(For, superClass1);

    function For(body, source) {
        var ref3;
        this.source = source.source, this.guard = source.guard, this.step = source.step, this.name = source.name, this.index = source.index;
        this.body = Block.wrap([body]);
        this.own = !!source.own;
        this.object = !!source.object;
        this.from = !!source.from;
        if (this.from && this.index) {
            this.index.error('cannot use index with for-from');
        }
        if (this.own && !this.object) {
            source.ownTag.error("cannot use own with for-" + (this.from ? 'from' : 'in'));
        }
        if (this.object) {
            ref3 = [this.index, this.name], this.name = ref3[0], this.index = ref3[1];
        }
        if (this.index instanceof Value && !this.index.isAssignable()) {
            this.index.error('index cannot be a pattern matching expression');
        }
        this.range = this.source instanceof Value && this.source.base instanceof Range && !this.source.properties.length && !this.from;
        this.pattern = this.name instanceof Value;
        if (this.range && this.index) {
            this.index.error('indexes do not apply to range loops');
        }
        if (this.range && this.pattern) {
            this.name.error('cannot pattern match over range loops');
        }
        this.returns = false;
    }

    For.prototype.children = ['body', 'source', 'guard', 'step'];

    For.prototype.compileNode = function(o) {
        var body, bodyFragments, compare, compareDown, declare, declareDown, defPart, defPartFragments, down, forPartFragments, guardPart, idt1, increment, index, ivar, kvar, kvarAssign, last, lvar, name, namePart, ref, ref3, ref4, resultPart, returnResult, rvar, scope, source, step, stepNum, stepVar, svar, varPart;
        body = Block.wrap([this.body]);
        ref3 = body.expressions, last = ref3[ref3.length - 1];
        if ((last != null ? last.jumps() : void 0) instanceof Return) {
            this.returns = false;
        }
        source = this.range ? this.source.base : this.source;
        scope = o.scope;
        if (!this.pattern) {
            name = this.name && (this.name.compile(o, LEVEL_LIST));
        }
        index = this.index && (this.index.compile(o, LEVEL_LIST));
        if (name && !this.pattern) {
            scope.find(name);
        }
        if (index && !(this.index instanceof Value)) {
            scope.find(index);
        }
        if (this.returns) {
            rvar = scope.freeVariable('results');
        }
        if (this.from) {
            if (this.pattern) {
                ivar = scope.freeVariable('x', {
                    single: true
                });
            }
        } else {
            ivar = (this.object && index) || scope.freeVariable('i', {
                single: true
            });
        }
        kvar = ((this.range || this.from) && name) || index || ivar;
        kvarAssign = kvar !== ivar ? kvar + " = " : "";
        if (this.step && !this.range) {
            ref4 = this.cacheToCodeFragments(this.step.cache(o, LEVEL_LIST, isComplexOrAssignable)), step = ref4[0], stepVar = ref4[1];
            if (this.step.isNumber()) {
                stepNum = Number(stepVar);
            }
        }
        if (this.pattern) {
            name = ivar;
        }
        varPart = '';
        guardPart = '';
        defPart = '';
        idt1 = this.tab + TAB;
        if (this.range) {
            forPartFragments = source.compileToFragments(merge(o, {
                index: ivar,
                name: name,
                step: this.step,
                isComplex: isComplexOrAssignable
            }));
        } else {
            svar = this.source.compile(o, LEVEL_LIST);
            if ((name || this.own) && !(this.source.unwrap() instanceof IdentifierLiteral)) {
                defPart += "" + this.tab + (ref = scope.freeVariable('ref')) + " = " + svar + ";\n";
                svar = ref;
            }
            if (name && !this.pattern && !this.from) {
                namePart = name + " = " + svar + "[" + kvar + "]";
            }
            if (!this.object && !this.from) {
                if (step !== stepVar) {
                    defPart += "" + this.tab + step + ";\n";
                }
                down = stepNum < 0;
                if (!(this.step && (stepNum != null) && down)) {
                    lvar = scope.freeVariable('len');
                }
                declare = "" + kvarAssign + ivar + " = 0, " + lvar + " = " + svar + ".length";
                declareDown = "" + kvarAssign + ivar + " = " + svar + ".length - 1";
                compare = ivar + " < " + lvar;
                compareDown = ivar + " >= 0";
                if (this.step) {
                    if (stepNum != null) {
                        if (down) {
                            compare = compareDown;
                            declare = declareDown;
                        }
                    } else {
                        compare = stepVar + " > 0 ? " + compare + " : " + compareDown;
                        declare = "(" + stepVar + " > 0 ? (" + declare + ") : " + declareDown + ")";
                    }
                    increment = ivar + " += " + stepVar;
                } else {
                    increment = "" + (kvar !== ivar ? "++" + ivar : ivar + "++");
                }
                forPartFragments = [this.makeCode(declare + "; " + compare + "; " + kvarAssign + increment)];
            }
        }
        if (this.returns) {
            resultPart = "" + this.tab + rvar + " = [];\n";
            returnResult = "\n" + this.tab + "return " + rvar + ";";
            body.makeReturn(rvar);
        }
        if (this.guard) {
            if (body.expressions.length > 1) {
                body.expressions.unshift(new If((new Parens(this.guard)).invert(), new StatementLiteral("continue")));
            } else {
                if (this.guard) {
                    body = Block.wrap([new If(this.guard, body)]);
                }
            }
        }
        if (this.pattern) {
            body.expressions.unshift(new Assign(this.name, this.from ? new IdentifierLiteral(kvar) : new Literal(svar + "[" + kvar + "]")));
        }
        defPartFragments = [].concat(this.makeCode(defPart), this.pluckDirectCall(o, body));
        if (namePart) {
            varPart = "\n" + idt1 + namePart + ";";
        }
        if (this.object) {
            forPartFragments = [this.makeCode(kvar + " in " + svar)];
            if (this.own) {
                guardPart = "\n" + idt1 + "if (!" + (utility('hasProp', o)) + ".call(" + svar + ", " + kvar + ")) continue;";
            }
        } else if (this.from) {
            forPartFragments = [this.makeCode(kvar + " of " + svar)];
        }
        bodyFragments = body.compileToFragments(merge(o, {
            indent: idt1
        }), LEVEL_TOP);
        if (bodyFragments && bodyFragments.length > 0) {
            bodyFragments = [].concat(this.makeCode("\n"), bodyFragments, this.makeCode("\n"));
        }
        return [].concat(defPartFragments, this.makeCode("" + (resultPart || '') + this.tab + "for ("), forPartFragments, this.makeCode(") {" + guardPart + varPart), bodyFragments, this.makeCode(this.tab + "}" + (returnResult || '')));
    };

    For.prototype.pluckDirectCall = function(o, body) {
        var base, defs, expr, fn, idx, j, len1, ref, ref3, ref4, ref5, ref6, ref7, ref8, ref9, val;
        defs = [];
        ref3 = body.expressions;
        for (idx = j = 0, len1 = ref3.length; j < len1; idx = ++j) {
            expr = ref3[idx];
            expr = expr.unwrapAll();
            if (!(expr instanceof Call)) {
                continue;
            }
            val = (ref4 = expr.variable) != null ? ref4.unwrapAll() : void 0;
            if (!((val instanceof Code) || (val instanceof Value && ((ref5 = val.base) != null ? ref5.unwrapAll() : void 0) instanceof Code && val.properties.length === 1 && ((ref6 = (ref7 = val.properties[0].name) != null ? ref7.value : void 0) === 'call' || ref6 === 'apply')))) {
                continue;
            }
            fn = ((ref8 = val.base) != null ? ref8.unwrapAll() : void 0) || val;
            ref = new IdentifierLiteral(o.scope.freeVariable('fn'));
            base = new Value(ref);
            if (val.base) {
                ref9 = [base, val], val.base = ref9[0], base = ref9[1];
            }
            body.expressions[idx] = new Call(base, expr.args);
            defs = defs.concat(this.makeCode(this.tab), new Assign(ref, fn).compileToFragments(o, LEVEL_TOP), this.makeCode(';\n'));
        }
        return defs;
    };

    return For;

})(While);

exports.Switch = Switch = (function(superClass1) {
    extend1(Switch, superClass1);

    function Switch(subject, cases, otherwise) {
        this.subject = subject;
        this.cases = cases;
        this.otherwise = otherwise;
    }

    Switch.prototype.children = ['subject', 'cases', 'otherwise'];

    Switch.prototype.isStatement = YES;

    Switch.prototype.jumps = function(o) {
        var block, conds, j, jumpNode, len1, ref3, ref4, ref5;
        if (o == null) {
            o = {
                block: true
            };
        }
        ref3 = this.cases;
        for (j = 0, len1 = ref3.length; j < len1; j++) {
            ref4 = ref3[j], conds = ref4[0], block = ref4[1];
            if (jumpNode = block.jumps(o)) {
                return jumpNode;
            }
        }
        return (ref5 = this.otherwise) != null ? ref5.jumps(o) : void 0;
    };

    Switch.prototype.makeReturn = function(res) {
        var j, len1, pair, ref3, ref4;
        ref3 = this.cases;
        for (j = 0, len1 = ref3.length; j < len1; j++) {
            pair = ref3[j];
            pair[1].makeReturn(res);
        }
        if (res) {
            this.otherwise || (this.otherwise = new Block([new Literal('void 0')]));
        }
        if ((ref4 = this.otherwise) != null) {
            ref4.makeReturn(res);
        }
        return this;
    };

    Switch.prototype.compileNode = function(o) {
        var block, body, cond, conditions, expr, fragments, i, idt1, idt2, j, k, len1, len2, ref3, ref4, ref5;
        idt1 = o.indent + TAB;
        idt2 = o.indent = idt1 + TAB;
        fragments = [].concat(this.makeCode(this.tab + "switch ("), (this.subject ? this.subject.compileToFragments(o, LEVEL_PAREN) : this.makeCode("false")), this.makeCode(") {\n"));
        ref3 = this.cases;
        for (i = j = 0, len1 = ref3.length; j < len1; i = ++j) {
            ref4 = ref3[i], conditions = ref4[0], block = ref4[1];
            ref5 = flatten([conditions]);
            for (k = 0, len2 = ref5.length; k < len2; k++) {
                cond = ref5[k];
                if (!this.subject) {
                    cond = cond.invert();
                }
                fragments = fragments.concat(this.makeCode(idt1 + "case "), cond.compileToFragments(o, LEVEL_PAREN), this.makeCode(":\n"));
            }
            if ((body = block.compileToFragments(o, LEVEL_TOP)).length > 0) {
                fragments = fragments.concat(body, this.makeCode('\n'));
            }
            if (i === this.cases.length - 1 && !this.otherwise) {
                break;
            }
            expr = this.lastNonComment(block.expressions);
            if (expr instanceof Return || (expr instanceof Literal && expr.jumps() && expr.value !== 'debugger')) {
                continue;
            }
            fragments.push(cond.makeCode(idt2 + 'break;\n'));
        }
        if (this.otherwise && this.otherwise.expressions.length) {
            fragments.push.apply(fragments, [this.makeCode(idt1 + "default:\n")].concat(slice.call(this.otherwise.compileToFragments(o, LEVEL_TOP)), [this.makeCode("\n")]));
        }
        fragments.push(this.makeCode(this.tab + '}'));
        return fragments;
    };

    return Switch;

})(Base);

exports.If = If = (function(superClass1) {
    extend1(If, superClass1);

    function If(condition, body1, options) {
        this.body = body1;
        if (options == null) {
            options = {};
        }
        this.condition = options.type === 'unless' ? condition.invert() : condition;
        this.elseBody = null;
        this.isChain = false;
        this.soak = options.soak;
    }

    If.prototype.children = ['condition', 'body', 'elseBody'];

    If.prototype.bodyNode = function() {
        var ref3;
        return (ref3 = this.body) != null ? ref3.unwrap() : void 0;
    };

    If.prototype.elseBodyNode = function() {
        var ref3;
        return (ref3 = this.elseBody) != null ? ref3.unwrap() : void 0;
    };

    If.prototype.addElse = function(elseBody) {
        if (this.isChain) {
            this.elseBodyNode().addElse(elseBody);
        } else {
            this.isChain = elseBody instanceof If;
            this.elseBody = this.ensureBlock(elseBody);
            this.elseBody.updateLocationDataIfMissing(elseBody.locationData);
        }
        return this;
    };

    If.prototype.isStatement = function(o) {
        var ref3;
        return (o != null ? o.level : void 0) === LEVEL_TOP || this.bodyNode().isStatement(o) || ((ref3 = this.elseBodyNode()) != null ? ref3.isStatement(o) : void 0);
    };

    If.prototype.jumps = function(o) {
        var ref3;
        return this.body.jumps(o) || ((ref3 = this.elseBody) != null ? ref3.jumps(o) : void 0);
    };

    If.prototype.compileNode = function(o) {
        if (this.isStatement(o)) {
            return this.compileStatement(o);
        } else {
            return this.compileExpression(o);
        }
    };

    If.prototype.makeReturn = function(res) {
        if (res) {
            this.elseBody || (this.elseBody = new Block([new Literal('void 0')]));
        }
        this.body && (this.body = new Block([this.body.makeReturn(res)]));
        this.elseBody && (this.elseBody = new Block([this.elseBody.makeReturn(res)]));
        return this;
    };

    If.prototype.ensureBlock = function(node) {
        if (node instanceof Block) {
            return node;
        } else {
            return new Block([node]);
        }
    };

    If.prototype.compileStatement = function(o) {
        var answer, body, child, cond, exeq, ifPart, indent;
        child = del(o, 'chainChild');
        exeq = del(o, 'isExistentialEquals');
        if (exeq) {
            return new If(this.condition.invert(), this.elseBodyNode(), {
                type: 'if'
            }).compileToFragments(o);
        }
        indent = o.indent + TAB;
        cond = this.condition.compileToFragments(o, LEVEL_PAREN);
        body = this.ensureBlock(this.body).compileToFragments(merge(o, {
            indent: indent
        }));
        ifPart = [].concat(this.makeCode("if ("), cond, this.makeCode(") {\n"), body, this.makeCode("\n" + this.tab + "}"));
        if (!child) {
            ifPart.unshift(this.makeCode(this.tab));
        }
        if (!this.elseBody) {
            return ifPart;
        }
        answer = ifPart.concat(this.makeCode(' else '));
        if (this.isChain) {
            o.chainChild = true;
            answer = answer.concat(this.elseBody.unwrap().compileToFragments(o, LEVEL_TOP));
        } else {
            answer = answer.concat(this.makeCode("{\n"), this.elseBody.compileToFragments(merge(o, {
                indent: indent
            }), LEVEL_TOP), this.makeCode("\n" + this.tab + "}"));
        }
        return answer;
    };

    If.prototype.compileExpression = function(o) {
        var alt, body, cond, fragments;
        cond = this.condition.compileToFragments(o, LEVEL_COND);
        body = this.bodyNode().compileToFragments(o, LEVEL_LIST);
        alt = this.elseBodyNode() ? this.elseBodyNode().compileToFragments(o, LEVEL_LIST) : [this.makeCode('void 0')];
        fragments = cond.concat(this.makeCode(" ? "), body, this.makeCode(" : "), alt);
        if (o.level >= LEVEL_COND) {
            return this.wrapInBraces(fragments);
        } else {
            return fragments;
        }
    };

    If.prototype.unfoldSoak = function() {
        return this.soak && this;
    };

    return If;

})(Base);

UTILITIES = {
    extend: function(o) {
        return "function(child, parent) { for (var key in parent) { if (" + (utility('hasProp', o)) + ".call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; }";
    },
    bind: function() {
        return 'function(fn, me){ return function(){ return fn.apply(me, arguments); }; }';
    },
    indexOf: function() {
        return "[].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; }";
    },
    modulo: function() {
        return "function(a, b) { return (+a % (b = +b) + b) % b; }";
    },
    hasProp: function() {
        return '{}.hasOwnProperty';
    },
    slice: function() {
        return '[].slice';
    }
};

LEVEL_TOP = 1;

LEVEL_PAREN = 2;

LEVEL_LIST = 3;

LEVEL_COND = 4;

LEVEL_OP = 5;

LEVEL_ACCESS = 6;

TAB = '    ';

SIMPLENUM = /^[+-]?\d+$/;

utility = function(name, o) {
    var ref, root;
    root = o.scope.root;
    if (name in root.utilities) {
        return root.utilities[name];
    } else {
        ref = root.freeVariable(name);
        root.assign(ref, UTILITIES[name](o));
        return root.utilities[name] = ref;
    }
};

multident = function(code, tab) {
    code = code.replace(/\n/g, '$&' + tab);
    return code.replace(/\s+$/, '');
};

isLiteralArguments = function(node) {
    return node instanceof IdentifierLiteral && node.value === 'arguments';
};

isLiteralThis = function(node) {
    return node instanceof ThisLiteral || (node instanceof Code && node.bound) || node instanceof SuperCall;
};

isComplexOrAssignable = function(node) {
    return node.isComplex() || (typeof node.isAssignable === "function" ? node.isAssignable() : void 0);
};

unfoldSoak = function(o, parent, name) {
    var ifn;
    if (!(ifn = parent[name].unfoldSoak(o))) {
        return;
    }
    parent[name] = ifn.body;
    ifn.body = new Value(parent);
    return ifn;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZXMuanMiLCJzb3VyY2VSb290IjoiLiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7Ozs7QUFBQSxJQUFBLDJzQ0FBQTtJQUFBOzs7OztBQWFBLEtBQUssQ0FBQyxlQUFOLEdBQXdCOztBQUN4QixHQUFBLEdBQU0sT0FBTyxDQUFDOztBQUViLFFBQVMsT0FBQSxDQUFRLFNBQVI7O0FBQ1YsT0FBaUMsT0FBQSxDQUFRLFNBQVIsQ0FBakMsRUFBQyxvQ0FBRCxFQUFpQjs7QUFHakIsT0FDNkQsT0FBQSxDQUFRLFdBQVIsQ0FEN0QsRUFBQyxzQkFBRCxFQUFVLHNCQUFWLEVBQW1CLG9CQUFuQixFQUEyQixrQkFBM0IsRUFBa0MsY0FBbEMsRUFBdUMsb0JBQXZDLEVBQStDLGdCQUEvQyxFQUFxRCxnQkFBckQsRUFDQSwwQ0FEQSxFQUNtQixnREFEbkIsRUFDeUM7O0FBR3pDLE9BQU8sQ0FBQyxNQUFSLEdBQWlCOztBQUNqQixPQUFPLENBQUMsaUJBQVIsR0FBNEI7O0FBRzVCLEdBQUEsR0FBVSxTQUFBO1dBQUc7QUFBSDs7QUFDVixFQUFBLEdBQVUsU0FBQTtXQUFHO0FBQUg7O0FBQ1YsSUFBQSxHQUFVLFNBQUE7V0FBRztBQUFIOztBQUNWLE1BQUEsR0FBVSxTQUFBO0lBQUcsSUFBQyxDQUFBLE9BQUQsR0FBVyxDQUFJLElBQUMsQ0FBQTtXQUFTO0FBQTVCOztBQWFWLE9BQU8sQ0FBQyxZQUFSLEdBQTZCO0lBRXRCLHNCQUFDLE1BQUQsRUFBUyxJQUFUO0FBRUMsWUFBQTtRQUFBLElBQUMsQ0FBQSxJQUFELEdBQVEsRUFBQSxHQUFHO1FBQ1gsSUFBQyxDQUFBLFlBQUQsb0JBQWdCLE1BQU0sQ0FBRTtRQUN4QixJQUFDLENBQUEsSUFBRCwrREFBMkIsQ0FBRSx1QkFBckIsSUFBNkI7SUFKdEM7OzJCQU1ILFFBQUEsR0FBVSxTQUFBO2VBRU4sRUFBQSxHQUFHLElBQUMsQ0FBQSxJQUFKLEdBQVUsQ0FBSSxJQUFDLENBQUEsWUFBSixHQUFzQixJQUFBLEdBQU8sb0JBQUEsQ0FBcUIsSUFBQyxDQUFBLFlBQXRCLENBQTdCLEdBQXNFLEVBQXZFO0lBRko7Ozs7OztBQUlkLGVBQUEsR0FBa0IsU0FBQyxTQUFEO0FBRWQsUUFBQTtXQUFBOztBQUFDO2FBQUEsNkNBQUE7O3lCQUFBLFFBQVEsQ0FBQztBQUFUOztRQUFELENBQXlDLENBQUMsSUFBMUMsQ0FBK0MsRUFBL0M7QUFGYzs7QUFvQmxCLE9BQU8sQ0FBQyxJQUFSLEdBQXFCOzs7bUJBRWpCLE9BQUEsR0FBUyxTQUFDLENBQUQsRUFBSSxHQUFKO2VBQ0wsZUFBQSxDQUFnQixJQUFDLENBQUEsa0JBQUQsQ0FBb0IsQ0FBcEIsRUFBdUIsR0FBdkIsQ0FBaEI7SUFESzs7bUJBVVQsa0JBQUEsR0FBb0IsU0FBQyxDQUFELEVBQUksR0FBSjtBQUVoQixZQUFBO1FBQUEsQ0FBQSxHQUFXLE1BQUEsQ0FBTyxFQUFQLEVBQVcsQ0FBWDtRQUNYLElBQWtCLEdBQWxCO1lBQUEsQ0FBQyxDQUFDLEtBQUYsR0FBVyxJQUFYOztRQUNBLElBQUEsR0FBVyxJQUFDLENBQUEsVUFBRCxDQUFZLENBQVosQ0FBQSxJQUFrQjtRQUM3QixJQUFJLENBQUMsR0FBTCxHQUFXLENBQUMsQ0FBQztRQUNiLElBQUcsQ0FBQyxDQUFDLEtBQUYsS0FBVyxTQUFYLElBQXdCLENBQUksSUFBSSxDQUFDLFdBQUwsQ0FBaUIsQ0FBakIsQ0FBL0I7bUJBQ0ksSUFBSSxDQUFDLFdBQUwsQ0FBaUIsQ0FBakIsRUFESjtTQUFBLE1BQUE7bUJBR0ksSUFBSSxDQUFDLGNBQUwsQ0FBb0IsQ0FBcEIsRUFISjs7SUFOZ0I7O21CQWNwQixjQUFBLEdBQWdCLFNBQUMsQ0FBRDtBQUVaLFlBQUE7UUFBQSxJQUFHLFFBQUEsR0FBVyxJQUFDLENBQUEsS0FBRCxDQUFBLENBQWQ7WUFDSSxRQUFRLENBQUMsS0FBVCxDQUFlLDhDQUFmLEVBREo7O1FBRUEsQ0FBQyxDQUFDLFdBQUYsR0FBZ0I7UUFDaEIsSUFBQSxHQUFPLElBQUksSUFBSixDQUFTLEVBQVQsRUFBYSxLQUFLLENBQUMsSUFBTixDQUFXLENBQUMsSUFBRCxDQUFYLENBQWI7UUFDUCxJQUFBLEdBQU87UUFDUCxJQUFHLENBQUMsYUFBQSxHQUFnQixJQUFDLENBQUEsUUFBRCxDQUFVLGtCQUFWLENBQWpCLENBQUEsSUFBa0QsSUFBQyxDQUFBLFFBQUQsQ0FBVSxhQUFWLENBQXJEO1lBQ0ksSUFBQSxHQUFPLENBQUMsSUFBSSxXQUFMO1lBQ1AsSUFBRyxhQUFIO2dCQUNJLElBQUEsR0FBTztnQkFDUCxJQUFJLENBQUMsSUFBTCxDQUFVLElBQUksaUJBQUosQ0FBc0IsV0FBdEIsQ0FBVixFQUZKO2FBQUEsTUFBQTtnQkFJSSxJQUFBLEdBQU8sT0FKWDs7WUFLQSxJQUFBLEdBQU8sSUFBSSxLQUFKLENBQVUsSUFBVixFQUFnQixDQUFDLElBQUksTUFBSixDQUFXLElBQUksWUFBSixDQUFpQixJQUFqQixDQUFYLENBQUQsQ0FBaEIsRUFQWDs7UUFRQSxLQUFBLEdBQVEsQ0FBQyxJQUFJLElBQUosQ0FBUyxJQUFULEVBQWUsSUFBZixDQUFELENBQXFCLENBQUMsV0FBdEIsQ0FBa0MsQ0FBbEM7UUFDUixJQUFHLElBQUksQ0FBQyxXQUFMLHNDQUE2QixDQUFFLHFCQUFsQztZQUNJLEtBQUssQ0FBQyxPQUFOLENBQWMsSUFBQyxDQUFBLFFBQUQsQ0FBVSxVQUFWLENBQWQ7WUFDQSxLQUFLLENBQUMsSUFBTixDQUFjLElBQUMsQ0FBQSxRQUFELENBQVUsR0FBVixDQUFkLEVBRko7O2VBR0E7SUFuQlk7O21CQTZCaEIsS0FBQSxHQUFPLFNBQUMsQ0FBRCxFQUFJLEtBQUosRUFBVyxTQUFYO0FBRUgsWUFBQTtRQUFBLE9BQUEsR0FBYSxpQkFBSCxHQUFtQixTQUFBLENBQVUsSUFBVixDQUFuQixHQUF1QyxJQUFDLENBQUEsU0FBRCxDQUFBO1FBQ2pELElBQUcsT0FBSDtZQUNJLEdBQUEsR0FBTSxJQUFJLGlCQUFKLENBQXNCLENBQUMsQ0FBQyxLQUFLLENBQUMsWUFBUixDQUFxQixLQUFyQixDQUF0QjtZQUNOLEdBQUEsR0FBTSxJQUFJLE1BQUosQ0FBVyxHQUFYLEVBQWdCLElBQWhCO1lBQ04sSUFBRyxLQUFIO3VCQUFjLENBQUMsR0FBRyxDQUFDLGtCQUFKLENBQXVCLENBQXZCLEVBQTBCLEtBQTFCLENBQUQsRUFBbUMsQ0FBQyxJQUFDLENBQUEsUUFBRCxDQUFVLEdBQUcsQ0FBQyxLQUFkLENBQUQsQ0FBbkMsRUFBZDthQUFBLE1BQUE7dUJBQThFLENBQUMsR0FBRCxFQUFNLEdBQU4sRUFBOUU7YUFISjtTQUFBLE1BQUE7WUFLSSxHQUFBLEdBQVMsS0FBSCxHQUFjLElBQUMsQ0FBQSxrQkFBRCxDQUFvQixDQUFwQixFQUF1QixLQUF2QixDQUFkLEdBQWdEO21CQUN0RCxDQUFDLEdBQUQsRUFBTSxHQUFOLEVBTko7O0lBSEc7O21CQVdQLG9CQUFBLEdBQXNCLFNBQUMsV0FBRDtlQUVsQixDQUFDLGVBQUEsQ0FBZ0IsV0FBWSxDQUFBLENBQUEsQ0FBNUIsQ0FBRCxFQUFrQyxlQUFBLENBQWdCLFdBQVksQ0FBQSxDQUFBLENBQTVCLENBQWxDO0lBRmtCOzttQkFRdEIsVUFBQSxHQUFZLFNBQUMsR0FBRDtBQUNSLFlBQUE7UUFBQSxFQUFBLEdBQUssSUFBQyxDQUFBLFNBQUQsQ0FBQTtRQUNMLElBQUcsR0FBSDttQkFDSSxJQUFJLElBQUosQ0FBUyxJQUFJLE9BQUosQ0FBZSxHQUFELEdBQUssT0FBbkIsQ0FBVCxFQUFxQyxDQUFDLEVBQUQsQ0FBckMsRUFESjtTQUFBLE1BQUE7bUJBR0ksSUFBSSxNQUFKLENBQVcsRUFBWCxFQUhKOztJQUZROzttQkFZWixRQUFBLEdBQVUsU0FBQyxJQUFEO0FBQ04sWUFBQTtRQUFBLElBQUEsR0FBTztRQUNQLElBQUMsQ0FBQSxnQkFBRCxDQUFrQixLQUFsQixFQUFzQixTQUFDLENBQUQ7WUFDbEIsSUFBRyxJQUFBLENBQUssQ0FBTCxDQUFIO2dCQUNJLElBQUEsR0FBTztBQUNQLHVCQUFPLE1BRlg7O1FBRGtCLENBQXRCO2VBSUE7SUFOTTs7bUJBUVYsY0FBQSxHQUFnQixTQUFDLElBQUQ7QUFDWixZQUFBO1FBQUEsQ0FBQSxHQUFJLElBQUksQ0FBQztBQUNNLGVBQU0sQ0FBQSxFQUFOO2dCQUFlLENBQUEsQ0FBQSxJQUFLLENBQUEsQ0FBQSxDQUFMLFlBQXVCLE9BQXZCO0FBQTlCLHVCQUFPLElBQUssQ0FBQSxDQUFBOztRQUFHO2VBQ2Y7SUFIWTs7bUJBUWhCLFFBQUEsR0FBVSxTQUFDLEdBQUQsRUFBVyxJQUFYO0FBQ04sWUFBQTs7WUFETyxNQUFNOzs7WUFBSSxPQUFPLElBQUMsQ0FBQSxXQUFXLENBQUM7O1FBQ3JDLElBQUEsR0FBTyxJQUFBLEdBQU8sR0FBUCxHQUFhO1FBQ3BCLElBQWUsSUFBQyxDQUFBLElBQWhCO1lBQUEsSUFBQSxJQUFRLElBQVI7O1FBQ0EsSUFBQyxDQUFBLFNBQUQsQ0FBVyxTQUFDLElBQUQ7bUJBQVUsSUFBQSxJQUFRLElBQUksQ0FBQyxRQUFMLENBQWMsR0FBQSxHQUFNLEdBQXBCO1FBQWxCLENBQVg7ZUFDQTtJQUpNOzttQkFRVixTQUFBLEdBQVcsU0FBQyxJQUFEO0FBQ1AsWUFBQTtRQUFBLElBQUEsQ0FBbUIsSUFBQyxDQUFBLFFBQXBCO0FBQUEsbUJBQU8sS0FBUDs7QUFDQTtBQUFBLGFBQUEsd0NBQUE7O2dCQUEyQixJQUFFLENBQUEsSUFBQTtBQUN6QjtBQUFBLHFCQUFBLHdDQUFBOztvQkFDSSxJQUFlLElBQUEsQ0FBSyxLQUFMLENBQUEsS0FBZSxLQUE5QjtBQUFBLCtCQUFPLEtBQVA7O0FBREo7O0FBREo7ZUFHQTtJQUxPOzttQkFPWCxnQkFBQSxHQUFrQixTQUFDLFVBQUQsRUFBYSxJQUFiO2VBRWQsSUFBQyxDQUFBLFNBQUQsQ0FBVyxTQUFDLEtBQUQ7QUFDUCxnQkFBQTtZQUFBLEtBQUEsR0FBUSxJQUFBLENBQUssS0FBTDtZQUNSLElBQWdELEtBQUEsS0FBUyxLQUF6RDt1QkFBQSxLQUFLLENBQUMsZ0JBQU4sQ0FBdUIsVUFBdkIsRUFBbUMsSUFBbkMsRUFBQTs7UUFGTyxDQUFYO0lBRmM7O21CQU1sQixNQUFBLEdBQVEsU0FBQTtlQUNKLElBQUksRUFBSixDQUFPLEdBQVAsRUFBWSxJQUFaO0lBREk7O21CQUdSLFNBQUEsR0FBVyxTQUFBO0FBQ1AsWUFBQTtRQUFBLElBQUEsR0FBTztBQUNFLGVBQU0sSUFBQSxLQUFRLENBQUEsSUFBQSxHQUFPLElBQUksQ0FBQyxNQUFMLENBQUEsQ0FBUCxDQUFkO0FBQVQ7UUFBUztlQUNUO0lBSE87O21CQVFYLFFBQUEsR0FBYzs7bUJBQ2QsV0FBQSxHQUFjOzttQkFDZCxLQUFBLEdBQWM7O21CQUNkLFNBQUEsR0FBYzs7bUJBQ2QsV0FBQSxHQUFjOzttQkFDZCxZQUFBLEdBQWM7O21CQUNkLFFBQUEsR0FBYzs7bUJBQ2QsTUFBQSxHQUFjOzttQkFDZCxVQUFBLEdBQWM7O21CQUVkLE9BQUEsR0FBYzs7bUJBS2QsMkJBQUEsR0FBNkIsU0FBQyxZQUFEO1FBQ3pCLElBQWUsSUFBQyxDQUFBLFlBQWhCO0FBQUEsbUJBQU8sS0FBUDs7UUFDQSxJQUFDLENBQUEsWUFBRCxHQUFnQjtlQUVoQixJQUFDLENBQUEsU0FBRCxDQUFXLFNBQUMsS0FBRDttQkFDUCxLQUFLLENBQUMsMkJBQU4sQ0FBa0MsWUFBbEM7UUFETyxDQUFYO0lBSnlCOzttQkFPN0IsS0FBQSxHQUFPLFNBQUMsT0FBRDtlQUVILGdCQUFBLENBQWlCLE9BQWpCLEVBQTBCLElBQUMsQ0FBQSxZQUEzQjtJQUZHOzttQkFJUCxRQUFBLEdBQVUsU0FBQyxJQUFEO2VBQ04sSUFBSSxZQUFKLENBQWlCLElBQWpCLEVBQXVCLElBQXZCO0lBRE07O21CQUdWLFlBQUEsR0FBYyxTQUFDLFNBQUQ7ZUFDVixFQUFFLENBQUMsTUFBSCxDQUFVLElBQUMsQ0FBQSxRQUFELENBQVUsR0FBVixDQUFWLEVBQTBCLFNBQTFCLEVBQXFDLElBQUMsQ0FBQSxRQUFELENBQVUsR0FBVixDQUFyQztJQURVOzttQkFPZCxrQkFBQSxHQUFvQixTQUFDLGFBQUQsRUFBZ0IsT0FBaEI7QUFDaEIsWUFBQTtRQUFBLE1BQUEsR0FBUztBQUNULGFBQUEseURBQUE7O1lBQ0ksSUFBRyxDQUFIO2dCQUFVLE1BQU0sQ0FBQyxJQUFQLENBQVksSUFBQyxDQUFBLFFBQUQsQ0FBVSxPQUFWLENBQVosRUFBVjs7WUFDQSxNQUFBLEdBQVMsTUFBTSxDQUFDLE1BQVAsQ0FBYyxTQUFkO0FBRmI7ZUFHQTtJQUxnQjs7Ozs7O0FBaUJ4QixPQUFPLENBQUMsS0FBUixHQUFzQjs7O0lBRUwsZUFBQyxLQUFEO1FBRVQsSUFBQyxDQUFBLFdBQUQsR0FBZSxPQUFBLENBQVEsT0FBQSxDQUFRLEtBQUEsSUFBUyxFQUFqQixDQUFSO0lBRk47O29CQUliLFFBQUEsR0FBVSxDQUFDLGFBQUQ7O29CQUVWLElBQUEsR0FBTSxTQUFDLElBQUQ7UUFFRixJQUFDLENBQUEsV0FBVyxDQUFDLElBQWIsQ0FBa0IsSUFBbEI7ZUFDQTtJQUhFOztvQkFLTixHQUFBLEdBQUssU0FBQTtlQUVELElBQUMsQ0FBQSxXQUFXLENBQUMsR0FBYixDQUFBO0lBRkM7O29CQUlMLE9BQUEsR0FBUyxTQUFDLElBQUQ7UUFFTCxJQUFDLENBQUEsV0FBVyxDQUFDLE9BQWIsQ0FBcUIsSUFBckI7ZUFDQTtJQUhLOztvQkFPVCxNQUFBLEdBQVEsU0FBQTtRQUNKLElBQUcsSUFBQyxDQUFBLFdBQVcsQ0FBQyxNQUFiLEtBQXVCLENBQTFCO21CQUFpQyxJQUFDLENBQUEsV0FBWSxDQUFBLENBQUEsRUFBOUM7U0FBQSxNQUFBO21CQUFzRCxLQUF0RDs7SUFESTs7b0JBR1IsT0FBQSxHQUFTLFNBQUE7ZUFDTCxDQUFJLElBQUMsQ0FBQSxXQUFXLENBQUM7SUFEWjs7b0JBR1QsV0FBQSxHQUFhLFNBQUMsQ0FBRDtBQUNULFlBQUE7QUFBQTtBQUFBLGFBQUEsd0NBQUE7O2dCQUE2QixHQUFHLENBQUMsV0FBSixDQUFnQixDQUFoQjtBQUN6Qix1QkFBTzs7QUFEWDtlQUVBO0lBSFM7O29CQUtiLEtBQUEsR0FBTyxTQUFDLENBQUQ7QUFDSCxZQUFBO0FBQUE7QUFBQSxhQUFBLHdDQUFBOztZQUNJLElBQW1CLFFBQUEsR0FBVyxHQUFHLENBQUMsS0FBSixDQUFVLENBQVYsQ0FBOUI7QUFBQSx1QkFBTyxTQUFQOztBQURKO0lBREc7O29CQU9QLFVBQUEsR0FBWSxTQUFDLEdBQUQ7QUFFUixZQUFBO1FBQUEsR0FBQSxHQUFNLElBQUMsQ0FBQSxXQUFXLENBQUM7QUFDbkIsZUFBTSxHQUFBLEVBQU47WUFDSSxJQUFBLEdBQU8sSUFBQyxDQUFBLFdBQVksQ0FBQSxHQUFBO1lBQ3BCLElBQUcsQ0FBQSxDQUFBLElBQUEsWUFBb0IsT0FBcEIsQ0FBSDtnQkFDSSxJQUFDLENBQUEsV0FBWSxDQUFBLEdBQUEsQ0FBYixHQUFvQixJQUFJLENBQUMsVUFBTCxDQUFnQixHQUFoQjtnQkFDcEIsSUFBK0IsSUFBQSxZQUFnQixNQUFoQixJQUEyQixDQUFJLElBQUksQ0FBQyxVQUFuRTtvQkFBQSxJQUFDLENBQUEsV0FBVyxDQUFDLE1BQWIsQ0FBb0IsR0FBcEIsRUFBeUIsQ0FBekIsRUFBQTs7QUFDQSxzQkFISjs7UUFGSjtlQU1BO0lBVFE7O29CQWFaLGtCQUFBLEdBQW9CLFNBQUMsQ0FBRCxFQUFTLEtBQVQ7O1lBQUMsSUFBSTs7UUFDckIsSUFBRyxDQUFDLENBQUMsS0FBTDttQkFBZ0IsOENBQU0sQ0FBTixFQUFTLEtBQVQsRUFBaEI7U0FBQSxNQUFBO21CQUFvQyxJQUFDLENBQUEsV0FBRCxDQUFhLENBQWIsRUFBcEM7O0lBRGdCOztvQkFPcEIsV0FBQSxHQUFhLFNBQUMsQ0FBRDtBQUVULFlBQUE7UUFBQSxJQUFDLENBQUEsR0FBRCxHQUFVLENBQUMsQ0FBQztRQUNaLEdBQUEsR0FBVSxDQUFDLENBQUMsS0FBRixLQUFXO1FBQ3JCLGFBQUEsR0FBZ0I7QUFFaEI7QUFBQSxhQUFBLHdEQUFBOztZQUVJLElBQUEsR0FBTyxJQUFJLENBQUMsU0FBTCxDQUFBO1lBQ1AsSUFBQSxHQUFRLElBQUksQ0FBQyxVQUFMLENBQWdCLENBQWhCLENBQUEsSUFBc0I7WUFDOUIsSUFBRyxJQUFBLFlBQWdCLEtBQW5CO2dCQUdJLGFBQWEsQ0FBQyxJQUFkLENBQW1CLElBQUksQ0FBQyxXQUFMLENBQWlCLENBQWpCLENBQW5CLEVBSEo7YUFBQSxNQUlLLElBQUcsR0FBSDtnQkFDRCxJQUFJLENBQUMsS0FBTCxHQUFhO2dCQUNiLFNBQUEsR0FBWSxJQUFJLENBQUMsa0JBQUwsQ0FBd0IsQ0FBeEI7Z0JBQ1osSUFBQSxDQUFPLElBQUksQ0FBQyxXQUFMLENBQWlCLENBQWpCLENBQVA7b0JBQ0ksU0FBUyxDQUFDLE9BQVYsQ0FBa0IsSUFBQyxDQUFBLFFBQUQsQ0FBVSxFQUFBLEdBQUcsSUFBQyxDQUFBLEdBQWQsQ0FBbEI7b0JBQ0EsU0FBUyxDQUFDLElBQVYsQ0FBZSxJQUFDLENBQUEsUUFBRCxDQUFVLEdBQVYsQ0FBZixFQUZKOztnQkFHQSxhQUFhLENBQUMsSUFBZCxDQUFtQixTQUFuQixFQU5DO2FBQUEsTUFBQTtnQkFRRCxhQUFhLENBQUMsSUFBZCxDQUFtQixJQUFJLENBQUMsa0JBQUwsQ0FBd0IsQ0FBeEIsRUFBMkIsVUFBM0IsQ0FBbkIsRUFSQzs7QUFSVDtRQWlCQSxJQUFHLEdBQUg7WUFDSSxJQUFHLElBQUMsQ0FBQSxNQUFKO0FBQ0ksdUJBQU8sRUFBRSxDQUFDLE1BQUgsQ0FBVSxJQUFDLENBQUEsa0JBQUQsQ0FBb0IsYUFBcEIsRUFBbUMsTUFBbkMsQ0FBVixFQUFzRCxJQUFDLENBQUEsUUFBRCxDQUFVLElBQVYsQ0FBdEQsRUFEWDthQUFBLE1BQUE7QUFHSSx1QkFBTyxJQUFDLENBQUEsa0JBQUQsQ0FBb0IsYUFBcEIsRUFBbUMsSUFBbkMsRUFIWDthQURKOztRQUtBLElBQUcsYUFBYSxDQUFDLE1BQWpCO1lBQ0ksTUFBQSxHQUFTLElBQUMsQ0FBQSxrQkFBRCxDQUFvQixhQUFwQixFQUFtQyxJQUFuQyxFQURiO1NBQUEsTUFBQTtZQUdJLE1BQUEsR0FBUyxDQUFDLElBQUMsQ0FBQSxRQUFELENBQVUsUUFBVixDQUFELEVBSGI7O1FBSUEsSUFBRyxhQUFhLENBQUMsTUFBZCxHQUF1QixDQUF2QixJQUE2QixDQUFDLENBQUMsS0FBRixJQUFXLFVBQTNDO21CQUEyRCxJQUFDLENBQUEsWUFBRCxDQUFjLE1BQWQsRUFBM0Q7U0FBQSxNQUFBO21CQUFxRixPQUFyRjs7SUFoQ1M7O29CQXVDYixXQUFBLEdBQWEsU0FBQyxDQUFEO0FBRVQsWUFBQTtRQUFBLENBQUMsQ0FBQyxNQUFGLEdBQWMsQ0FBQyxDQUFDLElBQUwsR0FBZSxFQUFmLEdBQXVCO1FBQ2xDLENBQUMsQ0FBQyxLQUFGLEdBQVc7UUFDWCxJQUFDLENBQUEsTUFBRCxHQUFXO1FBQ1gsQ0FBQyxDQUFDLEtBQUYsR0FBVyxJQUFJLEtBQUosQ0FBVSxJQUFWLEVBQWdCLElBQWhCLEVBQXNCLElBQXRCLDZDQUErQyxFQUEvQztBQUlYO0FBQUEsYUFBQSx3Q0FBQTs7WUFBQSxDQUFDLENBQUMsS0FBSyxDQUFDLFNBQVIsQ0FBa0IsSUFBbEI7QUFBQTtRQUNBLE9BQUEsR0FBVTtRQUNWLElBQUcsQ0FBSSxDQUFDLENBQUMsSUFBVDtZQUNJLFdBQUE7O0FBQWM7QUFBQTtxQkFBQSxnREFBQTs7b0JBQ1YsSUFBQSxDQUFBLENBQWEsR0FBRyxDQUFDLE1BQUosQ0FBQSxDQUFBLFlBQXdCLE9BQXJDLENBQUE7QUFBQSw4QkFBQTs7aUNBQ0E7QUFGVTs7O1lBR2QsSUFBQSxHQUFPLElBQUMsQ0FBQSxXQUFZO1lBQ3BCLElBQUMsQ0FBQSxXQUFELEdBQWU7WUFDZixJQUFHLFdBQVcsQ0FBQyxNQUFmO2dCQUNJLE9BQUEsR0FBVSxJQUFDLENBQUEsV0FBRCxDQUFhLEtBQUEsQ0FBTSxDQUFOLEVBQVM7b0JBQUEsTUFBQSxFQUFRLEVBQVI7aUJBQVQsQ0FBYjtnQkFDVixPQUFPLENBQUMsSUFBUixDQUFhLElBQUMsQ0FBQSxRQUFELENBQVUsSUFBVixDQUFiLEVBRko7O1lBR0EsSUFBQyxDQUFBLFdBQUQsR0FBZSxLQVRuQjs7UUFVQSxTQUFBLEdBQVksSUFBQyxDQUFBLHVCQUFELENBQXlCLENBQXpCO1FBQ1osSUFBb0IsQ0FBQyxDQUFDLElBQXRCO0FBQUEsbUJBQU8sVUFBUDs7ZUFDQSxFQUFFLENBQUMsTUFBSCxDQUFVLE9BQVYsRUFBbUIsSUFBQyxDQUFBLFFBQUQsQ0FBVSxpQkFBVixDQUFuQixFQUFpRCxTQUFqRCxFQUE0RCxJQUFDLENBQUEsUUFBRCxDQUFVLG9CQUFWLENBQTVEO0lBdkJTOztvQkE0QmIsdUJBQUEsR0FBeUIsU0FBQyxDQUFEO0FBRXJCLFlBQUE7UUFBQSxTQUFBLEdBQVk7UUFDWixJQUFBLEdBQU87QUFDUDtBQUFBLGFBQUEsZ0RBQUE7O1lBQ0ksR0FBQSxHQUFNLEdBQUcsQ0FBQyxNQUFKLENBQUE7WUFDTixJQUFBLENBQUEsQ0FBYSxHQUFBLFlBQWUsT0FBZixJQUEwQixHQUFBLFlBQWUsT0FBdEQsQ0FBQTtBQUFBLHNCQUFBOztBQUZKO1FBR0EsQ0FBQSxHQUFJLEtBQUEsQ0FBTSxDQUFOLEVBQVM7WUFBQSxLQUFBLEVBQU8sU0FBUDtTQUFUO1FBQ0osSUFBRyxDQUFIO1lBQ0ksSUFBQSxHQUFPLElBQUMsQ0FBQSxXQUFXLENBQUMsTUFBYixDQUFvQixDQUFwQixFQUF1QixHQUF2QjtZQUNQLE9BQTJCLENBQUMsSUFBQyxDQUFBLE1BQUYsRUFBVSxLQUFWLENBQTNCLEVBQUMsZ0JBQUQsRUFBZ0IsSUFBQyxDQUFBO1lBQ2pCLE9BQXVCLENBQUMsSUFBQyxDQUFBLFdBQUQsQ0FBYSxDQUFiLENBQUQsRUFBa0IsTUFBbEIsQ0FBdkIsRUFBQyxtQkFBRCxFQUFZLElBQUMsQ0FBQTtZQUNiLElBQUMsQ0FBQSxXQUFELEdBQWUsS0FKbkI7O1FBS0EsSUFBQSxHQUFPLElBQUMsQ0FBQSxXQUFELENBQWEsQ0FBYjtRQUNOLFFBQVM7UUFDVixJQUFHLEtBQUssQ0FBQyxXQUFOLEtBQXFCLElBQXhCO1lBQ0ksT0FBQSxHQUFVLENBQUMsQ0FBQyxLQUFLLENBQUMsZUFBUixDQUFBO1lBQ1YsT0FBQSxHQUFVLEtBQUssQ0FBQztZQUNoQixJQUFHLE9BQUEsSUFBVyxPQUFkO2dCQUNJLElBQWlDLENBQWpDO29CQUFBLFNBQVMsQ0FBQyxJQUFWLENBQWUsSUFBQyxDQUFBLFFBQUQsQ0FBVSxJQUFWLENBQWYsRUFBQTs7Z0JBQ0EsU0FBUyxDQUFDLElBQVYsQ0FBZSxJQUFDLENBQUEsUUFBRCxDQUFhLElBQUMsQ0FBQSxHQUFGLEdBQU0sTUFBbEIsQ0FBZjtnQkFDQSxJQUFHLE9BQUg7b0JBQ0ksU0FBUyxDQUFDLElBQVYsQ0FBZSxJQUFDLENBQUEsUUFBRCxDQUFVLEtBQUssQ0FBQyxpQkFBTixDQUFBLENBQXlCLENBQUMsSUFBMUIsQ0FBK0IsSUFBL0IsQ0FBVixDQUFmLEVBREo7O2dCQUVBLElBQUcsT0FBSDtvQkFDSSxJQUErQyxPQUEvQzt3QkFBQSxTQUFTLENBQUMsSUFBVixDQUFlLElBQUMsQ0FBQSxRQUFELENBQVUsS0FBQSxHQUFLLENBQUMsSUFBQyxDQUFBLEdBQUQsR0FBTyxHQUFSLENBQWYsQ0FBZixFQUFBOztvQkFDQSxTQUFTLENBQUMsSUFBVixDQUFlLElBQUMsQ0FBQSxRQUFELENBQVUsS0FBSyxDQUFDLGlCQUFOLENBQUEsQ0FBeUIsQ0FBQyxJQUExQixDQUErQixLQUFBLEdBQUssQ0FBQyxJQUFDLENBQUEsR0FBRCxHQUFPLEdBQVIsQ0FBcEMsQ0FBVixDQUFmLEVBRko7O2dCQUdBLFNBQVMsQ0FBQyxJQUFWLENBQWUsSUFBQyxDQUFBLFFBQUQsQ0FBVSxLQUFBLEdBQUssQ0FBSSxJQUFDLENBQUEsTUFBSixHQUFnQixJQUFoQixHQUEwQixFQUEzQixDQUFmLENBQWYsRUFSSjthQUFBLE1BU0ssSUFBRyxTQUFTLENBQUMsTUFBVixJQUFxQixJQUFJLENBQUMsTUFBN0I7Z0JBQ0QsU0FBUyxDQUFDLElBQVYsQ0FBZSxJQUFDLENBQUEsUUFBRCxDQUFVLElBQVYsQ0FBZixFQURDO2FBWlQ7O2VBY0EsU0FBUyxDQUFDLE1BQVYsQ0FBaUIsSUFBakI7SUE3QnFCOztJQWlDekIsS0FBQyxDQUFBLElBQUQsR0FBTyxTQUFDLEtBQUQ7UUFFSCxJQUFtQixLQUFLLENBQUMsTUFBTixLQUFnQixDQUFoQixJQUFzQixLQUFNLENBQUEsQ0FBQSxDQUFOLFlBQW9CLEtBQTdEO0FBQUEsbUJBQU8sS0FBTSxDQUFBLENBQUEsRUFBYjs7ZUFDQSxJQUFJLEtBQUosQ0FBVSxLQUFWO0lBSEc7Ozs7R0FsS3lCOztBQWdMcEMsT0FBTyxDQUFDLE9BQVIsR0FBd0I7OztJQUVQLGlCQUFDLE1BQUQ7UUFBQyxJQUFDLENBQUEsUUFBRDtJQUFEOztzQkFFYixTQUFBLEdBQVc7O3NCQUVYLE9BQUEsR0FBUyxTQUFDLElBQUQ7ZUFDTCxJQUFBLEtBQVEsSUFBQyxDQUFBO0lBREo7O3NCQUdULFdBQUEsR0FBYSxTQUFDLENBQUQ7ZUFDVCxDQUFDLElBQUMsQ0FBQSxRQUFELENBQVUsSUFBQyxDQUFBLEtBQVgsQ0FBRDtJQURTOztzQkFHYixRQUFBLEdBQVUsU0FBQTtlQUNOLEdBQUEsR0FBRyxDQUFJLElBQUMsQ0FBQSxXQUFELENBQUEsQ0FBSCxHQUF1Qix1Q0FBQSxTQUFBLENBQXZCLEdBQWtDLElBQUMsQ0FBQSxXQUFXLENBQUMsSUFBaEQsQ0FBSCxHQUF3RCxJQUF4RCxHQUE0RCxJQUFDLENBQUE7SUFEdkQ7Ozs7R0FaMEI7O0FBZXhDLE9BQU8sQ0FBQyxhQUFSLEdBQThCOzs7Ozs7Ozs7R0FBc0I7O0FBRXBELE9BQU8sQ0FBQyxlQUFSLEdBQWdDOzs7Ozs7OzhCQUM1QixXQUFBLEdBQWEsU0FBQTtlQUNULENBQUMsSUFBQyxDQUFBLFFBQUQsQ0FBVSxPQUFWLENBQUQ7SUFEUzs7OztHQUR1Qzs7QUFJeEQsT0FBTyxDQUFDLFVBQVIsR0FBMkI7OztJQUNWLG9CQUFBO1FBQ1QsNENBQU0sS0FBTjtJQURTOzt5QkFHYixXQUFBLEdBQWEsU0FBQyxDQUFEO0FBQ1QsWUFBQTtRQUFBLElBQUEsR0FBTyxDQUFDLElBQUMsQ0FBQSxRQUFELENBQVUsS0FBVixDQUFEO1FBQ1AsSUFBRyxDQUFDLENBQUMsS0FBRixJQUFXLFFBQWQ7bUJBQTRCLElBQUMsQ0FBQSxZQUFELENBQWMsSUFBZCxFQUE1QjtTQUFBLE1BQUE7bUJBQW9ELEtBQXBEOztJQUZTOzs7O0dBSjZCOztBQVE5QyxPQUFPLENBQUMsYUFBUixHQUE4Qjs7Ozs7Ozs7O0dBQXNCOztBQUVwRCxPQUFPLENBQUMsWUFBUixHQUE2Qjs7Ozs7Ozs7O0dBQXFCOztBQUVsRCxPQUFPLENBQUMsa0JBQVIsR0FBbUM7Ozs7Ozs7OztHQUEyQjs7QUFFOUQsT0FBTyxDQUFDLGlCQUFSLEdBQWtDOzs7Ozs7O2dDQUM5QixZQUFBLEdBQWM7Ozs7R0FEMEM7O0FBRzVELE9BQU8sQ0FBQyxZQUFSLEdBQTZCOzs7Ozs7OzJCQUN6QixZQUFBLEdBQWM7Ozs7R0FEZ0M7O0FBR2xELE9BQU8sQ0FBQyxnQkFBUixHQUFpQzs7Ozs7OzsrQkFDN0IsV0FBQSxHQUFhOzsrQkFFYixVQUFBLEdBQVk7OytCQUVaLEtBQUEsR0FBTyxTQUFDLENBQUQ7UUFDSCxJQUFlLElBQUMsQ0FBQSxLQUFELEtBQVUsT0FBVixJQUFzQixDQUFJLGNBQUMsQ0FBQyxDQUFFLGNBQUgsaUJBQVcsQ0FBQyxDQUFFLGVBQWYsQ0FBekM7QUFBQSxtQkFBTyxLQUFQOztRQUNBLElBQWUsSUFBQyxDQUFBLEtBQUQsS0FBVSxVQUFWLElBQXlCLGNBQUksQ0FBQyxDQUFFLGNBQS9DO0FBQUEsbUJBQU8sS0FBUDs7SUFGRzs7K0JBSVAsV0FBQSxHQUFhLFNBQUMsQ0FBRDtlQUNULENBQUMsSUFBQyxDQUFBLFFBQUQsQ0FBVSxFQUFBLEdBQUcsSUFBQyxDQUFBLEdBQUosR0FBVSxJQUFDLENBQUEsS0FBWCxHQUFpQixHQUEzQixDQUFEO0lBRFM7Ozs7R0FUeUM7O0FBWTFELE9BQU8sQ0FBQyxXQUFSLEdBQTRCOzs7SUFDWCxxQkFBQTtRQUNULDZDQUFNLE1BQU47SUFEUzs7MEJBR2IsV0FBQSxHQUFhLFNBQUMsQ0FBRDtBQUNULFlBQUE7UUFBQSxJQUFBLDBDQUF3QixDQUFFLGVBQW5CLEdBQThCLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLE9BQTdDLEdBQTBELElBQUMsQ0FBQTtlQUNsRSxDQUFDLElBQUMsQ0FBQSxRQUFELENBQVUsSUFBVixDQUFEO0lBRlM7Ozs7R0FKK0I7O0FBUWhELE9BQU8sQ0FBQyxnQkFBUixHQUFpQzs7O0lBQ2hCLDBCQUFBO1FBQ1Qsa0RBQU0sV0FBTjtJQURTOzsrQkFHYixXQUFBLEdBQWEsU0FBQyxDQUFEO2VBQ1QsQ0FBQyxJQUFDLENBQUEsUUFBRCxDQUFhLENBQUMsQ0FBQyxLQUFGLElBQVcsWUFBZCxHQUFnQyxVQUFoQyxHQUFnRCxRQUExRCxDQUFEO0lBRFM7Ozs7R0FKeUM7O0FBTzFELE9BQU8sQ0FBQyxXQUFSLEdBQTRCOzs7SUFDWCxxQkFBQTtRQUNULDZDQUFNLE1BQU47SUFEUzs7OztHQUQrQjs7QUFJaEQsT0FBTyxDQUFDLGNBQVIsR0FBK0I7Ozs7Ozs7OztHQUF1Qjs7QUFVdEQsT0FBTyxDQUFDLE1BQVIsR0FBdUI7OztJQUNOLGdCQUFDLFVBQUQ7UUFBQyxJQUFDLENBQUEsYUFBRDtJQUFEOztxQkFFYixRQUFBLEdBQVUsQ0FBQyxZQUFEOztxQkFFVixXQUFBLEdBQWE7O3FCQUNiLFVBQUEsR0FBYTs7cUJBQ2IsS0FBQSxHQUFhOztxQkFFYixrQkFBQSxHQUFvQixTQUFDLENBQUQsRUFBSSxLQUFKO0FBQ2hCLFlBQUE7UUFBQSxJQUFBLDBDQUFrQixDQUFFLFVBQWIsQ0FBQTtRQUNQLElBQUcsSUFBQSxJQUFTLENBQUEsQ0FBQSxJQUFBLFlBQW9CLE1BQXBCLENBQVo7bUJBQTRDLElBQUksQ0FBQyxrQkFBTCxDQUF3QixDQUF4QixFQUEyQixLQUEzQixFQUE1QztTQUFBLE1BQUE7bUJBQWtGLCtDQUFNLENBQU4sRUFBUyxLQUFULEVBQWxGOztJQUZnQjs7cUJBSXBCLFdBQUEsR0FBYSxTQUFDLENBQUQ7QUFDVCxZQUFBO1FBQUEsTUFBQSxHQUFTO1FBRVQsTUFBTSxDQUFDLElBQVAsQ0FBWSxJQUFDLENBQUEsUUFBRCxDQUFVLElBQUMsQ0FBQSxHQUFELEdBQU8sQ0FBQSxRQUFBLEdBQVEsQ0FBSSxJQUFDLENBQUEsVUFBSixHQUFvQixHQUFwQixHQUE2QixFQUE5QixDQUFSLENBQWpCLENBQVo7UUFDQSxJQUFHLElBQUMsQ0FBQSxVQUFKO1lBQ0ksTUFBQSxHQUFTLE1BQU0sQ0FBQyxNQUFQLENBQWMsSUFBQyxDQUFBLFVBQVUsQ0FBQyxrQkFBWixDQUErQixDQUEvQixFQUFrQyxXQUFsQyxDQUFkLEVBRGI7O1FBRUEsTUFBTSxDQUFDLElBQVAsQ0FBWSxJQUFDLENBQUEsUUFBRCxDQUFVLEdBQVYsQ0FBWjtBQUNBLGVBQU87SUFQRTs7OztHQWJxQjs7QUF3QnRDLE9BQU8sQ0FBQyxXQUFSLEdBQTRCOzs7Ozs7OzBCQUN4QixXQUFBLEdBQWEsU0FBQyxDQUFEO1FBQ1QsSUFBTyxzQkFBUDtZQUNJLElBQUMsQ0FBQSxLQUFELENBQU8sdUNBQVAsRUFESjs7ZUFFQSw4Q0FBQSxTQUFBO0lBSFM7Ozs7R0FEK0I7O0FBY2hELE9BQU8sQ0FBQyxLQUFSLEdBQXNCOzs7SUFFTCxlQUFDLElBQUQsRUFBTyxLQUFQLEVBQWMsR0FBZDtRQUNULElBQWUsQ0FBSSxLQUFKLElBQWMsSUFBQSxZQUFnQixLQUE3QztBQUFBLG1CQUFPLEtBQVA7O1FBQ0EsSUFBQyxDQUFBLElBQUQsR0FBYztRQUNkLElBQUMsQ0FBQSxVQUFELEdBQWMsS0FBQSxJQUFTO1FBQ3ZCLElBQXNCLEdBQXRCO1lBQUEsSUFBRSxDQUFBLEdBQUEsQ0FBRixHQUFjLEtBQWQ7O0FBQ0EsZUFBTztJQUxFOztvQkFPYixRQUFBLEdBQVUsQ0FBQyxNQUFELEVBQVMsWUFBVDs7b0JBR1YsR0FBQSxHQUFLLFNBQUMsS0FBRDtRQUNELElBQUMsQ0FBQSxVQUFELEdBQWMsSUFBQyxDQUFBLFVBQVUsQ0FBQyxNQUFaLENBQW1CLEtBQW5CO2VBQ2Q7SUFGQzs7b0JBSUwsYUFBQSxHQUFlLFNBQUE7ZUFDWCxDQUFDLENBQUMsSUFBQyxDQUFBLFVBQVUsQ0FBQztJQURIOztvQkFHZixXQUFBLEdBQWEsU0FBQyxJQUFEO2VBQ1QsQ0FBSSxJQUFDLENBQUEsVUFBVSxDQUFDLE1BQWhCLElBQTJCLElBQUMsQ0FBQSxJQUFELFlBQWlCO0lBRG5DOztvQkFJYixPQUFBLEdBQWMsU0FBQTtlQUFHLElBQUMsQ0FBQSxXQUFELENBQWEsR0FBYjtJQUFIOztvQkFDZCxPQUFBLEdBQWMsU0FBQTtlQUFHLElBQUMsQ0FBQSxXQUFELENBQWEsS0FBYjtJQUFIOztvQkFDZCxTQUFBLEdBQWMsU0FBQTtlQUFHLElBQUMsQ0FBQSxhQUFELENBQUEsQ0FBQSxJQUFvQixJQUFDLENBQUEsSUFBSSxDQUFDLFNBQU4sQ0FBQTtJQUF2Qjs7b0JBQ2QsWUFBQSxHQUFjLFNBQUE7ZUFBRyxJQUFDLENBQUEsYUFBRCxDQUFBLENBQUEsSUFBb0IsSUFBQyxDQUFBLElBQUksQ0FBQyxZQUFOLENBQUE7SUFBdkI7O29CQUNkLFFBQUEsR0FBYyxTQUFBO2VBQUcsSUFBQyxDQUFBLFdBQUQsQ0FBYSxhQUFiO0lBQUg7O29CQUNkLFFBQUEsR0FBYyxTQUFBO2VBQUcsSUFBQyxDQUFBLFdBQUQsQ0FBYSxhQUFiO0lBQUg7O29CQUNkLE9BQUEsR0FBYyxTQUFBO2VBQUcsSUFBQyxDQUFBLFdBQUQsQ0FBYSxZQUFiO0lBQUg7O29CQUNkLFdBQUEsR0FBYyxTQUFBO2VBQUcsSUFBQyxDQUFBLFdBQUQsQ0FBYSxnQkFBYjtJQUFIOztvQkFDZCxNQUFBLEdBQWMsU0FBQTtlQUFHLElBQUMsQ0FBQSxXQUFELENBQWEsV0FBYjtJQUFIOztvQkFDZCxTQUFBLEdBQWMsU0FBQTtlQUFHLElBQUMsQ0FBQSxXQUFELENBQWEsY0FBYjtJQUFIOztvQkFDZCxRQUFBLEdBQWMsU0FBQTtBQUNWLFlBQUE7QUFBQTtBQUFBLGFBQUEsd0NBQUE7O1lBQ0ksSUFBYSxJQUFJLENBQUMsSUFBTCxJQUFhLElBQUEsWUFBZ0IsSUFBMUM7QUFBQSx1QkFBTyxNQUFQOztBQURKO2VBRUE7SUFIVTs7b0JBS2QsYUFBQSxHQUFlLFNBQUE7ZUFBRyxJQUFDLENBQUEsUUFBRCxDQUFBLENBQUEsSUFBZSxJQUFDLENBQUEsUUFBRCxDQUFBLENBQWYsSUFBOEIsSUFBQyxDQUFBLE9BQUQsQ0FBQSxDQUE5QixJQUNlLElBQUMsQ0FBQSxPQUFELENBQUEsQ0FEZixJQUM2QixJQUFDLENBQUEsT0FBRCxDQUFBLENBRDdCLElBQzJDLElBQUMsQ0FBQSxRQUFELENBQUEsQ0FEM0MsSUFDMEQsSUFBQyxDQUFBLFFBQUQsQ0FBQSxDQUQxRCxJQUVlLElBQUMsQ0FBQSxXQUFELENBQUEsQ0FGZixJQUVpQyxJQUFDLENBQUEsTUFBRCxDQUFBLENBRmpDLElBRThDLElBQUMsQ0FBQSxTQUFELENBQUE7SUFGakQ7O29CQUlmLFdBQUEsR0FBYSxTQUFDLENBQUQ7ZUFBVSxDQUFJLElBQUMsQ0FBQSxVQUFVLENBQUMsTUFBaEIsSUFBMkIsSUFBQyxDQUFBLElBQUksQ0FBQyxXQUFOLENBQWtCLENBQWxCO0lBQXJDOztvQkFDYixPQUFBLEdBQWEsU0FBQyxJQUFEO2VBQVUsQ0FBSSxJQUFDLENBQUEsVUFBVSxDQUFDLE1BQWhCLElBQTJCLElBQUMsQ0FBQSxJQUFJLENBQUMsT0FBTixDQUFjLElBQWQ7SUFBckM7O29CQUNiLEtBQUEsR0FBYSxTQUFDLENBQUQ7ZUFBVSxDQUFJLElBQUMsQ0FBQSxVQUFVLENBQUMsTUFBaEIsSUFBMkIsSUFBQyxDQUFBLElBQUksQ0FBQyxLQUFOLENBQVksQ0FBWjtJQUFyQzs7b0JBRWIsUUFBQSxHQUFVLFNBQUMsYUFBRDtRQUNOLElBQWEsSUFBQyxDQUFBLFVBQVUsQ0FBQyxNQUF6QjtBQUFBLG1CQUFPLE1BQVA7O2VBQ0EsQ0FBQyxJQUFDLENBQUEsSUFBRCxZQUFpQixHQUFsQixDQUFBLElBQTJCLENBQUMsQ0FBSSxhQUFKLElBQXFCLElBQUMsQ0FBQSxJQUFJLENBQUMsU0FBNUI7SUFGckI7O29CQUlWLFFBQUEsR0FBVSxTQUFBO0FBQ04sWUFBQTtRQUFBLE9BQWtCLElBQUMsQ0FBQSxVQUFuQixFQUFNO2VBQ04sUUFBQSxZQUFvQjtJQUZkOztvQkFJVixXQUFBLEdBQWEsU0FBQyxTQUFEO0FBQ1QsWUFBQTtlQUFBLElBQUMsQ0FBQSxJQUFJLENBQUMsS0FBTixLQUFlLFNBQWYsSUFBNkIsSUFBQyxDQUFBLFVBQVUsQ0FBQyxNQUFaLEtBQXNCLENBQW5ELG9EQUN1QixDQUFFLGVBQXJCLEtBQThCO0lBRnpCOztvQkFLYixNQUFBLEdBQVEsU0FBQTtRQUNKLElBQUcsSUFBQyxDQUFBLFVBQVUsQ0FBQyxNQUFmO21CQUEyQixLQUEzQjtTQUFBLE1BQUE7bUJBQXFDLElBQUMsQ0FBQSxLQUF0Qzs7SUFESTs7b0JBT1IsY0FBQSxHQUFnQixTQUFDLENBQUQ7QUFFWixZQUFBO1FBQUEsT0FBYyxJQUFDLENBQUEsVUFBZixFQUFNO1FBQ04sSUFBRyxJQUFDLENBQUEsVUFBVSxDQUFDLE1BQVosR0FBcUIsQ0FBckIsSUFBMkIsQ0FBSSxJQUFDLENBQUEsSUFBSSxDQUFDLFNBQU4sQ0FBQSxDQUEvQixJQUFxRCxpQkFBSSxJQUFJLENBQUUsU0FBTixDQUFBLFdBQTVEO0FBQ0ksbUJBQU8sQ0FBQyxJQUFELEVBQU8sSUFBUCxFQURYOztRQUVBLElBQUEsR0FBTyxJQUFJLEtBQUosQ0FBVSxJQUFDLENBQUEsSUFBWCxFQUFpQixJQUFDLENBQUEsVUFBVyxhQUE3QjtRQUNQLElBQUcsSUFBSSxDQUFDLFNBQUwsQ0FBQSxDQUFIO1lBQ0ksSUFBQSxHQUFPLElBQUksaUJBQUosQ0FBc0IsQ0FBQyxDQUFDLEtBQUssQ0FBQyxZQUFSLENBQXFCLE1BQXJCLENBQXRCO1lBQ1AsSUFBQSxHQUFPLElBQUksS0FBSixDQUFVLElBQUksTUFBSixDQUFXLElBQUksTUFBSixDQUFXLElBQVgsRUFBaUIsSUFBakIsQ0FBWCxDQUFWLEVBRlg7O1FBR0EsSUFBQSxDQUEyQixJQUEzQjtBQUFBLG1CQUFPLENBQUMsSUFBRCxFQUFPLElBQVAsRUFBUDs7UUFDQSxJQUFHLElBQUksQ0FBQyxTQUFMLENBQUEsQ0FBSDtZQUNJLElBQUEsR0FBTyxJQUFJLGlCQUFKLENBQXNCLENBQUMsQ0FBQyxLQUFLLENBQUMsWUFBUixDQUFxQixNQUFyQixDQUF0QjtZQUNQLElBQUEsR0FBTyxJQUFJLEtBQUosQ0FBVSxJQUFJLE1BQUosQ0FBVyxJQUFYLEVBQWlCLElBQUksQ0FBQyxLQUF0QixDQUFWO1lBQ1AsSUFBQSxHQUFPLElBQUksS0FBSixDQUFVLElBQVYsRUFIWDs7ZUFJQSxDQUFDLElBQUksQ0FBQyxHQUFMLENBQVMsSUFBVCxDQUFELEVBQWlCLElBQUksS0FBSixDQUFVLElBQUEsSUFBUSxJQUFJLENBQUMsSUFBdkIsRUFBNkIsQ0FBQyxJQUFBLElBQVEsSUFBVCxDQUE3QixDQUFqQjtJQWRZOztvQkFxQmhCLFdBQUEsR0FBYSxTQUFDLENBQUQ7QUFFVCxZQUFBO1FBQUEsSUFBQyxDQUFBLElBQUksQ0FBQyxLQUFOLEdBQWMsSUFBQyxDQUFBO1FBQ2YsS0FBQSxHQUFRLElBQUMsQ0FBQTtRQUNULFNBQUEsR0FBWSxJQUFDLENBQUEsSUFBSSxDQUFDLGtCQUFOLENBQXlCLENBQXpCLEVBQTRCLENBQUksS0FBSyxDQUFDLE1BQVQsR0FBcUIsWUFBckIsR0FBdUMsSUFBeEMsQ0FBNUI7UUFDWixJQUFHLEtBQUssQ0FBQyxNQUFOLElBQWlCLFNBQVMsQ0FBQyxJQUFWLENBQWUsZUFBQSxDQUFnQixTQUFoQixDQUFmLENBQXBCO1lBQ0ksU0FBUyxDQUFDLElBQVYsQ0FBZSxJQUFDLENBQUEsUUFBRCxDQUFVLEdBQVYsQ0FBZixFQURKOztBQUVBLGFBQUEseUNBQUE7O1lBQ0ksU0FBUyxDQUFDLElBQVYsa0JBQWdCLElBQUksQ0FBQyxrQkFBTCxDQUF3QixDQUF4QixDQUFoQjtBQURKO2VBRUE7SUFUUzs7b0JBYWIsVUFBQSxHQUFZLFNBQUMsQ0FBRDsyQ0FFUixJQUFDLENBQUEsZUFBRCxJQUFDLENBQUEsZUFBbUIsQ0FBQSxTQUFBLEtBQUE7bUJBQUEsU0FBQTtBQUNoQixvQkFBQTtnQkFBQSxJQUFHLEdBQUEsR0FBTSxLQUFDLENBQUEsSUFBSSxDQUFDLFVBQU4sQ0FBaUIsQ0FBakIsQ0FBVDtvQkFDSSxRQUFBLEdBQUcsQ0FBQyxJQUFJLENBQUMsVUFBVCxDQUFtQixDQUFDLElBQXBCLGFBQXlCLEtBQUMsQ0FBQSxVQUExQjtBQUNBLDJCQUFPLElBRlg7O0FBR0E7QUFBQSxxQkFBQSxnREFBQTs7eUJBQWdDLElBQUksQ0FBQzs7O29CQUNqQyxJQUFJLENBQUMsSUFBTCxHQUFZO29CQUNaLEdBQUEsR0FBTSxJQUFJLEtBQUosQ0FBVSxLQUFDLENBQUEsSUFBWCxFQUFpQixLQUFDLENBQUEsVUFBVyxZQUE3QjtvQkFDTixHQUFBLEdBQU0sSUFBSSxLQUFKLENBQVUsS0FBQyxDQUFBLElBQVgsRUFBaUIsS0FBQyxDQUFBLFVBQVcsU0FBN0I7b0JBQ04sSUFBRyxHQUFHLENBQUMsU0FBSixDQUFBLENBQUg7d0JBQ0ksR0FBQSxHQUFNLElBQUksaUJBQUosQ0FBc0IsQ0FBQyxDQUFDLEtBQUssQ0FBQyxZQUFSLENBQXFCLEtBQXJCLENBQXRCO3dCQUNOLEdBQUEsR0FBTSxJQUFJLE1BQUosQ0FBVyxJQUFJLE1BQUosQ0FBVyxHQUFYLEVBQWdCLEdBQWhCLENBQVg7d0JBQ04sR0FBRyxDQUFDLElBQUosR0FBVyxJQUhmOztBQUlBLDJCQUFPLElBQUksRUFBSixDQUFPLElBQUksU0FBSixDQUFjLEdBQWQsQ0FBUCxFQUEyQixHQUEzQixFQUFnQzt3QkFBQSxJQUFBLEVBQU0sSUFBTjtxQkFBaEM7QUFSWDt1QkFTQTtZQWJnQjtRQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBSCxDQUFBO0lBRlQ7Ozs7R0FwR29COztBQTJIcEMsT0FBTyxDQUFDLE9BQVIsR0FBd0I7OztJQUVQLGlCQUFDLFFBQUQ7UUFBQyxJQUFDLENBQUEsVUFBRDtJQUFEOztzQkFFYixXQUFBLEdBQWE7O3NCQUNiLFVBQUEsR0FBYTs7c0JBRWIsV0FBQSxHQUFhLFNBQUMsQ0FBRCxFQUFJLEtBQUo7QUFFVCxZQUFBO1FBQUEsT0FBQSxHQUFVLElBQUMsQ0FBQSxPQUFPLENBQUMsT0FBVCxDQUFpQixpQkFBakIsRUFBb0MsTUFBcEM7UUFDVixJQUFBLEdBQU8sSUFBQSxHQUFJLENBQUMsU0FBQSxDQUFVLE9BQVYsRUFBbUIsSUFBQyxDQUFBLEdBQXBCLENBQUQsQ0FBSixHQUE4QixDQUFJLGFBQVEsT0FBUixFQUFBLElBQUEsTUFBSCxHQUF3QixJQUFBLEdBQUssSUFBQyxDQUFBLEdBQTlCLEdBQXlDLEVBQTFDLENBQTlCLEdBQTJFO1FBQ2xGLElBQTBCLENBQUMsS0FBQSxJQUFTLENBQUMsQ0FBQyxLQUFaLENBQUEsS0FBc0IsU0FBaEQ7WUFBQSxJQUFBLEdBQU8sQ0FBQyxDQUFDLE1BQUYsR0FBVyxLQUFsQjs7ZUFDQSxDQUFDLElBQUMsQ0FBQSxRQUFELENBQVUsSUFBVixDQUFELEVBQWtCLElBQUMsQ0FBQSxRQUFELENBQVUsSUFBVixDQUFsQjtJQUxTOzs7O0dBUHVCOztBQXNCeEMsT0FBTyxDQUFDLElBQVIsR0FBcUI7OztJQUNKLGNBQUMsU0FBRCxFQUFZLEtBQVosRUFBd0IsS0FBeEI7UUFBQyxJQUFDLENBQUEsV0FBRDtRQUFXLElBQUMsQ0FBQSx1QkFBRCxRQUFRO1FBQUksSUFBQyxDQUFBLE9BQUQ7UUFDakMsSUFBQyxDQUFBLEtBQUQsR0FBYztRQUNkLElBQUcsSUFBQyxDQUFBLFFBQUQsWUFBcUIsS0FBckIsSUFBK0IsSUFBQyxDQUFBLFFBQVEsQ0FBQyxhQUFWLENBQUEsQ0FBbEM7WUFDSSxJQUFDLENBQUEsUUFBUSxDQUFDLEtBQVYsQ0FBZ0IsMkJBQWhCLEVBREo7O0lBRlM7O21CQUtiLFFBQUEsR0FBVSxDQUFDLFVBQUQsRUFBYSxNQUFiOzttQkFNViwyQkFBQSxHQUE2QixTQUFDLFlBQUQ7QUFFekIsWUFBQTtRQUFBLElBQUcsSUFBQyxDQUFBLFlBQUQsSUFBa0IsSUFBQyxDQUFBLHlCQUF0QjtZQUNJLElBQUMsQ0FBQSxZQUFZLENBQUMsVUFBZCxHQUEyQixZQUFZLENBQUM7WUFDeEMsSUFBQyxDQUFBLFlBQVksQ0FBQyxZQUFkLEdBQTZCLFlBQVksQ0FBQztZQUMxQyxJQUFBLHlDQUFnQixDQUFFLGNBQVgsSUFBbUIsSUFBQyxDQUFBO1lBQzNCLElBQUcsSUFBSSxDQUFDLHlCQUFSO2dCQUNJLElBQUMsQ0FBQSxRQUFRLENBQUMsWUFBWSxDQUFDLFVBQXZCLEdBQW9DLFlBQVksQ0FBQztnQkFDakQsSUFBQyxDQUFBLFFBQVEsQ0FBQyxZQUFZLENBQUMsWUFBdkIsR0FBc0MsWUFBWSxDQUFDO2dCQUNuRCxJQUFJLENBQUMsMkJBQUwsQ0FBaUMsWUFBakMsRUFISjs7WUFJQSxPQUFPLElBQUMsQ0FBQSwwQkFSWjs7ZUFTQSx1REFBQSxTQUFBO0lBWHlCOzttQkFjN0IsV0FBQSxHQUFhLFNBQUE7QUFDVCxZQUFBO1FBQUEsSUFBQSx5Q0FBZ0IsQ0FBRSxjQUFYLElBQW1CLElBQUMsQ0FBQTtRQUMzQixJQUFHLElBQUEsWUFBZ0IsSUFBaEIsSUFBeUIsQ0FBSSxJQUFJLENBQUMsS0FBckM7WUFDSSxJQUFJLENBQUMsV0FBTCxDQUFBLEVBREo7U0FBQSxNQUFBO1lBR0ksSUFBQyxDQUFBLEtBQUQsR0FBUyxLQUhiOztRQUlBLElBQUMsQ0FBQSx5QkFBRCxHQUE2QjtlQUM3QjtJQVBTOzttQkFVYixVQUFBLEdBQVksU0FBQyxDQUFEO0FBQ1IsWUFBQTtRQUFBLElBQUcsSUFBQyxDQUFBLElBQUo7WUFDSSxJQUFHLElBQUEsWUFBZ0IsU0FBbkI7Z0JBQ0ksSUFBQSxHQUFPLElBQUksT0FBSixDQUFZLElBQUMsQ0FBQSxjQUFELENBQWdCLENBQWhCLENBQVo7Z0JBQ1AsSUFBQSxHQUFPLElBQUksS0FBSixDQUFVLElBQVYsRUFGWDthQUFBLE1BQUE7Z0JBSUksSUFBYyxHQUFBLEdBQU0sVUFBQSxDQUFXLENBQVgsRUFBYyxJQUFkLEVBQW9CLFVBQXBCLENBQXBCO0FBQUEsMkJBQU8sSUFBUDs7Z0JBQ0EsT0FBZSxJQUFJLEtBQUosQ0FBVSxJQUFDLENBQUEsUUFBWCxDQUFvQixDQUFDLGNBQXJCLENBQW9DLENBQXBDLENBQWYsRUFBQyxjQUFELEVBQU8sZUFMWDs7WUFNQSxJQUFBLEdBQU8sSUFBSSxJQUFKLENBQVMsSUFBVCxFQUFlLElBQUMsQ0FBQSxJQUFoQjtZQUNQLElBQUksQ0FBQyxLQUFMLEdBQWEsSUFBQyxDQUFBO1lBQ2QsSUFBQSxHQUFPLElBQUksT0FBSixDQUFZLFNBQUEsR0FBUyxDQUFFLElBQUksQ0FBQyxPQUFMLENBQWEsQ0FBYixDQUFGLENBQVQsR0FBMkIsbUJBQXZDO0FBQ1AsbUJBQU8sSUFBSSxFQUFKLENBQU8sSUFBUCxFQUFhLElBQUksS0FBSixDQUFVLElBQVYsQ0FBYixFQUE4QjtnQkFBQSxJQUFBLEVBQU0sSUFBTjthQUE5QixFQVZYOztRQVdBLElBQUEsR0FBTztRQUNQLElBQUEsR0FBTztBQUNQLGVBQUEsSUFBQTtZQUNJLElBQUcsSUFBSSxDQUFDLFFBQUwsWUFBeUIsSUFBNUI7Z0JBQ0ksSUFBSSxDQUFDLElBQUwsQ0FBVSxJQUFWO2dCQUNBLElBQUEsR0FBTyxJQUFJLENBQUM7QUFDWix5QkFISjs7WUFJQSxJQUFBLENBQUEsQ0FBYSxJQUFJLENBQUMsUUFBTCxZQUF5QixLQUF0QyxDQUFBO0FBQUEsc0JBQUE7O1lBQ0EsSUFBSSxDQUFDLElBQUwsQ0FBVSxJQUFWO1lBQ0EsSUFBQSxDQUFBLENBQWEsQ0FBQyxJQUFBLEdBQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUF0QixDQUFBLFlBQXVDLElBQXBELENBQUE7QUFBQSxzQkFBQTs7UUFQSjtBQVFBO0FBQUEsYUFBQSx3Q0FBQTs7WUFDSSxJQUFHLEdBQUg7Z0JBQ0ksSUFBRyxJQUFJLENBQUMsUUFBTCxZQUF5QixJQUE1QjtvQkFDSSxJQUFJLENBQUMsUUFBTCxHQUFnQixJQURwQjtpQkFBQSxNQUFBO29CQUdJLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBZCxHQUFxQixJQUh6QjtpQkFESjs7WUFLQSxHQUFBLEdBQU0sVUFBQSxDQUFXLENBQVgsRUFBYyxJQUFkLEVBQW9CLFVBQXBCO0FBTlY7ZUFPQTtJQTdCUTs7bUJBK0JaLFdBQUEsR0FBYSxTQUFDLENBQUQ7QUFFVCxZQUFBOztnQkFBUyxDQUFFLEtBQVgsR0FBbUIsSUFBQyxDQUFBOztRQUNwQixhQUFBLEdBQWdCLEtBQUssQ0FBQyxvQkFBTixDQUEyQixDQUEzQixFQUE4QixJQUFDLENBQUEsSUFBL0IsRUFBcUMsSUFBckM7UUFDaEIsSUFBRyxhQUFhLENBQUMsTUFBakI7QUFDSSxtQkFBTyxJQUFDLENBQUEsWUFBRCxDQUFjLENBQWQsRUFBaUIsYUFBakIsRUFEWDs7UUFFQSxZQUFBLEdBQWU7QUFDZjtBQUFBLGFBQUEsOERBQUE7O1lBQ0ksSUFBRyxRQUFIO2dCQUFpQixZQUFZLENBQUMsSUFBYixDQUFrQixJQUFDLENBQUEsUUFBRCxDQUFVLElBQVYsQ0FBbEIsRUFBakI7O1lBQ0EsWUFBWSxDQUFDLElBQWIscUJBQW1CLEdBQUcsQ0FBQyxrQkFBSixDQUF1QixDQUF2QixFQUEwQixVQUExQixDQUFuQjtBQUZKO1FBSUEsU0FBQSxHQUFZO1FBQ1osSUFBRyxJQUFBLFlBQWdCLFNBQW5CO1lBQ0ksT0FBQSxHQUFVLElBQUMsQ0FBQSxjQUFELENBQWdCLENBQWhCLENBQUEsR0FBcUIsQ0FBQSxRQUFBLEdBQVEsQ0FBQyxJQUFDLENBQUEsU0FBRCxDQUFXLENBQVgsQ0FBRCxDQUFSO1lBQy9CLElBQUcsWUFBWSxDQUFDLE1BQWhCO2dCQUE0QixPQUFBLElBQVcsS0FBdkM7O1lBQ0EsU0FBUyxDQUFDLElBQVYsQ0FBZSxJQUFDLENBQUEsUUFBRCxDQUFVLE9BQVYsQ0FBZixFQUhKO1NBQUEsTUFBQTtZQUtJLElBQUcsSUFBQyxDQUFBLEtBQUo7Z0JBQWUsU0FBUyxDQUFDLElBQVYsQ0FBZSxJQUFDLENBQUEsUUFBRCxDQUFVLE1BQVYsQ0FBZixFQUFmOztZQUNBLFNBQVMsQ0FBQyxJQUFWLGtCQUFlLElBQUMsQ0FBQSxRQUFRLENBQUMsa0JBQVYsQ0FBNkIsQ0FBN0IsRUFBZ0MsWUFBaEMsQ0FBZjtZQUNBLFNBQVMsQ0FBQyxJQUFWLENBQWUsSUFBQyxDQUFBLFFBQUQsQ0FBVSxHQUFWLENBQWYsRUFQSjs7UUFRQSxTQUFTLENBQUMsSUFBVixrQkFBZSxZQUFmO1FBQ0EsU0FBUyxDQUFDLElBQVYsQ0FBZSxJQUFDLENBQUEsUUFBRCxDQUFVLEdBQVYsQ0FBZjtlQUNBO0lBdEJTOzttQkErQmIsWUFBQSxHQUFjLFNBQUMsQ0FBRCxFQUFJLFNBQUo7QUFFVixZQUFBO1FBQUEsSUFBRyxJQUFBLFlBQWdCLFNBQW5CO0FBQ0ksbUJBQU8sRUFBRSxDQUFDLE1BQUgsQ0FBVSxJQUFDLENBQUEsUUFBRCxDQUFZLENBQUUsSUFBQyxDQUFBLGNBQUQsQ0FBZ0IsQ0FBaEIsQ0FBRixDQUFBLEdBQXFCLFNBQXJCLEdBQTZCLENBQUMsSUFBQyxDQUFBLFNBQUQsQ0FBVyxDQUFYLENBQUQsQ0FBN0IsR0FBNEMsSUFBeEQsQ0FBVixFQUNILFNBREcsRUFDUSxJQUFDLENBQUEsUUFBRCxDQUFVLEdBQVYsQ0FEUixFQURYOztRQUlBLElBQUcsSUFBQyxDQUFBLEtBQUo7WUFDSSxHQUFBLEdBQU0sSUFBQyxDQUFBLEdBQUQsR0FBTztBQUNiLG1CQUFPLEVBQUUsQ0FBQyxNQUFILENBQVUsSUFBQyxDQUFBLFFBQUQsQ0FBVSxpQ0FBQSxHQUVyQixHQUZxQixHQUVqQixvQ0FGaUIsR0FHckIsR0FIcUIsR0FHakIsMkRBSGlCLEdBSXJCLEdBSnFCLEdBSWpCLHNEQUppQixHQUtyQixJQUFDLENBQUEsR0FMb0IsR0FLaEIsS0FMTSxDQUFWLEVBTUYsSUFBQyxDQUFBLFFBQVEsQ0FBQyxrQkFBVixDQUE2QixDQUE3QixFQUFnQyxVQUFoQyxDQU5FLEVBT0gsSUFBQyxDQUFBLFFBQUQsQ0FBVSxJQUFWLENBUEcsRUFPYyxTQVBkLEVBT3lCLElBQUMsQ0FBQSxRQUFELENBQVUsaUJBQVYsQ0FQekIsRUFGWDs7UUFXQSxNQUFBLEdBQVM7UUFDVCxJQUFBLEdBQU8sSUFBSSxLQUFKLENBQVUsSUFBQyxDQUFBLFFBQVg7UUFDUCxJQUFHLENBQUMsSUFBQSxHQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBaEIsQ0FBQSxDQUFSLENBQUEsSUFBbUMsSUFBSSxDQUFDLFNBQUwsQ0FBQSxDQUF0QztZQUNJLEdBQUEsR0FBTSxDQUFDLENBQUMsS0FBSyxDQUFDLFlBQVIsQ0FBcUIsS0FBckI7WUFDTixNQUFBLEdBQVMsTUFBTSxDQUFDLE1BQVAsQ0FBYyxJQUFDLENBQUEsUUFBRCxDQUFVLEdBQUEsR0FBSSxHQUFKLEdBQVEsS0FBbEIsQ0FBZCxFQUNKLElBQUksQ0FBQyxrQkFBTCxDQUF3QixDQUF4QixFQUEyQixVQUEzQixDQURJLEVBRUwsSUFBQyxDQUFBLFFBQUQsQ0FBVSxHQUFWLENBRkssRUFHTCxJQUFJLENBQUMsa0JBQUwsQ0FBd0IsQ0FBeEIsQ0FISyxFQUZiO1NBQUEsTUFBQTtZQU9JLEdBQUEsR0FBTSxJQUFJLENBQUMsa0JBQUwsQ0FBd0IsQ0FBeEIsRUFBMkIsWUFBM0I7WUFDTixJQUEyQixTQUFTLENBQUMsSUFBVixDQUFlLGVBQUEsQ0FBZ0IsR0FBaEIsQ0FBZixDQUEzQjtnQkFBQSxHQUFBLEdBQU0sSUFBQyxDQUFBLFlBQUQsQ0FBYyxHQUFkLEVBQU47O1lBQ0EsSUFBRyxJQUFIO2dCQUNJLEdBQUEsR0FBTSxlQUFBLENBQWdCLEdBQWhCO2dCQUNOLEdBQUcsQ0FBQyxJQUFKLFlBQVUsSUFBSSxDQUFDLGtCQUFMLENBQXdCLENBQXhCLENBQVYsRUFGSjthQUFBLE1BQUE7Z0JBSUksR0FBQSxHQUFNLE9BSlY7O1lBS0EsTUFBQSxHQUFTLE1BQU0sQ0FBQyxNQUFQLENBQWMsR0FBZCxFQWRiOztlQWVBLE1BQUEsR0FBUyxNQUFNLENBQUMsTUFBUCxDQUFjLElBQUMsQ0FBQSxRQUFELENBQVUsU0FBQSxHQUFVLEdBQVYsR0FBYyxJQUF4QixDQUFkLEVBQTRDLFNBQTVDLEVBQXVELElBQUMsQ0FBQSxRQUFELENBQVUsR0FBVixDQUF2RDtJQWxDQzs7OztHQWxHZ0I7O0FBOElsQyxPQUFPLENBQUMsU0FBUixHQUEwQjs7O0lBRVQsbUJBQUMsSUFBRDtRQUNULDJDQUFNLElBQU4saUJBQVksT0FBTyxDQUFDLElBQUksS0FBSixDQUFVLElBQUksaUJBQUosQ0FBc0IsV0FBdEIsQ0FBVixDQUFELENBQW5CO1FBRUEsSUFBQyxDQUFBLE1BQUQsR0FBVTtJQUhEOzt3QkFPYixjQUFBLEdBQWdCLFNBQUMsQ0FBRDtBQUVaLFlBQUE7UUFBQSxNQUFBLEdBQVMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxXQUFSLENBQUE7UUFDVCxxQkFBRyxNQUFNLENBQUUsY0FBWDtZQUNLLG9CQUFELEVBQVEsa0JBQVIsRUFBYztZQUNkLElBQUcsS0FBSyxDQUFDLFNBQU4sQ0FBQSxDQUFIO2dCQUNJLElBQUEsR0FBTyxJQUFJLGlCQUFKLENBQXNCLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLFlBQWYsQ0FBNEIsTUFBNUIsQ0FBdEI7Z0JBQ1AsSUFBQSxHQUFPLElBQUksS0FBSixDQUFVLElBQUksTUFBSixDQUFXLElBQUksTUFBSixDQUFXLElBQVgsRUFBaUIsS0FBakIsQ0FBWCxDQUFWO2dCQUNQLFFBQVEsQ0FBQyxJQUFULEdBQWdCO2dCQUNoQixRQUFRLENBQUMsVUFBVSxDQUFDLE1BQXBCLENBQTJCLENBQTNCLEVBQThCLEtBQUssQ0FBQyxVQUFVLENBQUMsTUFBL0MsRUFKSjs7WUFLQSxJQUFHLElBQUksQ0FBQyxTQUFMLENBQUEsQ0FBQSxJQUFvQixDQUFDLElBQUEsWUFBZ0IsS0FBaEIsSUFBMEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFYLENBQUEsQ0FBM0IsQ0FBdkI7Z0JBQ0ksSUFBQSxHQUFPLElBQUksaUJBQUosQ0FBc0IsQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsWUFBZixDQUE0QixNQUE1QixDQUF0QjtnQkFDUCxJQUFBLEdBQU8sSUFBSSxLQUFKLENBQVUsSUFBSSxNQUFKLENBQVcsSUFBWCxFQUFpQixJQUFJLENBQUMsS0FBdEIsQ0FBVjtnQkFDUCxRQUFRLENBQUMsVUFBVSxDQUFDLEdBQXBCLENBQUE7Z0JBQ0EsUUFBUSxDQUFDLFVBQVUsQ0FBQyxJQUFwQixDQUF5QixJQUF6QixFQUpKOztZQUtBLFFBQUEsR0FBVyxDQUFDLElBQUksTUFBSixDQUFXLElBQUksWUFBSixDQUFpQixXQUFqQixDQUFYLENBQUQ7WUFDWCxJQUEyRCxNQUFNLEVBQUMsTUFBRCxFQUFqRTtnQkFBQSxRQUFRLENBQUMsSUFBVCxDQUFjLElBQUksTUFBSixDQUFXLElBQUksWUFBSixDQUFpQixhQUFqQixDQUFYLENBQWQsRUFBQTs7WUFDQSxRQUFRLENBQUMsSUFBVCxDQUFpQixZQUFILEdBQWMsSUFBSSxLQUFKLENBQVUsSUFBVixDQUFkLEdBQWtDLElBQWhEO21CQUNBLENBQUMsSUFBSSxLQUFKLGdCQUFVLE9BQU8sS0FBakIsRUFBd0IsUUFBeEIsQ0FBRCxDQUFrQyxDQUFDLE9BQW5DLENBQTJDLENBQTNDLEVBZko7U0FBQSxNQWdCSyxxQkFBRyxNQUFNLENBQUUsYUFBWDttQkFFRSxNQUFNLENBQUMsSUFBUixHQUFhLHlCQUZkO1NBQUEsTUFBQTttQkFJRCxJQUFDLENBQUEsS0FBRCxDQUFPLGtEQUFQLEVBSkM7O0lBbkJPOzt3QkEyQmhCLFNBQUEsR0FBVyxTQUFDLENBQUQ7QUFDUCxZQUFBO1FBQUEsTUFBQSxHQUFTLENBQUMsQ0FBQyxLQUFLLENBQUM7ZUFDakIsQ0FBQyxNQUFBLElBQVcsQ0FBSSxNQUFNLENBQUMsS0FBdEIsSUFBZ0MsTUFBTSxDQUFDLE9BQXhDLENBQUEsSUFBb0Q7SUFGN0M7O3dCQUlYLFlBQUEsR0FBYyxTQUFDLENBQUQsRUFBSSxTQUFKO1FBRVYsSUFBRyxTQUFTLENBQUMsTUFBVixLQUFvQixDQUFwQixJQUEwQixTQUFVLENBQUEsQ0FBQSxDQUFFLENBQUMsSUFBYixLQUFxQixXQUEvQyxJQUErRCw4QkFBL0QsSUFBcUYsQ0FBQyxDQUFDLE9BQVEsQ0FBQSxtQkFBQSxDQUFsRztBQUVJLG1CQUFPLEVBQUUsQ0FBQyxNQUFILENBQVUsSUFBQyxDQUFBLFFBQUQsQ0FBVSxFQUFBLEdBQUUsQ0FBQyxJQUFDLENBQUEsOEJBQUQsQ0FBQSxDQUFELENBQUYsR0FBc0MsQ0FBRSxJQUFDLENBQUEsY0FBRCxDQUFnQixDQUFoQixDQUFGLENBQXRDLEdBQTJELFNBQTNELEdBQW1FLENBQUMsSUFBQyxDQUFBLFNBQUQsQ0FBVyxDQUFYLENBQUQsQ0FBbkUsR0FBa0YsSUFBNUYsQ0FBVixFQUE0RyxTQUE1RyxFQUF1SCxJQUFDLENBQUEsUUFBRCxDQUFVLEdBQVYsQ0FBdkgsRUFGWDs7ZUFJQSw2Q0FBQSxTQUFBO0lBTlU7O3dCQVFkLDhCQUFBLEdBQWdDLFNBQUE7QUFFNUIsWUFBQTtRQUFBLElBQWEsQ0FBSSxDQUFBLEtBQUEsR0FBUSxJQUFDLENBQUEsZUFBVCxDQUFqQjtBQUFBLG1CQUFPLEdBQVA7O1FBRUEsQ0FBQSxHQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBZCxDQUFrQixTQUFDLEdBQUQ7QUFDbEIsZ0JBQUE7WUFBQSxDQUFBLEdBQUksR0FBRyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUM7WUFDdEIsQ0FBQSxHQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFDLElBQUQsRUFBbEIsSUFBNEIsT0FBNUIsSUFBdUM7bUJBQ3hDLENBQUQsR0FBRyxHQUFILEdBQUssQ0FBQyxDQUFBLEdBQUUsQ0FBSDtRQUhXLENBQWxCO2VBS0osNkJBQUEsR0FBNkIsQ0FBQyxDQUFDLENBQUMsSUFBRixDQUFPLEdBQVAsQ0FBRCxDQUE3QixHQUF5QztJQVRiOzs7O0dBaERROztBQW9FNUMsT0FBTyxDQUFDLHVCQUFSLEdBQXdDOzs7SUFDdkIsaUNBQUMsSUFBRDs7WUFBQyxPQUFPOztRQUNqQix5REFBTyxJQUFJLEtBQUosQ0FBVSxJQUFJLGlCQUFKLENBQXNCLFFBQXRCLENBQVYsQ0FBUCxFQUFrRCxJQUFsRCxFQUF3RCxLQUF4RDtJQURTOzs7O0dBRHVEOztBQU14RSxPQUFPLENBQUMsa0JBQVIsR0FBbUM7OztJQUNsQiw0QkFBQyxRQUFELEVBQVcsR0FBWCxFQUFnQixJQUFoQjtRQUNULElBQW9FLEdBQUEsWUFBZSxhQUFuRjtZQUFBLEdBQUEsR0FBTSxJQUFJLHdCQUFKLENBQTZCLEtBQUssQ0FBQyxJQUFOLENBQVcsQ0FBRSxJQUFJLEtBQUosQ0FBVSxHQUFWLENBQUYsQ0FBWCxDQUE3QixFQUFOOztRQUNBLG9EQUFNLFFBQU4sRUFBZ0IsQ0FBRSxHQUFGLENBQWhCLEVBQXlCLElBQXpCO0lBRlM7O2lDQUliLFdBQUEsR0FBYSxTQUFDLENBQUQ7UUFFVCxDQUFDLENBQUMsb0JBQUYsR0FBeUI7ZUFDekIsSUFBQyxDQUFBLFFBQVEsQ0FBQyxrQkFBVixDQUE2QixDQUE3QixFQUFnQyxZQUFoQyxDQUE2QyxDQUFDLE1BQTlDLENBQXFELElBQUMsQ0FBQSxJQUFLLENBQUEsQ0FBQSxDQUFFLENBQUMsa0JBQVQsQ0FBNEIsQ0FBNUIsRUFBK0IsVUFBL0IsQ0FBckQ7SUFIUzs7OztHQUw2Qzs7QUFvQjlELE9BQU8sQ0FBQyxPQUFSLEdBQXdCOzs7SUFFUCxpQkFBQyxNQUFELEVBQVMsT0FBVDtRQUFDLElBQUMsQ0FBQSxRQUFEO1FBQVEsSUFBQyxDQUFBLFNBQUQ7SUFBVDs7c0JBRWIsUUFBQSxHQUFVLENBQUMsT0FBRCxFQUFVLFFBQVY7O3NCQUdWLGtCQUFBLEdBQW9CLFNBQUMsQ0FBRDtlQUNoQixJQUFJLElBQUosQ0FBUyxJQUFJLEtBQUosQ0FBVSxJQUFJLE9BQUosQ0FBWSxPQUFBLENBQVEsUUFBUixFQUFrQixDQUFsQixDQUFaLENBQVYsQ0FBVCxFQUFxRCxDQUFDLElBQUMsQ0FBQSxLQUFGLEVBQVMsSUFBQyxDQUFBLE1BQVYsQ0FBckQsQ0FBdUUsQ0FBQyxrQkFBeEUsQ0FBMkYsQ0FBM0Y7SUFEZ0I7Ozs7R0FQZ0I7O0FBbUJ4QyxPQUFPLENBQUMsTUFBUixHQUF1Qjs7O0lBQ04sZ0JBQUMsS0FBRCxFQUFRLEdBQVI7UUFBQyxJQUFDLENBQUEsT0FBRDtRQUNWLElBQUMsQ0FBQSxJQUFELEdBQVEsR0FBQSxLQUFPO0lBRE47O3FCQUdiLFFBQUEsR0FBVSxDQUFDLE1BQUQ7O3FCQUVWLGtCQUFBLEdBQW9CLFNBQUMsQ0FBRDtBQUNoQixZQUFBO1FBQUEsSUFBQSxHQUFPLElBQUMsQ0FBQSxJQUFJLENBQUMsa0JBQU4sQ0FBeUIsQ0FBekI7UUFDUCxJQUFBLEdBQU8sSUFBQyxDQUFBLElBQUksQ0FBQyxNQUFOLENBQUE7UUFDUCxJQUFHLElBQUEsWUFBZ0IsWUFBbkI7WUFDSSxXQUFHLElBQUksQ0FBQyxLQUFMLEVBQUEsYUFBYyxZQUFkLEVBQUEsSUFBQSxNQUFIO3VCQUNLLENBQUEsSUFBQyxDQUFBLFFBQUQsQ0FBVSxJQUFWLENBQWlCLFNBQUEsV0FBQSxJQUFBLENBQUEsRUFBUyxDQUFBLElBQUMsQ0FBQSxRQUFELENBQVUsSUFBVixDQUFBLENBQUEsRUFEL0I7YUFBQSxNQUFBO3VCQUdLLENBQUEsSUFBQyxDQUFBLFFBQUQsQ0FBVSxHQUFWLENBQWdCLFNBQUEsV0FBQSxJQUFBLENBQUEsRUFIckI7YUFESjtTQUFBLE1BQUE7bUJBTUssQ0FBQSxJQUFDLENBQUEsUUFBRCxDQUFVLEdBQVYsQ0FBZ0IsU0FBQSxXQUFBLElBQUEsQ0FBQSxFQUFTLENBQUEsSUFBQyxDQUFBLFFBQUQsQ0FBVSxHQUFWLENBQUEsQ0FBQSxFQU45Qjs7SUFIZ0I7O3FCQVdwQixTQUFBLEdBQVc7Ozs7R0FqQnVCOztBQTJCdEMsT0FBTyxDQUFDLEtBQVIsR0FBc0I7OztJQUNMLGVBQUMsTUFBRDtRQUFDLElBQUMsQ0FBQSxRQUFEO0lBQUQ7O29CQUViLFFBQUEsR0FBVSxDQUFDLE9BQUQ7O29CQUVWLGtCQUFBLEdBQW9CLFNBQUMsQ0FBRDtlQUNoQixFQUFFLENBQUMsTUFBSCxDQUFVLElBQUMsQ0FBQSxRQUFELENBQVUsR0FBVixDQUFWLEVBQTBCLElBQUMsQ0FBQSxLQUFLLENBQUMsa0JBQVAsQ0FBMEIsQ0FBMUIsRUFBNkIsV0FBN0IsQ0FBMUIsRUFBcUUsSUFBQyxDQUFBLFFBQUQsQ0FBVSxHQUFWLENBQXJFO0lBRGdCOztvQkFHcEIsU0FBQSxHQUFXLFNBQUE7ZUFDUCxJQUFDLENBQUEsS0FBSyxDQUFDLFNBQVAsQ0FBQTtJQURPOzs7O0dBUnFCOztBQXFCcEMsT0FBTyxDQUFDLEtBQVIsR0FBc0I7OztvQkFFbEIsUUFBQSxHQUFVLENBQUMsTUFBRCxFQUFTLElBQVQ7O0lBRUcsZUFBQyxLQUFELEVBQVEsR0FBUixFQUFhLEdBQWI7UUFBQyxJQUFDLENBQUEsT0FBRDtRQUFPLElBQUMsQ0FBQSxLQUFEO1FBQ2pCLElBQUMsQ0FBQSxTQUFELEdBQWEsR0FBQSxLQUFPO1FBQ3BCLElBQUMsQ0FBQSxNQUFELEdBQWEsSUFBQyxDQUFBLFNBQUosR0FBbUIsRUFBbkIsR0FBMkI7SUFGNUI7O29CQU9iLGdCQUFBLEdBQWtCLFNBQUMsQ0FBRDtBQUNkLFlBQUE7UUFBQSxDQUFBLEdBQUksS0FBQSxDQUFNLENBQU4sRUFBUztZQUFBLEdBQUEsRUFBSyxJQUFMO1NBQVQ7UUFDSixTQUFBLEdBQVksR0FBQSxDQUFJLENBQUosRUFBTyxXQUFQO1FBQ1osT0FBcUIsSUFBQyxDQUFBLG9CQUFELENBQXNCLElBQUMsQ0FBQSxJQUFJLENBQUMsS0FBTixDQUFZLENBQVosRUFBZSxVQUFmLEVBQTJCLFNBQTNCLENBQXRCLENBQXJCLEVBQUMsSUFBQyxDQUFBLGVBQUYsRUFBUyxJQUFDLENBQUE7UUFDVixPQUFxQixJQUFDLENBQUEsb0JBQUQsQ0FBc0IsSUFBQyxDQUFBLEVBQUUsQ0FBQyxLQUFKLENBQVUsQ0FBVixFQUFhLFVBQWIsRUFBeUIsU0FBekIsQ0FBdEIsQ0FBckIsRUFBQyxJQUFDLENBQUEsYUFBRixFQUFPLElBQUMsQ0FBQTtRQUNSLElBQWtGLElBQUEsR0FBTyxHQUFBLENBQUksQ0FBSixFQUFPLE1BQVAsQ0FBekY7WUFBQSxPQUFxQixJQUFDLENBQUEsb0JBQUQsQ0FBc0IsSUFBSSxDQUFDLEtBQUwsQ0FBVyxDQUFYLEVBQWMsVUFBZCxFQUEwQixTQUExQixDQUF0QixDQUFyQixFQUFDLElBQUMsQ0FBQSxjQUFGLEVBQVEsSUFBQyxDQUFBLGtCQUFUOztRQUNBLElBQUMsQ0FBQSxPQUFELEdBQWMsSUFBQyxDQUFBLElBQUksQ0FBQyxRQUFOLENBQUEsQ0FBSCxHQUF5QixNQUFBLENBQU8sSUFBQyxDQUFBLE9BQVIsQ0FBekIsR0FBOEM7UUFDekQsSUFBQyxDQUFBLEtBQUQsR0FBYyxJQUFDLENBQUEsRUFBRSxDQUFDLFFBQUosQ0FBQSxDQUFILEdBQXlCLE1BQUEsQ0FBTyxJQUFDLENBQUEsS0FBUixDQUF6QixHQUE4QztlQUN6RCxJQUFDLENBQUEsT0FBRCxtQkFBYyxJQUFJLENBQUUsUUFBTixDQUFBLFdBQUgsR0FBeUIsTUFBQSxDQUFPLElBQUMsQ0FBQSxPQUFSLENBQXpCLEdBQThDO0lBUjNDOztvQkFhbEIsV0FBQSxHQUFhLFNBQUMsQ0FBRDtBQUNULFlBQUE7UUFBQSxJQUFBLENBQTJCLElBQUMsQ0FBQSxPQUE1QjtZQUFBLElBQUMsQ0FBQSxnQkFBRCxDQUFrQixDQUFsQixFQUFBOztRQUNBLElBQUEsQ0FBK0IsQ0FBQyxDQUFDLEtBQWpDO0FBQUEsbUJBQU8sSUFBQyxDQUFBLFlBQUQsQ0FBYyxDQUFkLEVBQVA7O1FBR0EsS0FBQSxHQUFXLHNCQUFBLElBQWM7UUFDekIsR0FBQSxHQUFXLEdBQUEsQ0FBSSxDQUFKLEVBQU8sT0FBUDtRQUNYLE9BQUEsR0FBVyxHQUFBLENBQUksQ0FBSixFQUFPLE1BQVA7UUFDWCxVQUFBLEdBQWEsT0FBQSxJQUFZLE9BQUEsS0FBVztRQUNwQyxPQUFBLEdBQWMsR0FBRCxHQUFLLEtBQUwsR0FBVSxJQUFDLENBQUE7UUFDeEIsSUFBMEIsSUFBQyxDQUFBLEdBQUQsS0FBUSxJQUFDLENBQUEsS0FBbkM7WUFBQSxPQUFBLElBQVcsSUFBQSxHQUFLLElBQUMsQ0FBQSxJQUFqQjs7UUFDQSxJQUEyQixJQUFDLENBQUEsSUFBRCxLQUFTLElBQUMsQ0FBQSxPQUFyQztZQUFBLE9BQUEsSUFBVyxJQUFBLEdBQUssSUFBQyxDQUFBLEtBQWpCOztRQUNBLE9BQVcsQ0FBSSxHQUFELEdBQUssSUFBTCxHQUFTLElBQUMsQ0FBQSxNQUFiLEVBQTBCLEdBQUQsR0FBSyxJQUFMLEdBQVMsSUFBQyxDQUFBLE1BQW5DLENBQVgsRUFBQyxZQUFELEVBQUs7UUFHTCxRQUFBLEdBQWMsb0JBQUgsR0FDSixJQUFDLENBQUEsT0FBRCxHQUFXLENBQWQsR0FBd0IsRUFBRCxHQUFJLEdBQUosR0FBTyxJQUFDLENBQUEsS0FBL0IsR0FBK0MsRUFBRCxHQUFJLEdBQUosR0FBTyxJQUFDLENBQUEsS0FEL0MsR0FFSCxLQUFILEdBQ0QsQ0FBQSxDQUFBLE9BQWEsQ0FBQyxJQUFDLENBQUEsT0FBRixFQUFXLElBQUMsQ0FBQSxLQUFaLENBQWIsRUFBQyxjQUFELEVBQU8sWUFBUCxFQUFBLElBQUEsQ0FBQSxFQUNHLElBQUEsSUFBUSxFQUFYLEdBQXNCLEVBQUQsR0FBSSxHQUFKLEdBQU8sRUFBNUIsR0FBeUMsRUFBRCxHQUFJLEdBQUosR0FBTyxFQUQvQyxDQURDLEdBSUQsQ0FBQSxJQUFBLEdBQVUsSUFBQyxDQUFBLE9BQUosR0FBb0IsSUFBQyxDQUFBLE9BQUYsR0FBVSxNQUE3QixHQUEyQyxJQUFDLENBQUEsT0FBRixHQUFVLE1BQVYsR0FBZ0IsSUFBQyxDQUFBLEtBQWxFLEVBQ0csSUFBRCxHQUFNLEtBQU4sR0FBVyxFQUFYLEdBQWMsR0FBZCxHQUFpQixJQUFDLENBQUEsS0FBbEIsR0FBd0IsS0FBeEIsR0FBNkIsRUFBN0IsR0FBZ0MsR0FBaEMsR0FBbUMsSUFBQyxDQUFBLEtBRHRDO1FBSUosUUFBQSxHQUFjLElBQUMsQ0FBQSxPQUFKLEdBQ0osR0FBRCxHQUFLLE1BQUwsR0FBVyxJQUFDLENBQUEsT0FEUCxHQUVILEtBQUgsR0FDRSxVQUFILEdBQ08sSUFBQSxJQUFRLEVBQVgsR0FBbUIsSUFBQSxHQUFLLEdBQXhCLEdBQW1DLElBQUEsR0FBSyxHQUQ1QyxHQUdPLElBQUEsSUFBUSxFQUFYLEdBQXNCLEdBQUQsR0FBSyxJQUExQixHQUFzQyxHQUFELEdBQUssSUFKN0MsR0FNRSxVQUFILEdBQ08sSUFBRCxHQUFNLE9BQU4sR0FBYSxHQUFiLEdBQWlCLE9BQWpCLEdBQXdCLEdBRDlCLEdBR08sSUFBRCxHQUFNLEtBQU4sR0FBVyxHQUFYLEdBQWUsT0FBZixHQUFzQixHQUF0QixHQUEwQjtRQUVwQyxJQUF3QyxVQUF4QztZQUFBLE9BQUEsR0FBYyxPQUFELEdBQVMsS0FBVCxHQUFjLFFBQTNCOztRQUNBLElBQXlDLFVBQXpDO1lBQUEsUUFBQSxHQUFjLE9BQUQsR0FBUyxLQUFULEdBQWMsU0FBM0I7O2VBR0EsQ0FBQyxJQUFDLENBQUEsUUFBRCxDQUFhLE9BQUQsR0FBUyxJQUFULEdBQWEsUUFBYixHQUFzQixJQUF0QixHQUEwQixRQUF0QyxDQUFEO0lBMUNTOztvQkE4Q2IsWUFBQSxHQUFjLFNBQUMsQ0FBRDtBQUNWLFlBQUE7UUFBQSxLQUFBLEdBQVEsc0JBQUEsSUFBYztRQUN0QixJQUFHLEtBQUEsSUFBVSxJQUFJLENBQUMsR0FBTCxDQUFTLElBQUMsQ0FBQSxPQUFELEdBQVcsSUFBQyxDQUFBLEtBQXJCLENBQUEsSUFBK0IsRUFBNUM7WUFDSSxLQUFBLEdBQVE7Ozs7O1lBQ1IsSUFBZSxJQUFDLENBQUEsU0FBaEI7Z0JBQUEsS0FBSyxDQUFDLEdBQU4sQ0FBQSxFQUFBOztBQUNBLG1CQUFPLENBQUMsSUFBQyxDQUFBLFFBQUQsQ0FBVSxHQUFBLEdBQUcsQ0FBRSxLQUFLLENBQUMsSUFBTixDQUFXLElBQVgsQ0FBRixDQUFILEdBQXVCLEdBQWpDLENBQUQsRUFIWDs7UUFJQSxHQUFBLEdBQVMsSUFBQyxDQUFBLEdBQUQsR0FBTztRQUNoQixDQUFBLEdBQVMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxZQUFSLENBQXFCLEdBQXJCLEVBQTBCO1lBQUEsTUFBQSxFQUFRLElBQVI7U0FBMUI7UUFDVCxNQUFBLEdBQVMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxZQUFSLENBQXFCLFNBQXJCO1FBQ1QsR0FBQSxHQUFTLElBQUEsR0FBSyxHQUFMLEdBQVcsTUFBWCxHQUFrQjtRQUMzQixJQUFHLEtBQUg7WUFDSSxDQUFDLENBQUMsS0FBRixHQUFVO1lBQ1YsSUFBQSxHQUFPLGVBQUEsQ0FBZ0IsSUFBQyxDQUFBLFdBQUQsQ0FBYSxDQUFiLENBQWhCLEVBRlg7U0FBQSxNQUFBO1lBSUksSUFBQSxHQUFPLENBQUcsQ0FBRCxHQUFHLEtBQUgsR0FBUSxJQUFDLENBQUEsS0FBWCxDQUFBLEdBQXFCLENBQUcsSUFBQyxDQUFBLEdBQUQsS0FBUSxJQUFDLENBQUEsS0FBWixHQUF1QixJQUFBLEdBQUssSUFBQyxDQUFBLEdBQTdCLEdBQXdDLEVBQXhDO1lBQzVCLElBQUEsR0FBVSxJQUFDLENBQUEsT0FBRixHQUFVLE1BQVYsR0FBZ0IsSUFBQyxDQUFBO1lBQzFCLElBQUEsR0FBTyxNQUFBLEdBQU8sSUFBUCxHQUFZLElBQVosR0FBZ0IsSUFBaEIsR0FBcUIsS0FBckIsR0FBMEIsQ0FBMUIsR0FBNEIsSUFBNUIsR0FBZ0MsSUFBQyxDQUFBLE1BQWpDLEdBQXdDLEdBQXhDLEdBQTJDLElBQUMsQ0FBQSxLQUE1QyxHQUFrRCxLQUFsRCxHQUF1RCxDQUF2RCxHQUF5RCxJQUF6RCxHQUE2RCxJQUFDLENBQUEsTUFBOUQsR0FBcUUsR0FBckUsR0FBd0UsSUFBQyxDQUFBLEtBQXpFLEdBQStFLElBQS9FLEdBQW1GLElBQW5GLEdBQXdGLEtBQXhGLEdBQTZGLENBQTdGLEdBQStGLE9BQS9GLEdBQXNHLENBQXRHLEdBQXdHLEtBTm5IOztRQU9BLElBQUEsR0FBVyxJQUFBLEdBQUssTUFBTCxHQUFZLFFBQVosR0FBb0IsQ0FBcEIsR0FBc0IsUUFBdEIsR0FBOEIsR0FBOUIsR0FBa0MsU0FBbEMsR0FBMkMsTUFBM0MsR0FBa0QsS0FBbEQsR0FBdUQsQ0FBQyxDQUFDO1FBQ3BFLE9BQUEsR0FBVSxTQUFDLElBQUQ7a0NBQVUsSUFBSSxDQUFFLFFBQU4sQ0FBZSxrQkFBZjtRQUFWO1FBQ1YsSUFBMkIsT0FBQSxDQUFRLElBQUMsQ0FBQSxJQUFULENBQUEsSUFBa0IsT0FBQSxDQUFRLElBQUMsQ0FBQSxFQUFULENBQTdDO1lBQUEsSUFBQSxHQUFVLGNBQVY7O2VBQ0EsQ0FBQyxJQUFDLENBQUEsUUFBRCxDQUFVLGVBQUEsR0FBZ0IsR0FBaEIsR0FBb0IsSUFBcEIsR0FBd0IsR0FBeEIsR0FBNEIsT0FBNUIsR0FBbUMsSUFBbkMsR0FBd0MsR0FBeEMsR0FBMkMsSUFBM0MsR0FBZ0QsZUFBaEQsR0FBOEQsZ0JBQUMsT0FBTyxFQUFSLENBQTlELEdBQXlFLEdBQW5GLENBQUQ7SUFwQlU7Ozs7R0F0RWtCOztBQXNHcEMsT0FBTyxDQUFDLEtBQVIsR0FBc0I7OztvQkFFbEIsUUFBQSxHQUFVLENBQUMsT0FBRDs7SUFFRyxlQUFDLE1BQUQ7UUFBQyxJQUFDLENBQUEsUUFBRDtRQUNWLHFDQUFBO0lBRFM7O29CQU1iLFdBQUEsR0FBYSxTQUFDLENBQUQ7QUFDVCxZQUFBO1FBQUEsT0FBYSxJQUFDLENBQUEsS0FBZCxFQUFDLFlBQUQsRUFBSztRQUNMLFlBQUEsR0FBZSxJQUFBLElBQVMsSUFBSSxDQUFDLGtCQUFMLENBQXdCLENBQXhCLEVBQTJCLFdBQTNCLENBQVQsSUFBb0QsQ0FBQyxJQUFDLENBQUEsUUFBRCxDQUFVLEdBQVYsQ0FBRDtRQUVuRSxJQUFHLEVBQUg7WUFDSSxRQUFBLEdBQW1CLEVBQUUsQ0FBQyxrQkFBSCxDQUFzQixDQUF0QixFQUF5QixXQUF6QjtZQUNuQixZQUFBLEdBQWUsZUFBQSxDQUFnQixRQUFoQjtZQUNmLElBQUcsQ0FBSSxDQUFDLENBQUksSUFBQyxDQUFBLEtBQUssQ0FBQyxTQUFYLElBQXlCLENBQUMsWUFBRCxLQUFpQixDQUFDLENBQTVDLENBQVA7Z0JBQ0ksS0FBQSxHQUFRLElBQUEsR0FBTyxDQUFHLElBQUMsQ0FBQSxLQUFLLENBQUMsU0FBVixHQUNYLFlBRFcsR0FFUCxFQUFFLENBQUMsUUFBSCxDQUFBLENBQUgsR0FDRCxFQUFBLEdBQUUsQ0FBQyxDQUFDLFlBQUQsR0FBZ0IsQ0FBakIsQ0FERCxHQUdELENBQUEsUUFBQSxHQUFXLEVBQUUsQ0FBQyxrQkFBSCxDQUFzQixDQUF0QixFQUF5QixZQUF6QixDQUFYLEVBQ0EsR0FBQSxHQUFHLENBQUMsZUFBQSxDQUFnQixRQUFoQixDQUFELENBQUgsR0FBNkIsYUFEN0IsQ0FMVyxFQURuQjthQUhKOztlQVdBLENBQUMsSUFBQyxDQUFBLFFBQUQsQ0FBVSxTQUFBLEdBQVMsQ0FBRSxlQUFBLENBQWdCLFlBQWhCLENBQUYsQ0FBVCxHQUEwQyxDQUFFLEtBQUEsSUFBUyxFQUFYLENBQTFDLEdBQXlELEdBQW5FLENBQUQ7SUFmUzs7OztHQVZtQjs7QUFpQ3BDLE9BQU8sQ0FBQyxHQUFSLEdBQW9COzs7SUFFSCxhQUFDLEtBQUQsRUFBUSxTQUFSO1FBQVEsSUFBQyxDQUFBLGdDQUFELFlBQWE7UUFDOUIsSUFBQyxDQUFBLE9BQUQsR0FBVyxJQUFDLENBQUEsVUFBRCxHQUFjLEtBQUEsSUFBUztJQUR6Qjs7a0JBR2IsUUFBQSxHQUFVLENBQUMsWUFBRDs7a0JBRVYsV0FBQSxHQUFhLFNBQUMsQ0FBRDtBQUNULFlBQUE7UUFBQSxLQUFBLEdBQVEsSUFBQyxDQUFBO1FBQ1QsSUFBRyxJQUFDLENBQUEsU0FBSjtBQUNJLGlCQUFBLHlDQUFBOztvQkFBdUIsSUFBQSxZQUFnQjtvQkFDbkMsSUFBSSxDQUFDLEtBQUwsQ0FBVyxxREFBWDs7QUFESixhQURKOztBQUdBLGFBQUEsdUVBQUE7O2dCQUEyQyxDQUFDLElBQUksQ0FBQyxRQUFMLElBQWlCLElBQWxCLENBQXVCLENBQUMsSUFBeEIsWUFBd0M7QUFBbkY7O0FBQUE7UUFDQSxVQUFBLEdBQWMsWUFBQSxHQUFlLEtBQUssQ0FBQztRQUNuQyxHQUFBLEdBQWMsQ0FBQyxDQUFDLE1BQUYsSUFBWTtRQUMxQixVQUFBLEdBQWMsSUFBQyxDQUFBLGNBQUQsQ0FBZ0IsSUFBQyxDQUFBLFVBQWpCO1FBQ2QsTUFBQSxHQUFTO1FBQ1QsSUFBRyxVQUFIO1lBQ0ksSUFBQSxHQUFPLENBQUMsQ0FBQyxLQUFLLENBQUMsWUFBUixDQUFxQixLQUFyQjtZQUNQLE1BQU0sQ0FBQyxJQUFQLENBQVksSUFBQyxDQUFBLFFBQUQsQ0FBVSxLQUFBLEdBQU0sR0FBTixHQUFZLElBQVosR0FBaUIsS0FBM0IsQ0FBWixFQUZKOztRQUdBLE1BQU0sQ0FBQyxJQUFQLENBQVksSUFBQyxDQUFBLFFBQUQsQ0FBVSxHQUFBLEdBQUcsQ0FBSSxLQUFLLENBQUMsTUFBTixLQUFnQixDQUFoQixJQUFxQixZQUFBLEtBQWdCLENBQXhDLEdBQStDLEdBQS9DLEdBQXdELElBQXpELENBQWIsQ0FBWjtBQUNBLGFBQUEsaURBQUE7O1lBQ0ksSUFBRyxDQUFBLEtBQUssWUFBUjtnQkFDSSxJQUF5QyxDQUFBLEtBQUssQ0FBOUM7b0JBQUEsTUFBTSxDQUFDLElBQVAsQ0FBWSxJQUFDLENBQUEsUUFBRCxDQUFVLElBQUEsR0FBSyxHQUFMLEdBQVMsR0FBbkIsQ0FBWixFQUFBOztnQkFDQSxNQUFNLENBQUMsSUFBUCxDQUFZLElBQUMsQ0FBQSxRQUFELENBQVUsS0FBVixDQUFaLEVBRko7O1lBR0EsSUFBQSxHQUFVLENBQUEsS0FBSyxLQUFLLENBQUMsTUFBTixHQUFlLENBQXBCLElBQXlCLENBQUEsS0FBSyxZQUFBLEdBQWUsQ0FBaEQsR0FDSCxFQURHLEdBRUMsSUFBQSxLQUFRLFVBQVIsSUFBc0IsSUFBQSxZQUFnQixPQUF6QyxHQUNELElBREMsR0FHRDtZQUNKLE1BQUEsR0FBWSxJQUFBLFlBQWdCLE9BQW5CLEdBQWdDLEVBQWhDLEdBQXdDO1lBQ2pELElBQWlCLFVBQUEsSUFBZSxDQUFBLEdBQUksWUFBcEM7Z0JBQUEsTUFBQSxJQUFVLElBQVY7O1lBQ0EsSUFBRyxJQUFBLFlBQWdCLE1BQW5CO2dCQUNJLElBQUcsSUFBSSxDQUFDLE9BQUwsS0FBZ0IsUUFBbkI7b0JBQ0ksSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFuQixDQUF5QixhQUFBLEdBQWMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUExRCxFQURKOztnQkFFQSxJQUFHLElBQUksQ0FBQyxRQUFMLFlBQXlCLEtBQXpCLElBQW1DLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBZCxDQUFBLENBQXRDO29CQUNJLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBZCxDQUFvQixvQkFBcEIsRUFESjtpQkFISjs7WUFLQSxJQUFHLElBQUEsWUFBZ0IsS0FBaEIsSUFBMEIsSUFBSSxFQUFDLElBQUQsRUFBakM7Z0JBQ0ksSUFBQSxHQUFPLElBQUksTUFBSixDQUFXLElBQUksQ0FBQyxVQUFXLENBQUEsQ0FBQSxDQUFFLENBQUMsSUFBOUIsRUFBb0MsSUFBcEMsRUFBMEMsUUFBMUMsRUFEWDs7WUFFQSxJQUFHLENBQUEsQ0FBQSxJQUFBLFlBQW9CLE9BQXBCLENBQUg7Z0JBQ0ksSUFBRyxDQUFBLEdBQUksWUFBUDtvQkFDSSxJQUFHLENBQUEsQ0FBQSxJQUFBLFlBQW9CLE1BQXBCLENBQUg7d0JBQ0ksSUFBQSxHQUFPLElBQUksTUFBSixDQUFXLElBQVgsRUFBaUIsSUFBakIsRUFBdUIsUUFBdkIsRUFEWDtxQkFESjtpQkFBQSxNQUFBO29CQUlJLElBQUcsSUFBQSxZQUFnQixNQUFuQjt3QkFDSSxHQUFBLEdBQU0sSUFBSSxDQUFDO3dCQUNYLEtBQUEsR0FBUSxJQUFJLENBQUMsTUFGakI7cUJBQUEsTUFBQTt3QkFJSSxPQUFlLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBVixDQUFnQixDQUFoQixDQUFmLEVBQUMsYUFBRCxFQUFNO3dCQUNOLElBQW9DLEdBQUEsWUFBZSxpQkFBbkQ7NEJBQUEsR0FBQSxHQUFNLElBQUksWUFBSixDQUFpQixHQUFHLENBQUMsS0FBckIsRUFBTjt5QkFMSjs7b0JBTUEsSUFBQSxHQUFPLElBQUksTUFBSixDQUFZLElBQUksS0FBSixDQUFXLElBQUksaUJBQUosQ0FBc0IsSUFBdEIsQ0FBWCxFQUF3QyxDQUFDLElBQUksTUFBSixDQUFXLEdBQVgsQ0FBRCxDQUF4QyxDQUFaLEVBQXVFLEtBQXZFLEVBVlg7aUJBREo7O1lBWUEsSUFBRyxNQUFIO2dCQUFlLE1BQU0sQ0FBQyxJQUFQLENBQVksSUFBQyxDQUFBLFFBQUQsQ0FBVSxNQUFWLENBQVosRUFBZjs7WUFDQSxNQUFNLENBQUMsSUFBUCxlQUFZLElBQUksQ0FBQyxrQkFBTCxDQUF3QixDQUF4QixFQUEyQixTQUEzQixDQUFaO1lBQ0EsSUFBRyxJQUFIO2dCQUFhLE1BQU0sQ0FBQyxJQUFQLENBQVksSUFBQyxDQUFBLFFBQUQsQ0FBVSxJQUFWLENBQVosRUFBYjs7QUFqQ0o7UUFrQ0EsSUFBRyxVQUFIO1lBQ0ksTUFBTSxDQUFDLElBQVAsQ0FBWSxJQUFDLENBQUEsUUFBRCxDQUFVLEtBQUEsR0FBTSxHQUFOLEdBQVksSUFBWixHQUFpQixJQUFqQixHQUFxQixJQUFDLENBQUEsR0FBdEIsR0FBMEIsR0FBcEMsQ0FBWixFQURKO1NBQUEsTUFBQTtZQUdJLElBQTBDLEtBQUssQ0FBQyxNQUFOLEtBQWdCLENBQTFEO2dCQUFBLE1BQU0sQ0FBQyxJQUFQLENBQVksSUFBQyxDQUFBLFFBQUQsQ0FBVSxJQUFBLEdBQUssSUFBQyxDQUFBLEdBQU4sR0FBVSxHQUFwQixDQUFaLEVBQUE7YUFISjs7UUFJQSxJQUFHLElBQUMsQ0FBQSxLQUFELElBQVcsQ0FBSSxVQUFsQjttQkFBa0MsSUFBQyxDQUFBLFlBQUQsQ0FBYyxNQUFkLEVBQWxDO1NBQUEsTUFBQTttQkFBNEQsT0FBNUQ7O0lBcERTOztrQkFzRGIsT0FBQSxHQUFTLFNBQUMsSUFBRDtBQUNMLFlBQUE7QUFBQTtBQUFBLGFBQUEsd0NBQUE7O2dCQUE2QixJQUFJLENBQUMsT0FBTCxDQUFhLElBQWI7QUFBdUIsdUJBQU87O0FBQTNEO2VBQ0E7SUFGSzs7OztHQTdEbUI7O0FBdUVoQyxPQUFPLENBQUMsR0FBUixHQUFvQjs7O0lBRUgsYUFBQyxJQUFEO1FBQ1QsSUFBQyxDQUFBLE9BQUQsR0FBVyxJQUFBLElBQVE7SUFEVjs7a0JBR2IsUUFBQSxHQUFVLENBQUMsU0FBRDs7a0JBRVYsV0FBQSxHQUFhLFNBQUMsQ0FBRDtBQUNULFlBQUE7UUFBQSxJQUFBLENBQStCLElBQUMsQ0FBQSxPQUFPLENBQUMsTUFBeEM7QUFBQSxtQkFBTyxDQUFDLElBQUMsQ0FBQSxRQUFELENBQVUsSUFBVixDQUFELEVBQVA7O1FBQ0EsQ0FBQyxDQUFDLE1BQUYsSUFBWTtRQUNaLE1BQUEsR0FBUyxLQUFLLENBQUMsb0JBQU4sQ0FBMkIsQ0FBM0IsRUFBOEIsSUFBQyxDQUFBLE9BQS9CO1FBQ1QsSUFBaUIsTUFBTSxDQUFDLE1BQXhCO0FBQUEsbUJBQU8sT0FBUDs7UUFFQSxNQUFBLEdBQVM7UUFDVCxZQUFBOztBQUFnQjtBQUFBO2lCQUFBLHdDQUFBOzs2QkFBQSxHQUFHLENBQUMsa0JBQUosQ0FBdUIsQ0FBdkIsRUFBMEIsVUFBMUI7QUFBQTs7O0FBQ2hCLGFBQUEsZ0VBQUE7O1lBQ0ksSUFBRyxLQUFIO2dCQUNJLE1BQU0sQ0FBQyxJQUFQLENBQVksSUFBQyxDQUFBLFFBQUQsQ0FBVSxJQUFWLENBQVosRUFESjs7WUFFQSxNQUFNLENBQUMsSUFBUCxlQUFZLFNBQVo7QUFISjtRQUlBLElBQUcsZUFBQSxDQUFnQixNQUFoQixDQUF1QixDQUFDLE9BQXhCLENBQWdDLElBQWhDLENBQUEsSUFBeUMsQ0FBNUM7WUFDSSxNQUFNLENBQUMsT0FBUCxDQUFlLElBQUMsQ0FBQSxRQUFELENBQVUsS0FBQSxHQUFNLENBQUMsQ0FBQyxNQUFsQixDQUFmO1lBQ0EsTUFBTSxDQUFDLElBQVAsQ0FBWSxJQUFDLENBQUEsUUFBRCxDQUFVLElBQUEsR0FBSyxJQUFDLENBQUEsR0FBTixHQUFVLEdBQXBCLENBQVosRUFGSjtTQUFBLE1BQUE7WUFJSSxNQUFNLENBQUMsT0FBUCxDQUFlLElBQUMsQ0FBQSxRQUFELENBQVUsR0FBVixDQUFmO1lBQ0EsTUFBTSxDQUFDLElBQVAsQ0FBWSxJQUFDLENBQUEsUUFBRCxDQUFVLEdBQVYsQ0FBWixFQUxKOztlQU1BO0lBbEJTOztrQkFvQmIsT0FBQSxHQUFTLFNBQUMsSUFBRDtBQUNMLFlBQUE7QUFBQTtBQUFBLGFBQUEsd0NBQUE7O2dCQUF5QixHQUFHLENBQUMsT0FBSixDQUFZLElBQVo7QUFBc0IsdUJBQU87O0FBQXREO2VBQ0E7SUFGSzs7OztHQTNCbUI7O0FBdUNoQyxPQUFPLENBQUMsS0FBUixHQUFzQjs7O0lBRUwsZUFBQyxTQUFELEVBQVksT0FBWixFQUFxQixLQUFyQjtRQUFDLElBQUMsQ0FBQSxXQUFEO1FBQVcsSUFBQyxDQUFBLFNBQUQ7UUFBUyxJQUFDLENBQUEsdUJBQUQsUUFBUSxJQUFJO1FBQzFDLElBQUMsQ0FBQSxVQUFELEdBQWM7UUFDZCxJQUFDLENBQUEsSUFBSSxDQUFDLFNBQU4sR0FBa0I7SUFGVDs7b0JBSWIsUUFBQSxHQUFVLENBQUMsVUFBRCxFQUFhLFFBQWIsRUFBdUIsTUFBdkI7O29CQUVWLHdCQUFBLEdBQTBCOztvQkFJMUIsYUFBQSxHQUFlLFNBQUE7QUFFWCxZQUFBO1FBQUEsSUFBQSxDQUF3QyxJQUFDLENBQUEsUUFBekM7QUFBQSxtQkFBTyxJQUFDLENBQUEseUJBQVI7O1FBQ0EsT0FBYyxJQUFDLENBQUEsUUFBUSxDQUFDLFVBQXhCLEVBQU07UUFDTixJQUFBLEdBQVUsSUFBSCxHQUNILElBQUEsWUFBZ0IsTUFBaEIsSUFBMkIsSUFBSSxDQUFDLElBRDdCLEdBR0gsSUFBQyxDQUFBLFFBQVEsQ0FBQztRQUNkLElBQUEsQ0FBQSxDQUFPLElBQUEsWUFBZ0IsaUJBQWhCLElBQXFDLElBQUEsWUFBZ0IsWUFBNUQsQ0FBQTtBQUNJLG1CQUFPLElBQUMsQ0FBQSx5QkFEWjs7UUFFQSxJQUFBLEdBQU8sSUFBSSxDQUFDO1FBQ1osSUFBQSxDQUFPLElBQVA7WUFDSSxPQUFBLEdBQVUsY0FBQSxDQUFlLElBQWY7WUFDVixJQUEyQixPQUEzQjtnQkFBQSxJQUFDLENBQUEsUUFBUSxDQUFDLEtBQVYsQ0FBZ0IsT0FBaEIsRUFBQTthQUZKOztRQUdBLElBQUcsYUFBUSxZQUFSLEVBQUEsSUFBQSxNQUFIO21CQUE2QixHQUFBLEdBQUksS0FBakM7U0FBQSxNQUFBO21CQUE2QyxLQUE3Qzs7SUFkVzs7b0JBa0JmLFVBQUEsR0FBWSxTQUFDLElBQUQ7ZUFFUixJQUFDLENBQUEsSUFBSSxDQUFDLGdCQUFOLENBQXVCLEtBQXZCLEVBQThCLFNBQUMsSUFBRDtZQUMxQixJQUFnQixJQUFJLENBQUMsU0FBckI7QUFBQSx1QkFBTyxNQUFQOztZQUNBLElBQUcsSUFBQSxZQUFnQixXQUFuQjt1QkFDSSxJQUFJLENBQUMsS0FBTCxHQUFrQixLQUR0QjthQUFBLE1BRUssSUFBRyxJQUFBLFlBQWdCLElBQW5CO2dCQUNELElBQTBCLElBQUksQ0FBQyxLQUEvQjsyQkFBQSxJQUFJLENBQUMsT0FBTCxHQUFrQixLQUFsQjtpQkFEQzs7UUFKcUIsQ0FBOUI7SUFGUTs7b0JBV1osaUJBQUEsR0FBbUIsU0FBQyxDQUFEO0FBRWYsWUFBQTtBQUFBO0FBQUEsYUFBQSx3Q0FBQTs7WUFDSSxHQUFBLEdBQU0sQ0FBQyxJQUFJLEtBQUosQ0FBVyxJQUFJLFdBQWYsRUFBNkIsQ0FBQyxJQUFJLE1BQUosQ0FBVyxJQUFYLENBQUQsQ0FBN0IsQ0FBRCxDQUFnRCxDQUFDLE9BQWpELENBQXlELENBQXpEO1lBQ04sSUFBQyxDQUFBLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBWCxDQUFtQixJQUFJLE9BQUosQ0FBZSxHQUFELEdBQUssS0FBTCxHQUFTLENBQUMsT0FBQSxDQUFRLE1BQVIsRUFBZ0IsQ0FBaEIsQ0FBRCxDQUFULEdBQTRCLEdBQTVCLEdBQStCLEdBQS9CLEdBQW1DLFNBQWpELENBQW5CO0FBRko7SUFGZTs7b0JBU25CLGFBQUEsR0FBZSxTQUFDLElBQUQsRUFBTyxJQUFQLEVBQWEsQ0FBYjtBQUVYLFlBQUE7UUFBQSxLQUFBLEdBQVEsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFXO1FBQzdCLEtBQUE7O0FBQVE7bUJBQU0sTUFBQSxHQUFTLEtBQUssQ0FBQyxLQUFOLENBQUEsQ0FBZjtnQkFDSixJQUFHLE1BQUEsWUFBa0IsTUFBckI7b0JBQ0ksSUFBQSxHQUFPLE1BQU0sQ0FBQyxRQUFRLENBQUM7b0JBQ3ZCLE9BQU8sTUFBTSxDQUFDO29CQUNkLElBQUEsR0FBTyxNQUFNLENBQUM7b0JBQ2QsSUFBRyxJQUFJLENBQUMsS0FBTCxLQUFjLGFBQWpCO3dCQUNJLElBQUcsSUFBQyxDQUFBLElBQUo7NEJBQ0ksTUFBTSxDQUFDLEtBQVAsQ0FBYSxvREFBYixFQURKOzt3QkFFQSxJQUFHLElBQUksQ0FBQyxLQUFSOzRCQUNJLE1BQU0sQ0FBQyxLQUFQLENBQWEsaURBQWIsRUFESjs7d0JBRUEsSUFBRyxJQUFBLFlBQWdCLElBQW5COzRCQUNJLE1BQUEsR0FBUyxJQUFDLENBQUEsSUFBRCxHQUFRLEtBRHJCO3lCQUFBLE1BQUE7NEJBR0ksSUFBQyxDQUFBLFlBQUQsR0FBZ0IsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxZQUFiLENBQTBCLE1BQTFCOzRCQUNoQixNQUFBLEdBQVMsSUFBSSxNQUFKLENBQVcsSUFBSSxpQkFBSixDQUFzQixJQUFDLENBQUEsWUFBdkIsQ0FBWCxFQUFpRCxJQUFqRCxFQUpiO3lCQUxKO3FCQUFBLE1BQUE7d0JBV0ksSUFBRyxNQUFNLENBQUMsUUFBUSxFQUFDLElBQUQsRUFBbEI7NEJBQ0ksSUFBSSxFQUFDLE1BQUQsRUFBSixHQUFjLEtBRGxCO3lCQUFBLE1BQUE7NEJBR0ksR0FBQSxHQUFTLElBQUksQ0FBQyxTQUFMLENBQUEsQ0FBSCxHQUF5QixJQUFJLEtBQUosQ0FBVSxJQUFWLENBQXpCLEdBQTZDLElBQUksTUFBSixDQUFXLElBQVg7NEJBQ25ELE1BQU0sQ0FBQyxRQUFQLEdBQWtCLElBQUksS0FBSixDQUFVLElBQUksaUJBQUosQ0FBc0IsSUFBdEIsQ0FBVixFQUF1QyxDQUFFLElBQUksTUFBSixDQUFXLElBQUksWUFBSixDQUFpQixXQUFqQixDQUFYLENBQUYsRUFBNEMsR0FBNUMsQ0FBdkM7NEJBQ2xCLElBQUcsSUFBQSxZQUFnQixJQUFoQixJQUF5QixJQUFJLENBQUMsS0FBakM7Z0NBQ0ksSUFBQyxDQUFBLFVBQVUsQ0FBQyxJQUFaLENBQWlCLElBQWpCO2dDQUNBLElBQUksQ0FBQyxLQUFMLEdBQWEsTUFGakI7NkJBTEo7eUJBWEo7cUJBSko7OzZCQXVCQTtZQXhCSSxDQUFBOzs7ZUEwQlIsT0FBQSxDQUFRLEtBQVI7SUE3Qlc7O29CQWlDZixRQUFBLEdBQVUsU0FBQyxJQUFELEVBQU8sQ0FBUDtlQUVOLElBQUMsQ0FBQSxnQkFBRCxDQUFrQixLQUFsQixFQUF5QixDQUFBLFNBQUEsS0FBQTttQkFBQSxTQUFDLEtBQUQ7QUFDckIsb0JBQUE7Z0JBQUEsSUFBQSxHQUFPO2dCQUNQLElBQWdCLEtBQUEsWUFBaUIsS0FBakM7QUFBQSwyQkFBTyxNQUFQOztnQkFDQSxJQUFHLEtBQUEsWUFBaUIsS0FBcEI7QUFDSTtBQUFBLHlCQUFBLGdEQUFBOzt3QkFDSSxJQUFHLElBQUEsWUFBZ0IsTUFBaEIsSUFBMkIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFkLENBQTBCLElBQTFCLENBQTlCOzRCQUNJLElBQUksQ0FBQyxLQUFLLEVBQUMsTUFBRCxFQUFWLEdBQW9CLEtBRHhCO3lCQUFBLE1BRUssSUFBRyxJQUFBLFlBQWdCLEtBQWhCLElBQTBCLElBQUksQ0FBQyxRQUFMLENBQWMsSUFBZCxDQUE3Qjs0QkFDRCxJQUFBLEdBQU87NEJBQ1AsSUFBSyxDQUFBLENBQUEsQ0FBTCxHQUFVLEtBQUMsQ0FBQSxhQUFELENBQWUsSUFBZixFQUFxQixJQUFyQixFQUEyQixDQUEzQixFQUZUOztBQUhUO29CQU1BLEtBQUssQ0FBQyxXQUFOLEdBQW9CLElBQUEsR0FBTyxPQUFBLENBQVEsSUFBUjtvQkFFM0IsSUFBRyxLQUFLLENBQUMsU0FBTixJQUFvQixDQUFDLENBQUMsT0FBUSxDQUFBLG1CQUFBLENBQWpDO3dCQUNJLEtBQUMsQ0FBQSwrQkFBRCxDQUFpQyxJQUFqQyxFQUF1QyxDQUF2QyxFQUEwQyxLQUExQyxFQURKO3FCQVRKOzt1QkFZQSxJQUFBLElBQVMsQ0FBQSxDQUFBLEtBQUEsWUFBcUIsS0FBckI7WUFmWTtRQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBekI7SUFGTTs7b0JBbUJWLCtCQUFBLEdBQWlDLFNBQUMsSUFBRCxFQUFPLENBQVAsRUFBVSxTQUFWO0FBRTdCLFlBQUE7QUFBQTtBQUFBLGFBQUEsd0NBQUE7O1lBQ0ksSUFBRyxJQUFBLFlBQWdCLElBQW5CO2dCQUNJLElBQVksd0NBQWtCLENBQUUsY0FBaEM7QUFBQSw2QkFBQTs7Z0JBQ0EsTUFBQSxHQUFTLElBQUksQ0FBQyxNQUFPLENBQUEsQ0FBQSxDQUFFLENBQUM7Z0JBQ3hCLElBQUcsQ0FBSSxNQUFNLENBQUMsU0FBZDtBQUE2QiwyQkFBN0I7O2dCQUNBLElBQUcsQ0FBSSxNQUFKLFlBQXNCLEdBQXpCO0FBQWtDLDJCQUFPLEdBQUEsQ0FBSSxnQ0FBSixFQUF6Qzs7Z0JBQ0EsSUFBRyxDQUFJLElBQUksQ0FBQyxJQUFULFlBQXlCLEtBQTVCO0FBQXVDLDJCQUFPLEdBQUEsQ0FBSSxnQ0FBSixFQUE5Qzs7QUFDQTtBQUFBLHFCQUFBLHdDQUFBOztvQkFDSSxJQUFHLFFBQUEsWUFBb0IsU0FBdkI7d0JBQ0ksUUFBUSxDQUFDLGVBQVQsR0FBMkIsT0FEL0I7O0FBREosaUJBTko7O0FBREo7SUFGNkI7O29CQWlCakMsc0JBQUEsR0FBd0IsU0FBQTtBQUVwQixZQUFBO1FBQUEsS0FBQSxHQUFRO1FBQ1AsY0FBZSxJQUFDLENBQUE7QUFDVCxlQUFNLENBQUMsSUFBQSxHQUFPLFdBQVksQ0FBQSxLQUFBLENBQXBCLENBQUEsSUFBZ0MsSUFBQSxZQUFnQixPQUFoRCxJQUNWLElBQUEsWUFBZ0IsS0FBaEIsSUFBMEIsSUFBSSxDQUFDLFFBQUwsQ0FBQSxDQUR0QjtZQUFSLEVBQUU7UUFBTTtlQUVSLElBQUMsQ0FBQSxVQUFELEdBQWMsV0FBVyxDQUFDLE1BQVosQ0FBbUIsQ0FBbkIsRUFBc0IsS0FBdEI7SUFOTTs7b0JBVXhCLGlCQUFBLEdBQW1CLFNBQUMsSUFBRDtRQUVmLElBQUcsQ0FBSSxJQUFDLENBQUEsSUFBUjtZQUNJLElBQUMsQ0FBQSxJQUFELEdBQVEsSUFBSTtZQUNaLElBQUcsSUFBQyxDQUFBLFlBQUo7Z0JBQ0ksSUFBQyxDQUFBLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBWCxDQUFnQixJQUFJLE9BQUosQ0FBZSxJQUFDLENBQUEsWUFBRixHQUFlLHlCQUE3QixDQUFoQixFQURKO2FBQUEsTUFFSyxJQUFHLElBQUMsQ0FBQSxNQUFKO2dCQUNELElBQUMsQ0FBQSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQVgsQ0FBZ0IsSUFBSSxPQUFKLENBQWUsSUFBRCxHQUFNLCtDQUFwQixDQUFoQixFQURDOztZQUVMLElBQUMsQ0FBQSxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVgsQ0FBQTtZQUNBLElBQUMsQ0FBQSxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQWxCLENBQTBCLElBQUMsQ0FBQSxJQUEzQixFQVBKOztRQVFBLElBQUMsQ0FBQSxJQUFJLENBQUMsSUFBTixHQUFhLElBQUMsQ0FBQSxJQUFJLENBQUMsSUFBTixHQUFhO1FBQzFCLElBQUMsQ0FBQSxJQUFJLENBQUMsS0FBTixHQUFjO2VBQ2QsSUFBQyxDQUFBLElBQUksQ0FBQyxRQUFOLEdBQWlCO0lBWkY7O29CQWtCbkIsV0FBQSxHQUFhLFNBQUMsQ0FBRDtBQUVULFlBQUE7UUFBQSxJQUFHLFFBQUEsR0FBVyxJQUFDLENBQUEsSUFBSSxDQUFDLEtBQU4sQ0FBQSxDQUFkO1lBQ0ksUUFBUSxDQUFDLEtBQVQsQ0FBZSw2Q0FBZixFQURKOztRQUVBLElBQUcsYUFBQSxHQUFnQixJQUFDLENBQUEsSUFBSSxDQUFDLFFBQU4sQ0FBZSxrQkFBZixDQUFuQjtZQUNJLGFBQWEsQ0FBQyxLQUFkLENBQW9CLDRDQUFwQixFQURKOztRQUdBLElBQUEsR0FBUSxJQUFDLENBQUEsYUFBRCxDQUFBO1FBQ1IsS0FBQSxHQUFRLElBQUksaUJBQUosQ0FBc0IsSUFBdEI7UUFDUixJQUFBLEdBQVEsSUFBSSxJQUFKLENBQVMsRUFBVCxFQUFhLEtBQUssQ0FBQyxJQUFOLENBQVcsQ0FBQyxJQUFDLENBQUEsSUFBRixDQUFYLENBQWI7UUFDUixJQUFBLEdBQVE7UUFDUixDQUFDLENBQUMsVUFBRixHQUFlLElBQUksQ0FBQyxTQUFMLENBQWUsQ0FBQyxDQUFDLEtBQWpCO1FBRWYsSUFBQyxDQUFBLHNCQUFELENBQUE7UUFDQSxJQUFDLENBQUEsVUFBRCxDQUFZLElBQVo7UUFDQSxJQUFDLENBQUEsUUFBRCxDQUFVLElBQVYsRUFBZ0IsQ0FBaEI7UUFDQSxJQUFDLENBQUEsaUJBQUQsQ0FBbUIsSUFBbkI7UUFDQSxJQUFDLENBQUEsaUJBQUQsQ0FBbUIsQ0FBbkI7UUFDQSxJQUFDLENBQUEsSUFBSSxDQUFDLE1BQU4sR0FBZTtRQUNmLElBQUMsQ0FBQSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQWxCLENBQXVCLEtBQXZCO1FBRUEsSUFBRyxJQUFDLENBQUEsTUFBSjtZQUNJLFVBQUEsR0FBYSxJQUFJLGlCQUFKLENBQXNCLENBQUMsQ0FBQyxVQUFVLENBQUMsWUFBYixDQUEwQixZQUExQixFQUF3QztnQkFBQSxPQUFBLEVBQVMsS0FBVDthQUF4QyxDQUF0QjtZQUNiLElBQUMsQ0FBQSxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQWxCLENBQTBCLElBQUksT0FBSixDQUFZLEtBQVosRUFBbUIsVUFBbkIsQ0FBMUI7WUFDQSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQVosQ0FBaUIsSUFBSSxLQUFKLENBQVUsVUFBVixDQUFqQjtZQUNBLElBQUksQ0FBQyxJQUFMLENBQVUsSUFBQyxDQUFBLE1BQVgsRUFKSjs7UUFNQSxRQUFBLElBQUMsQ0FBQSxJQUFJLENBQUMsV0FBTixDQUFpQixDQUFDLE9BQWxCLGFBQTBCLElBQUMsQ0FBQSxVQUEzQjtRQUVBLEtBQUEsR0FBUSxJQUFJLE1BQUosQ0FBVyxJQUFJLElBQUosQ0FBUyxJQUFULEVBQWUsSUFBZixDQUFYO1FBQ1IsSUFBcUUsSUFBQyxDQUFBLFFBQXRFO1lBQUEsS0FBQSxHQUFRLElBQUksTUFBSixDQUFXLElBQUMsQ0FBQSxRQUFaLEVBQXNCLEtBQXRCLEVBQTZCLElBQTdCLEVBQW1DO2dCQUFHLG1CQUFELElBQUMsQ0FBQSxpQkFBSDthQUFuQyxFQUFSOztlQUNBLEtBQUssQ0FBQyxrQkFBTixDQUF5QixDQUF6QjtJQS9CUzs7OztHQW5KbUI7O0FBMExwQyxPQUFPLENBQUMsaUJBQVIsR0FBa0M7OztJQUVqQiwyQkFBQyxNQUFELEVBQVUsT0FBVjtRQUFDLElBQUMsQ0FBQSxTQUFEO1FBQVMsSUFBQyxDQUFBLFNBQUQ7UUFDbkIsSUFBQyxDQUFBLFdBQUQsQ0FBQTtJQURTOztnQ0FHYixRQUFBLEdBQVUsQ0FBQyxRQUFELEVBQVcsUUFBWDs7Z0NBRVYsV0FBQSxHQUFhOztnQ0FDYixLQUFBLEdBQWlCOztnQ0FDakIsVUFBQSxHQUFhOztnQ0FFYixXQUFBLEdBQWEsU0FBQTtRQUNULElBQUcscUJBQUEsSUFBYSxJQUFDLENBQUEsTUFBRCxZQUFtQix3QkFBbkM7bUJBQ0ksSUFBQyxDQUFBLE1BQU0sQ0FBQyxLQUFSLENBQWMsNkVBQWQsRUFESjs7SUFEUzs7Z0NBSWIsVUFBQSxHQUFZLFNBQUMsQ0FBRCxFQUFJLHFCQUFKO1FBQ1IsSUFBRyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQVQsS0FBbUIsQ0FBdEI7bUJBQ0ksSUFBQyxDQUFBLEtBQUQsQ0FBVSxxQkFBRCxHQUF1Qix3Q0FBaEMsRUFESjs7SUFEUTs7OztHQWY0Qzs7QUF5QjVELE9BQU8sQ0FBQyxpQkFBUixHQUFrQzs7Ozs7OztnQ0FFOUIsV0FBQSxHQUFhLFNBQUMsQ0FBRDtBQUNULFlBQUE7UUFBQSxJQUFDLENBQUEsVUFBRCxDQUFZLENBQVosRUFBZSxRQUFmO1FBQ0EsQ0FBQyxDQUFDLGVBQUYsR0FBb0I7UUFFcEIsSUFBQSxHQUFPO1FBQ1AsSUFBSSxDQUFDLElBQUwsQ0FBVSxJQUFDLENBQUEsUUFBRCxDQUFhLElBQUMsQ0FBQSxHQUFGLEdBQU0sU0FBbEIsQ0FBVjtRQUNBLElBQXVDLG1CQUF2QztZQUFBLElBQUksQ0FBQyxJQUFMLGFBQVUsSUFBQyxDQUFBLE1BQU0sQ0FBQyxXQUFSLENBQW9CLENBQXBCLENBQVYsRUFBQTs7UUFFQSxJQUFHLDREQUFIO1lBQ0ksSUFBb0MsSUFBQyxDQUFBLE1BQUQsS0FBVyxJQUEvQztnQkFBQSxJQUFJLENBQUMsSUFBTCxDQUFVLElBQUMsQ0FBQSxRQUFELENBQVUsUUFBVixDQUFWLEVBQUE7O1lBQ0EsSUFBSSxDQUFDLElBQUwsQ0FBVSxJQUFDLENBQUEsUUFBRCxDQUFVLElBQUMsQ0FBQSxNQUFNLENBQUMsS0FBbEIsQ0FBVixFQUZKOztRQUlBLElBQUksQ0FBQyxJQUFMLENBQVUsSUFBQyxDQUFBLFFBQUQsQ0FBVSxHQUFWLENBQVY7ZUFDQTtJQWJTOzs7O0dBRjJDOztBQWlCNUQsT0FBTyxDQUFDLFlBQVIsR0FBNkI7OztJQUVaLHNCQUFDLGNBQUQsRUFBa0IsWUFBbEI7UUFBQyxJQUFDLENBQUEsaUJBQUQ7UUFBaUIsSUFBQyxDQUFBLGVBQUQ7SUFBbEI7OzJCQUViLFFBQUEsR0FBVSxDQUFDLGdCQUFELEVBQW1CLGNBQW5COzsyQkFFVixXQUFBLEdBQWEsU0FBQyxDQUFEO0FBQ1QsWUFBQTtRQUFBLElBQUEsR0FBTztRQUVQLElBQUcsMkJBQUg7WUFDSSxJQUFJLENBQUMsSUFBTCxhQUFVLElBQUMsQ0FBQSxjQUFjLENBQUMsV0FBaEIsQ0FBNEIsQ0FBNUIsQ0FBVjtZQUNBLElBQTRCLHlCQUE1QjtnQkFBQSxJQUFJLENBQUMsSUFBTCxDQUFVLElBQUMsQ0FBQSxRQUFELENBQVUsSUFBVixDQUFWLEVBQUE7YUFGSjs7UUFJQSxJQUFHLHlCQUFIO1lBQ0ksSUFBSSxDQUFDLElBQUwsYUFBVSxJQUFDLENBQUEsWUFBWSxDQUFDLFdBQWQsQ0FBMEIsQ0FBMUIsQ0FBVixFQURKOztlQUdBO0lBVlM7Ozs7R0FOaUM7O0FBd0JsRCxPQUFPLENBQUMsaUJBQVIsR0FBa0M7Ozs7Ozs7Z0NBRTlCLFdBQUEsR0FBYSxTQUFDLENBQUQ7QUFDVCxZQUFBO1FBQUEsSUFBQyxDQUFBLFVBQUQsQ0FBWSxDQUFaLEVBQWUsUUFBZjtRQUVBLElBQUEsR0FBTztRQUNQLElBQUksQ0FBQyxJQUFMLENBQVUsSUFBQyxDQUFBLFFBQUQsQ0FBYSxJQUFDLENBQUEsR0FBRixHQUFNLFNBQWxCLENBQVY7UUFDQSxJQUFrQyxJQUFBLFlBQWEsd0JBQS9DO1lBQUEsSUFBSSxDQUFDLElBQUwsQ0FBVSxJQUFDLENBQUEsUUFBRCxDQUFVLFVBQVYsQ0FBVixFQUFBOztRQUVBLElBQUcsQ0FBQSxDQUFBLElBQUEsWUFBaUIsd0JBQWpCLENBQUEsSUFDRSxDQUFDLElBQUMsQ0FBQSxNQUFELFlBQW1CLE1BQW5CLElBQTZCLElBQUMsQ0FBQSxNQUFELFlBQW1CLEtBQWpELENBREw7WUFHSSxJQUFHLElBQUMsQ0FBQSxNQUFELFlBQW1CLEtBQW5CLElBQTZCLENBQUksSUFBQyxDQUFBLE1BQU0sQ0FBQyxRQUE1QztnQkFDSSxJQUFDLENBQUEsTUFBTSxDQUFDLEtBQVIsQ0FBYyxzQ0FBZCxFQURKOztZQUlBLElBQUksQ0FBQyxJQUFMLENBQVUsSUFBQyxDQUFBLFFBQUQsQ0FBVSxNQUFWLENBQVY7WUFDQSxJQUFDLENBQUEsTUFBTSxDQUFDLGlCQUFSLEdBQTRCLFNBUmhDOztRQVVBLElBQUcsMEJBQUEsSUFBa0IsSUFBQyxDQUFBLE1BQU0sQ0FBQyxJQUFSLFlBQXdCLEtBQTdDO1lBQ0ksSUFBQSxHQUFPLElBQUksQ0FBQyxNQUFMLENBQVksSUFBQyxDQUFBLE1BQU0sQ0FBQyxrQkFBUixDQUEyQixDQUEzQixFQUE4QixTQUE5QixDQUFaLEVBRFg7U0FBQSxNQUFBO1lBR0ksSUFBQSxHQUFPLElBQUksQ0FBQyxNQUFMLENBQVksSUFBQyxDQUFBLE1BQU0sQ0FBQyxXQUFSLENBQW9CLENBQXBCLENBQVosRUFIWDs7UUFLQSxJQUFnRCw0REFBaEQ7WUFBQSxJQUFJLENBQUMsSUFBTCxDQUFVLElBQUMsQ0FBQSxRQUFELENBQVUsUUFBQSxHQUFTLElBQUMsQ0FBQSxNQUFNLENBQUMsS0FBM0IsQ0FBVixFQUFBOztRQUNBLElBQUksQ0FBQyxJQUFMLENBQVUsSUFBQyxDQUFBLFFBQUQsQ0FBVSxHQUFWLENBQVY7ZUFDQTtJQXhCUzs7OztHQUYyQzs7QUE0QjVELE9BQU8sQ0FBQyxzQkFBUixHQUF1Qzs7Ozs7Ozs7O0dBQStCOztBQUV0RSxPQUFPLENBQUMsd0JBQVIsR0FBeUM7Ozs7Ozs7OztHQUFpQzs7QUFFMUUsT0FBTyxDQUFDLG9CQUFSLEdBQXFDOzs7Ozs7Ozs7R0FBNkI7O0FBRWxFLE9BQU8sQ0FBQyxtQkFBUixHQUFvQzs7O0lBRW5CLDZCQUFDLFVBQUQ7UUFBQyxJQUFDLENBQUEsYUFBRDtJQUFEOztrQ0FFYixRQUFBLEdBQVUsQ0FBQyxZQUFEOztrQ0FFVixXQUFBLEdBQWEsU0FBQyxDQUFEO0FBQ1QsWUFBQTtRQUFBLElBQUEsR0FBTztRQUNQLENBQUMsQ0FBQyxNQUFGLElBQVk7UUFDWixZQUFBOztBQUFnQjtBQUFBO2lCQUFBLHdDQUFBOzs2QkFBQSxTQUFTLENBQUMsa0JBQVYsQ0FBNkIsQ0FBN0IsRUFBZ0MsVUFBaEM7QUFBQTs7O1FBRWhCLElBQUcsSUFBQyxDQUFBLFVBQVUsQ0FBQyxNQUFaLEtBQXNCLENBQXpCO1lBQ0ksSUFBSSxDQUFDLElBQUwsQ0FBVSxJQUFDLENBQUEsUUFBRCxDQUFVLEtBQUEsR0FBTSxDQUFDLENBQUMsTUFBbEIsQ0FBVjtBQUNBLGlCQUFBLGdFQUFBOztnQkFDSSxJQUF5QyxLQUF6QztvQkFBQSxJQUFJLENBQUMsSUFBTCxDQUFVLElBQUMsQ0FBQSxRQUFELENBQVUsS0FBQSxHQUFNLENBQUMsQ0FBQyxNQUFsQixDQUFWLEVBQUE7O2dCQUNBLElBQUksQ0FBQyxJQUFMLGFBQVUsU0FBVjtBQUZKO1lBR0EsSUFBSSxDQUFDLElBQUwsQ0FBVSxJQUFDLENBQUEsUUFBRCxDQUFVLEtBQVYsQ0FBVixFQUxKO1NBQUEsTUFBQTtZQU9JLElBQUksQ0FBQyxJQUFMLENBQVUsSUFBQyxDQUFBLFFBQUQsQ0FBVSxJQUFWLENBQVYsRUFQSjs7ZUFRQTtJQWJTOzs7O0dBTitDOztBQXFCaEUsT0FBTyxDQUFDLG1CQUFSLEdBQW9DOzs7Ozs7Ozs7R0FBNEI7O0FBRWhFLE9BQU8sQ0FBQyxtQkFBUixHQUFvQzs7Ozs7Ozs7O0dBQTRCOztBQUVoRSxPQUFPLENBQUMsZUFBUixHQUFnQzs7O0lBQ2YseUJBQUMsUUFBRCxFQUFZLEtBQVosRUFBb0Isc0JBQXBCO1FBQUMsSUFBQyxDQUFBLFdBQUQ7UUFBVyxJQUFDLENBQUEsUUFBRDtRQUFRLElBQUMsQ0FBQSx3QkFBRDtRQUU3QixJQUFDLENBQUEsVUFBRCxHQUFpQixrQkFBSCxHQUFnQixJQUFDLENBQUEsS0FBSyxDQUFDLEtBQXZCLEdBQWtDLElBQUMsQ0FBQSxRQUFRLENBQUM7SUFGakQ7OzhCQUliLFFBQUEsR0FBVSxDQUFDLFVBQUQsRUFBYSxPQUFiOzs4QkFFVixXQUFBLEdBQWEsU0FBQyxDQUFEO0FBQ1QsWUFBQTtRQUFBLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBUixDQUFhLElBQUMsQ0FBQSxVQUFkLEVBQTBCLElBQUMsQ0FBQSxxQkFBM0I7UUFDQSxJQUFBLEdBQU87UUFDUCxJQUFJLENBQUMsSUFBTCxDQUFVLElBQUMsQ0FBQSxRQUFELENBQVUsSUFBQyxDQUFBLFFBQVEsQ0FBQyxLQUFwQixDQUFWO1FBQ0EsSUFBNkMsa0JBQTdDO1lBQUEsSUFBSSxDQUFDLElBQUwsQ0FBVSxJQUFDLENBQUEsUUFBRCxDQUFVLE1BQUEsR0FBTyxJQUFDLENBQUEsS0FBSyxDQUFDLEtBQXhCLENBQVYsRUFBQTs7ZUFDQTtJQUxTOzs7O0dBUHVDOztBQWN4RCxPQUFPLENBQUMsZUFBUixHQUFnQzs7O0lBQ2YseUJBQUMsUUFBRCxFQUFXLEtBQVg7UUFDVCxpREFBTSxRQUFOLEVBQWdCLEtBQWhCLEVBQXVCLFFBQXZCO0lBRFM7OzhCQUdiLFdBQUEsR0FBYSxTQUFDLENBQUQ7QUFHVCxZQUFBO1FBQUEsSUFBRyxRQUFBLElBQUMsQ0FBQSxVQUFELEVBQUEsYUFBZSxDQUFDLENBQUMsZUFBakIsRUFBQSxJQUFBLE1BQUEsQ0FBQSxJQUFvQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQVIsQ0FBYyxJQUFDLENBQUEsVUFBZixDQUF2QztZQUNJLElBQUMsQ0FBQSxLQUFELENBQU8sR0FBQSxHQUFJLElBQUMsQ0FBQSxVQUFMLEdBQWdCLDZCQUF2QixFQURKO1NBQUEsTUFBQTtZQUdJLENBQUMsQ0FBQyxlQUFlLENBQUMsSUFBbEIsQ0FBdUIsSUFBQyxDQUFBLFVBQXhCLEVBSEo7O2VBSUEsaURBQU0sQ0FBTjtJQVBTOzs7O0dBSnVDOztBQWF4RCxPQUFPLENBQUMsc0JBQVIsR0FBdUM7Ozs7Ozs7OztHQUErQjs7QUFFdEUsT0FBTyxDQUFDLHdCQUFSLEdBQXlDOzs7Ozs7Ozs7R0FBaUM7O0FBRTFFLE9BQU8sQ0FBQyxlQUFSLEdBQWdDOzs7SUFDZix5QkFBQyxLQUFELEVBQVEsUUFBUjtRQUNULGlEQUFNLEtBQU4sRUFBYSxRQUFiLEVBQXVCLFFBQXZCO0lBRFM7Ozs7R0FEdUM7O0FBYXhELE9BQU8sQ0FBQyxNQUFSLEdBQXVCOzs7SUFFTixnQkFBQyxTQUFELEVBQVksTUFBWixFQUFvQixPQUFwQixFQUE4QixPQUE5QjtRQUFDLElBQUMsQ0FBQSxXQUFEO1FBQVcsSUFBQyxDQUFBLFFBQUQ7UUFBUSxJQUFDLENBQUEsVUFBRDs7WUFBVSxVQUFVOztRQUNoRCxJQUFDLENBQUEsZ0JBQUEsS0FBRixFQUFTLElBQUMsQ0FBQSxxQkFBQSxVQUFWLEVBQXNCLElBQUMsQ0FBQSx3QkFBQSxhQUF2QixFQUFzQyxJQUFDLENBQUEsNEJBQUE7SUFEOUI7O3FCQUdiLFFBQUEsR0FBVSxDQUFDLFVBQUQsRUFBYSxPQUFiOztxQkFFVixXQUFBLEdBQWEsU0FBQyxDQUFEOzRCQUNULENBQUMsQ0FBRSxlQUFILEtBQVksU0FBWixJQUEwQixzQkFBMUIsSUFBd0MsQ0FBQyxJQUFDLENBQUEsaUJBQUQsSUFBc0IsYUFBTyxJQUFDLENBQUEsT0FBUixFQUFBLEdBQUEsTUFBdkI7SUFEL0I7O3FCQUdiLGtCQUFBLEdBQW9CLFNBQUMsQ0FBRCxFQUFJLE9BQUo7UUFDaEIsSUFBRyxNQUFNLENBQUEsU0FBRSxDQUFBLGNBQWMsQ0FBQyxJQUF2QixDQUE0QixDQUFDLENBQUMsS0FBSyxDQUFDLFNBQXBDLEVBQStDLE9BQU8sQ0FBQyxLQUF2RCxDQUFBLElBQ0UsQ0FBQyxDQUFDLEtBQUssQ0FBQyxTQUFVLENBQUEsQ0FBQyxDQUFDLEtBQUssQ0FBQyxTQUFVLENBQUEsT0FBTyxDQUFDLEtBQVIsQ0FBbEIsQ0FBaUMsQ0FBQyxJQUFwRCxLQUE0RCxRQURqRTttQkFFSSxPQUFPLENBQUMsS0FBUixDQUFjLEdBQUEsR0FBSSxPQUFPLENBQUMsS0FBWixHQUFrQixnQkFBaEMsRUFGSjs7SUFEZ0I7O3FCQUtwQixPQUFBLEdBQVMsU0FBQyxJQUFEO2VBQ0wsSUFBRSxDQUFHLElBQUMsQ0FBQSxPQUFELEtBQVksUUFBZixHQUE2QixPQUE3QixHQUEwQyxVQUExQyxDQUFxRCxDQUFDLE9BQXhELENBQWdFLElBQWhFO0lBREs7O3FCQUdULFVBQUEsR0FBWSxTQUFDLENBQUQ7ZUFDUixVQUFBLENBQVcsQ0FBWCxFQUFjLElBQWQsRUFBb0IsVUFBcEI7SUFEUTs7cUJBUVosV0FBQSxHQUFhLFNBQUMsQ0FBRDtBQUVULFlBQUE7UUFBQSxJQUFHLE9BQUEsR0FBVSxJQUFDLENBQUEsUUFBRCxZQUFxQixLQUFsQztZQUNJLElBQWlDLElBQUMsQ0FBQSxRQUFRLENBQUMsT0FBVixDQUFBLENBQUEsSUFBdUIsSUFBQyxDQUFBLFFBQVEsQ0FBQyxRQUFWLENBQUEsQ0FBeEQ7QUFBQSx1QkFBTyxJQUFDLENBQUEsbUJBQUQsQ0FBcUIsQ0FBckIsRUFBUDs7WUFDQSxJQUFpQyxJQUFDLENBQUEsUUFBUSxDQUFDLFFBQVYsQ0FBQSxDQUFqQztBQUFBLHVCQUFPLElBQUMsQ0FBQSxhQUFELENBQXFCLENBQXJCLEVBQVA7O1lBQ0EsWUFBaUMsSUFBQyxDQUFBLFFBQUQsS0FBYSxLQUFiLElBQUEsSUFBQSxLQUFvQixLQUFwQixJQUFBLElBQUEsS0FBMkIsSUFBNUQ7QUFBQSx1QkFBTyxJQUFDLENBQUEsa0JBQUQsQ0FBcUIsQ0FBckIsRUFBUDs7WUFDQSxZQUFpQyxJQUFDLENBQUEsUUFBRCxLQUFhLEtBQWIsSUFBQSxJQUFBLEtBQW9CLEtBQXBCLElBQUEsSUFBQSxLQUEyQixLQUE1RDtBQUFBLHVCQUFPLElBQUMsQ0FBQSxrQkFBRCxDQUFxQixDQUFyQixFQUFQO2FBSko7O1FBS0EsSUFBRyxJQUFDLENBQUEsS0FBRCxZQUFrQixJQUFyQjtZQUNJLElBQUcsSUFBQyxDQUFBLEtBQUssRUFBQyxNQUFELEVBQVQ7Z0JBQ0ksSUFBQyxDQUFBLEtBQUssQ0FBQyxLQUFQLEdBQWUsSUFBQyxDQUFBLFFBQVEsQ0FBQztnQkFDekIsSUFBQyxDQUFBLEtBQUssQ0FBQyxJQUFQLEdBQWUsSUFBQyxDQUFBLFFBQVEsQ0FBQyxVQUFXLENBQUEsQ0FBQTtnQkFDcEMsSUFBQyxDQUFBLEtBQUssQ0FBQyxRQUFQLEdBQWtCLElBQUMsQ0FBQSxTQUh2QjthQUFBLE1BSUsscURBQXVCLENBQUUsZ0JBQXRCLElBQWdDLENBQW5DO2dCQUNELE9BQW1DLElBQUMsQ0FBQSxRQUFRLENBQUMsVUFBN0MsRUFBQyxzRkFBRCxFQUFnQixxQkFBaEIsRUFBMkI7Z0JBQzNCLDJDQUFpQixDQUFFLGVBQWhCLEtBQXlCLFdBQTVCO29CQUNJLElBQUMsQ0FBQSxLQUFLLENBQUMsS0FBUCxHQUFlLElBQUksS0FBSixDQUFVLElBQUMsQ0FBQSxRQUFRLENBQUMsSUFBcEIsRUFBMEIsVUFBMUI7b0JBQ2YsSUFBQyxDQUFBLEtBQUssQ0FBQyxJQUFQLEdBQWU7b0JBQ2YsSUFBQyxDQUFBLEtBQUssQ0FBQyxRQUFQLEdBQWtCLElBQUMsQ0FBQSxTQUh2QjtpQkFGQzthQUxUOztRQVdBLElBQUEsQ0FBTyxJQUFDLENBQUEsT0FBUjtZQUNJLE9BQUEsR0FBVSxJQUFDLENBQUEsUUFBUSxDQUFDLFNBQVYsQ0FBQTtZQUNWLElBQUEsQ0FBTyxPQUFPLENBQUMsWUFBUixDQUFBLENBQVA7Z0JBQ0ksSUFBQyxDQUFBLFFBQVEsQ0FBQyxLQUFWLENBQWdCLEdBQUEsR0FBRyxDQUFDLElBQUMsQ0FBQSxRQUFRLENBQUMsT0FBVixDQUFrQixDQUFsQixDQUFELENBQUgsR0FBd0IscUJBQXhDLEVBREo7O1lBRUEsSUFBQSxnREFBTyxPQUFPLENBQUMseUJBQWY7Z0JBRUksSUFBRyxJQUFDLENBQUEsaUJBQUo7b0JBQ0ksSUFBQyxDQUFBLGtCQUFELENBQW9CLENBQXBCLEVBQXVCLE9BQXZCO29CQUNBLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBUixDQUFZLE9BQU8sQ0FBQyxLQUFwQixFQUEyQixJQUFDLENBQUEsaUJBQTVCLEVBRko7aUJBQUEsTUFHSyxJQUFHLElBQUMsQ0FBQSxLQUFKO29CQUNELENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBUixDQUFZLE9BQU8sQ0FBQyxLQUFwQixFQUEyQixLQUEzQixFQURDO2lCQUFBLE1BQUE7b0JBR0QsSUFBQyxDQUFBLGtCQUFELENBQW9CLENBQXBCLEVBQXVCLE9BQXZCO29CQUNBLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBUixDQUFhLE9BQU8sQ0FBQyxLQUFyQixFQUpDO2lCQUxUO2FBSko7O1FBZUEsR0FBQSxHQUFNLElBQUMsQ0FBQSxLQUFLLENBQUMsa0JBQVAsQ0FBMEIsQ0FBMUIsRUFBNkIsVUFBN0I7UUFDTixJQUEwQixPQUFBLElBQVksSUFBQyxDQUFBLFFBQVEsQ0FBQyxJQUFWLFlBQTBCLEdBQWhFO1lBQUEsSUFBQyxDQUFBLFFBQVEsQ0FBQyxLQUFWLEdBQWtCLEtBQWxCOztRQUNBLFlBQUEsR0FBZSxJQUFDLENBQUEsUUFBUSxDQUFDLGtCQUFWLENBQTZCLENBQTdCLEVBQWdDLFVBQWhDO1FBRWYsSUFBRyxJQUFDLENBQUEsT0FBRCxLQUFZLFFBQWY7WUFDSSxXQUFHLGVBQUEsQ0FBZ0IsWUFBaEIsQ0FBQSxFQUFBLGFBQWlDLFlBQWpDLEVBQUEsSUFBQSxNQUFIO2dCQUNJLFlBQVksQ0FBQyxPQUFiLENBQXFCLElBQUMsQ0FBQSxRQUFELENBQVUsR0FBVixDQUFyQjtnQkFDQSxZQUFZLENBQUMsSUFBYixDQUFrQixJQUFDLENBQUEsUUFBRCxDQUFVLEdBQVYsQ0FBbEIsRUFGSjs7QUFHQSxtQkFBTyxZQUFZLENBQUMsTUFBYixDQUFvQixJQUFDLENBQUEsUUFBRCxDQUFVLElBQVYsQ0FBcEIsRUFBcUMsR0FBckMsRUFKWDs7UUFNQSxNQUFBLEdBQVMsWUFBWSxDQUFDLE1BQWIsQ0FBb0IsSUFBQyxDQUFBLFFBQUQsQ0FBVSxHQUFBLEdBQUcsQ0FBRSxJQUFDLENBQUEsT0FBRCxJQUFZLEdBQWQsQ0FBSCxHQUFzQixHQUFoQyxDQUFwQixFQUF5RCxHQUF6RDtRQUNULElBQUcsQ0FBQyxDQUFDLEtBQUYsSUFBVyxVQUFkO21CQUE4QixPQUE5QjtTQUFBLE1BQUE7bUJBQTBDLElBQUMsQ0FBQSxZQUFELENBQWMsTUFBZCxFQUExQzs7SUE1Q1M7O3FCQXVEYixtQkFBQSxHQUFxQixTQUFDLENBQUQ7QUFFakIsWUFBQTtRQUFBLEdBQUEsR0FBWSxDQUFDLENBQUMsS0FBRixLQUFXO1FBQ3RCLFFBQVc7UUFDWCxVQUFXLElBQUMsQ0FBQSxRQUFRLENBQUM7UUFFdEIsSUFBQSxDQUFPLENBQUEsSUFBQSxHQUFPLE9BQU8sQ0FBQyxNQUFmLENBQVA7WUFDSSxJQUFBLEdBQU8sS0FBSyxDQUFDLGtCQUFOLENBQXlCLENBQXpCO1lBQ0EsSUFBRyxDQUFDLENBQUMsS0FBRixJQUFXLFFBQWQ7dUJBQTRCLElBQUMsQ0FBQSxZQUFELENBQWMsSUFBZCxFQUE1QjthQUFBLE1BQUE7dUJBQW9ELEtBQXBEO2FBRlg7O1FBSUMsTUFBTztRQUVSLElBQUcsSUFBQSxLQUFRLENBQVIsSUFBYyxHQUFBLFlBQWUsU0FBaEM7WUFDSSxHQUFHLENBQUMsS0FBSixDQUFVLHdDQUFWLEVBREo7O1FBR0EsUUFBQSxHQUFXLElBQUMsQ0FBQSxRQUFRLENBQUMsUUFBVixDQUFBO1FBRVgsSUFBRyxHQUFBLElBQVEsSUFBQSxLQUFRLENBQWhCLElBQXNCLENBQUEsQ0FBQSxHQUFBLFlBQW1CLEtBQW5CLENBQXpCO1lBR0ksWUFBQSxHQUFlO1lBQ2YsSUFBRyxHQUFBLFlBQWUsTUFBZixJQUEwQixHQUFHLENBQUMsT0FBSixLQUFlLFFBQTVDO2dCQUVJLE9BQXNDLEdBQXRDLGVBQUMsVUFBaUIsV0FBTixLQUFaLEVBQStCLFdBQVA7Z0JBQ3hCLElBQUcsR0FBQSxZQUFlLE1BQWxCO29CQUNJLFlBQUEsR0FBZSxHQUFHLENBQUM7b0JBQ25CLEdBQUEsR0FBTSxHQUFHLENBQUMsU0FGZDtpQkFISjthQUFBLE1BQUE7Z0JBT0ksSUFBRyxHQUFBLFlBQWUsTUFBbEI7b0JBQ0ksWUFBQSxHQUFlLEdBQUcsQ0FBQztvQkFDbkIsR0FBQSxHQUFNLEdBQUcsQ0FBQyxTQUZkOztnQkFHQSxHQUFBLEdBQVMsUUFBSCxHQUNDLEdBQUcsRUFBQyxJQUFELEVBQU4sR0FDSSxHQUFHLENBQUMsVUFBVyxDQUFBLENBQUEsQ0FBRSxDQUFDLElBRHRCLEdBR0ksSUFBSSxZQUFKLENBQWlCLEdBQUcsQ0FBQyxNQUFKLENBQUEsQ0FBWSxDQUFDLEtBQTlCLENBSkYsR0FPRixJQUFJLGFBQUosQ0FBa0IsQ0FBbEIsRUFqQlI7O1lBa0JBLEdBQUEsR0FBTSxHQUFHLENBQUMsTUFBSixDQUFBLENBQUEsWUFBd0I7WUFDOUIsS0FBQSxHQUFRLElBQUksS0FBSixDQUFVLEtBQVY7WUFDUixLQUFLLENBQUMsVUFBVSxDQUFDLElBQWpCLENBQXNCLElBQUksQ0FBSSxHQUFILEdBQVksTUFBWixHQUF3QixLQUF6QixDQUFKLENBQW9DLEdBQXBDLENBQXRCO1lBQ0EsT0FBQSxHQUFVLGNBQUEsQ0FBZSxHQUFHLENBQUMsTUFBSixDQUFBLENBQVksQ0FBQyxLQUE1QjtZQUNWLElBQXFCLE9BQXJCO2dCQUFBLEdBQUcsQ0FBQyxLQUFKLENBQVUsT0FBVixFQUFBOztZQUNBLElBQTJDLFlBQTNDO2dCQUFBLEtBQUEsR0FBUSxJQUFJLEVBQUosQ0FBTyxHQUFQLEVBQVksS0FBWixFQUFtQixZQUFuQixFQUFSOztBQUNBLG1CQUFPLElBQUksTUFBSixDQUFXLEdBQVgsRUFBZ0IsS0FBaEIsRUFBdUIsSUFBdkIsRUFBNkI7Z0JBQUEsS0FBQSxFQUFPLElBQUMsQ0FBQSxLQUFSO2FBQTdCLENBQTJDLENBQUMsa0JBQTVDLENBQStELENBQS9ELEVBQWtFLFNBQWxFLEVBNUJYOztRQThCQSxJQUFBLEdBQVcsS0FBSyxDQUFDLGtCQUFOLENBQXlCLENBQXpCLEVBQTRCLFVBQTVCO1FBQ1gsUUFBQSxHQUFXLGVBQUEsQ0FBZ0IsSUFBaEI7UUFDWCxPQUFBLEdBQVc7UUFDWCxXQUFBLEdBQWM7UUFFZCxJQUFHLENBQUEsQ0FBQSxLQUFLLENBQUMsTUFBTixDQUFBLENBQUEsWUFBOEIsaUJBQTlCLENBQUEsSUFBbUQsSUFBQyxDQUFBLFFBQVEsQ0FBQyxPQUFWLENBQWtCLFFBQWxCLENBQXREO1lBQ0ksT0FBTyxDQUFDLElBQVIsQ0FBYyxDQUFBLElBQUMsQ0FBQSxRQUFELENBQVksQ0FBRSxHQUFBLEdBQU0sQ0FBQyxDQUFDLEtBQUssQ0FBQyxZQUFSLENBQXFCLEtBQXJCLENBQVIsQ0FBQSxHQUFvQyxLQUFoRCxDQUF1RCxTQUFBLFdBQUEsSUFBQSxDQUFBLENBQXJFO1lBQ0EsSUFBQSxHQUFPLENBQUMsSUFBQyxDQUFBLFFBQUQsQ0FBVSxHQUFWLENBQUQ7WUFDUCxRQUFBLEdBQVcsSUFIZjs7QUFLQSxhQUFBLG1EQUFBOztZQUVJLEdBQUEsR0FBTTtZQUVOLElBQUcsQ0FBSSxXQUFKLElBQW9CLEdBQUEsWUFBZSxLQUF0QztnQkFFSSxJQUFBLEdBQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFULENBQUEsQ0FBaUIsQ0FBQztnQkFDekIsR0FBQSxHQUFNLEdBQUcsQ0FBQyxNQUFKLENBQUE7Z0JBQ04sR0FBQSxHQUFTLElBQUQsR0FBTSxNQUFOLEdBQVksUUFBWixHQUFxQixZQUFyQixHQUFnQyxDQUFFLE9BQUEsQ0FBUSxPQUFSLEVBQWlCLENBQWpCLENBQUYsQ0FBaEMsR0FBc0QsUUFBdEQsR0FBOEQsUUFBOUQsR0FBdUUsSUFBdkUsR0FBMkU7Z0JBQ25GLElBQUcsSUFBQSxHQUFPLElBQUEsR0FBTyxDQUFQLEdBQVcsQ0FBckI7b0JBQ0ksSUFBQSxHQUFPLENBQUMsQ0FBQyxLQUFLLENBQUMsWUFBUixDQUFxQixHQUFyQixFQUEwQjt3QkFBQSxNQUFBLEVBQVEsSUFBUjtxQkFBMUI7b0JBQ1AsR0FBQSxJQUFPLElBQUEsR0FBSyxJQUFMLEdBQVUsS0FBVixHQUFlLFFBQWYsR0FBd0IsWUFBeEIsR0FBb0MsSUFBcEMsR0FBeUMsT0FBekMsR0FBZ0QsSUFBaEQsR0FBcUQsS0FBckQsR0FBMEQsQ0FBMUQsR0FBNEQsUUFGdkU7aUJBQUEsTUFBQTtvQkFJSSxHQUFBLElBQU8sU0FKWDs7Z0JBS0EsR0FBQSxHQUFVLElBQUksT0FBSixDQUFZLEdBQVo7Z0JBQ1YsV0FBQSxHQUFpQixJQUFELEdBQU0sS0FYMUI7YUFBQSxNQWFLLElBQUcsQ0FBSSxXQUFKLElBQW9CLEdBQUEsWUFBZSxTQUF0QztnQkFFRCxJQUFHLElBQUEsR0FBTyxJQUFBLEdBQU8sQ0FBUCxHQUFXLENBQXJCO29CQUNJLElBQUcsSUFBQSxLQUFRLENBQVg7d0JBQ0ksV0FBQSxHQUFpQixRQUFELEdBQVUsY0FEOUI7cUJBQUEsTUFBQTt3QkFHSSxJQUFBLEdBQU8sQ0FBQyxDQUFDLEtBQUssQ0FBQyxZQUFSLENBQXFCLEdBQXJCLEVBQTBCOzRCQUFBLE1BQUEsRUFBUSxJQUFSO3lCQUExQjt3QkFDUCxHQUFBLEdBQU0sSUFBSSxPQUFKLENBQWUsSUFBRCxHQUFNLEtBQU4sR0FBVyxRQUFYLEdBQW9CLFlBQXBCLEdBQWdDLElBQTlDO3dCQUNOLFdBQUEsR0FBaUIsSUFBRCxHQUFNO3dCQUN0QixPQUFPLENBQUMsSUFBUixDQUFhLEdBQUcsQ0FBQyxrQkFBSixDQUF1QixDQUF2QixFQUEwQixVQUExQixDQUFiLEVBTko7cUJBREo7O0FBUUEseUJBVkM7YUFBQSxNQUFBO2dCQWFELElBQUcsR0FBQSxZQUFlLEtBQWYsSUFBd0IsR0FBQSxZQUFlLFNBQTFDO29CQUNJLEdBQUcsQ0FBQyxLQUFKLENBQVUsNERBQVYsRUFESjs7Z0JBRUEsWUFBQSxHQUFlO2dCQUNmLElBQUcsR0FBQSxZQUFlLE1BQWYsSUFBMEIsR0FBRyxDQUFDLE9BQUosS0FBZSxRQUE1QztvQkFDSSxPQUFzQyxHQUF0QyxlQUFDLFVBQWlCLFdBQU4sS0FBWixFQUErQixXQUFQO29CQUN4QixJQUFHLEdBQUEsWUFBZSxNQUFsQjt3QkFDSSxZQUFBLEdBQWUsR0FBRyxDQUFDO3dCQUNuQixHQUFBLEdBQU0sR0FBRyxDQUFDLFNBRmQ7cUJBRko7aUJBQUEsTUFBQTtvQkFNSSxJQUFHLEdBQUEsWUFBZSxNQUFsQjt3QkFDSSxZQUFBLEdBQWUsR0FBRyxDQUFDO3dCQUNuQixHQUFBLEdBQU0sR0FBRyxDQUFDLFNBRmQ7O29CQUdBLEdBQUEsR0FBUyxRQUFILEdBQ0MsR0FBRyxFQUFDLElBQUQsRUFBTixHQUNJLEdBQUcsQ0FBQyxVQUFXLENBQUEsQ0FBQSxDQUFFLENBQUMsSUFEdEIsR0FHSSxJQUFJLFlBQUosQ0FBaUIsR0FBRyxDQUFDLE1BQUosQ0FBQSxDQUFZLENBQUMsS0FBOUIsQ0FKRixHQU1GLElBQUksT0FBSixDQUFZLFdBQUEsSUFBZSxHQUEzQixFQWZSOztnQkFpQkEsSUFBQSxHQUFPLEdBQUcsQ0FBQyxNQUFKLENBQUEsQ0FBWSxDQUFDO2dCQUNwQixHQUFBLEdBQU0sR0FBRyxDQUFDLE1BQUosQ0FBQSxDQUFBLFlBQXdCO2dCQUM5QixHQUFBLEdBQU0sSUFBSSxLQUFKLENBQVUsSUFBSSxPQUFKLENBQVksUUFBWixDQUFWLEVBQWlDLENBQUMsSUFBSSxDQUFJLEdBQUgsR0FBWSxNQUFaLEdBQXdCLEtBQXpCLENBQUosQ0FBb0MsR0FBcEMsQ0FBRCxDQUFqQztnQkFDTixJQUF1QyxZQUF2QztvQkFBQSxHQUFBLEdBQU0sSUFBSSxFQUFKLENBQU8sR0FBUCxFQUFZLEdBQVosRUFBaUIsWUFBakIsRUFBTjtpQkFwQ0M7O1lBc0NMLElBQUcsWUFBSDtnQkFDSSxPQUFBLEdBQVUsY0FBQSxDQUFlLElBQWY7Z0JBQ1YsSUFBcUIsT0FBckI7b0JBQUEsR0FBRyxDQUFDLEtBQUosQ0FBVSxPQUFWLEVBQUE7aUJBRko7O1lBSUEsT0FBTyxDQUFDLElBQVIsQ0FBYSxJQUFJLE1BQUosQ0FBVyxHQUFYLEVBQWdCLEdBQWhCLEVBQXFCLElBQXJCLEVBQTJCO2dCQUFBLEtBQUEsRUFBTyxJQUFDLENBQUEsS0FBUjtnQkFBZSxVQUFBLEVBQVksSUFBM0I7YUFBM0IsQ0FBMEQsQ0FBQyxrQkFBM0QsQ0FBOEUsQ0FBOUUsRUFBaUYsVUFBakYsQ0FBYjtBQTNESjtRQTZEQSxJQUFBLENBQUEsQ0FBeUIsR0FBQSxJQUFPLElBQUMsQ0FBQSxVQUFqQyxDQUFBO1lBQUEsT0FBTyxDQUFDLElBQVIsQ0FBYSxJQUFiLEVBQUE7O1FBQ0EsU0FBQSxHQUFZLElBQUMsQ0FBQSxrQkFBRCxDQUFvQixPQUFwQixFQUE2QixJQUE3QjtRQUNaLElBQUcsQ0FBQyxDQUFDLEtBQUYsR0FBVSxVQUFiO21CQUE2QixVQUE3QjtTQUFBLE1BQUE7bUJBQTRDLElBQUMsQ0FBQSxZQUFELENBQWMsU0FBZCxFQUE1Qzs7SUF4SGlCOztxQkE2SHJCLGtCQUFBLEdBQW9CLFNBQUMsQ0FBRDtBQUVoQixZQUFBO1FBQUEsT0FBZ0IsSUFBQyxDQUFBLFFBQVEsQ0FBQyxjQUFWLENBQXlCLENBQXpCLENBQWhCLEVBQUMsY0FBRCxFQUFPO1FBRVAsSUFBRyxDQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBcEIsSUFBK0IsSUFBSSxDQUFDLElBQUwsWUFBcUIsT0FBcEQsSUFDVSxDQUFBLENBQUEsSUFBSSxDQUFDLElBQUwsWUFBeUIsV0FBekIsQ0FEVixJQUNtRCxDQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBUixDQUFjLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBeEIsQ0FEMUQ7WUFFSSxJQUFDLENBQUEsUUFBUSxDQUFDLEtBQVYsQ0FBZ0IsaUJBQUEsR0FBa0IsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUE1QixHQUFrQyw0QkFBbEMsR0FBOEQsSUFBQyxDQUFBLE9BQS9ELEdBQXVFLDBDQUF2RixFQUZKOztRQUdBLElBQUcsYUFBTyxJQUFDLENBQUEsT0FBUixFQUFBLEdBQUEsTUFBSDtZQUNJLENBQUMsQ0FBQyxtQkFBRixHQUF3QjttQkFDeEIsSUFBSSxFQUFKLENBQU8sSUFBSSxTQUFKLENBQWMsSUFBZCxDQUFQLEVBQTRCLEtBQTVCLEVBQW1DO2dCQUFBLElBQUEsRUFBTSxJQUFOO2FBQW5DLENBQThDLENBQUMsT0FBL0MsQ0FBdUQsSUFBSSxNQUFKLENBQVcsS0FBWCxFQUFrQixJQUFDLENBQUEsS0FBbkIsRUFBMEIsR0FBMUIsQ0FBdkQsQ0FBc0YsQ0FBQyxrQkFBdkYsQ0FBMEcsQ0FBMUcsRUFGSjtTQUFBLE1BQUE7WUFJSSxTQUFBLEdBQVksSUFBSSxFQUFKLENBQU8sSUFBQyxDQUFBLE9BQVEsYUFBaEIsRUFBd0IsSUFBeEIsRUFBOEIsSUFBSSxNQUFKLENBQVcsS0FBWCxFQUFrQixJQUFDLENBQUEsS0FBbkIsRUFBMEIsR0FBMUIsQ0FBOUIsQ0FBNkQsQ0FBQyxrQkFBOUQsQ0FBaUYsQ0FBakY7WUFDWixJQUFHLENBQUMsQ0FBQyxLQUFGLElBQVcsVUFBZDt1QkFBOEIsVUFBOUI7YUFBQSxNQUFBO3VCQUE2QyxJQUFDLENBQUEsWUFBRCxDQUFjLFNBQWQsRUFBN0M7YUFMSjs7SUFQZ0I7O3FCQWlCcEIsa0JBQUEsR0FBb0IsU0FBQyxDQUFEO0FBRWhCLFlBQUE7UUFBQSxPQUFnQixJQUFDLENBQUEsUUFBUSxDQUFDLGNBQVYsQ0FBeUIsQ0FBekIsQ0FBaEIsRUFBQyxjQUFELEVBQU87ZUFDUCxJQUFJLE1BQUosQ0FBVyxJQUFYLEVBQWlCLElBQUksRUFBSixDQUFPLElBQUMsQ0FBQSxPQUFRLGFBQWhCLEVBQXdCLEtBQXhCLEVBQStCLElBQUMsQ0FBQSxLQUFoQyxDQUFqQixDQUF3RCxDQUFDLGtCQUF6RCxDQUE0RSxDQUE1RTtJQUhnQjs7cUJBT3BCLGFBQUEsR0FBZSxTQUFDLENBQUQ7QUFFWCxZQUFBO2VBQWlDLElBQUMsQ0FBQSxRQUFRLENBQUMsVUFBVSxDQUFDLEdBQXJCLENBQUEsRUFBaEMsT0FBUSxrQkFBTSxjQUFJO1FBQ25CLElBQUEsR0FBTyxJQUFDLENBQUEsUUFBUSxDQUFDLE9BQVYsQ0FBa0IsQ0FBbEI7UUFDUCxJQUFHLElBQUg7WUFDSSxPQUFzQixJQUFDLENBQUEsb0JBQUQsQ0FBc0IsSUFBSSxDQUFDLEtBQUwsQ0FBVyxDQUFYLEVBQWMsUUFBZCxDQUF0QixDQUF0QixFQUFDLGtCQUFELEVBQVcsa0JBRGY7U0FBQSxNQUFBO1lBR0ksUUFBQSxHQUFXLE9BQUEsR0FBVSxJQUh6Qjs7UUFJQSxJQUFHLEVBQUg7WUFDSSxvQkFBRyxJQUFJLENBQUUsUUFBTixDQUFBLFdBQUEsSUFBcUIsRUFBRSxDQUFDLFFBQUgsQ0FBQSxDQUF4QjtnQkFDSSxFQUFBLEdBQUssRUFBRSxDQUFDLE9BQUgsQ0FBVyxDQUFYLENBQUEsR0FBZ0I7Z0JBQ3JCLElBQUEsQ0FBZSxTQUFmO29CQUFBLEVBQUEsSUFBTSxFQUFOO2lCQUZKO2FBQUEsTUFBQTtnQkFJSSxFQUFBLEdBQUssRUFBRSxDQUFDLE9BQUgsQ0FBVyxDQUFYLEVBQWMsWUFBZCxDQUFBLEdBQThCLEtBQTlCLEdBQXNDO2dCQUMzQyxJQUFBLENBQW9CLFNBQXBCO29CQUFBLEVBQUEsSUFBTSxPQUFOO2lCQUxKO2FBREo7U0FBQSxNQUFBO1lBUUksRUFBQSxHQUFLLE1BUlQ7O1FBU0EsT0FBbUIsSUFBQyxDQUFBLEtBQUssQ0FBQyxLQUFQLENBQWEsQ0FBYixFQUFnQixVQUFoQixDQUFuQixFQUFDLGdCQUFELEVBQVM7UUFDVCxNQUFBLEdBQVMsRUFBRSxDQUFDLE1BQUgsQ0FBVSxJQUFDLENBQUEsUUFBRCxDQUFVLGtCQUFBLEdBQW1CLElBQW5CLEdBQXdCLEtBQXhCLEdBQTZCLFFBQTdCLEdBQXNDLElBQXRDLEdBQTBDLEVBQTFDLEdBQTZDLFdBQXZELENBQVYsRUFBOEUsTUFBOUUsRUFBc0YsSUFBQyxDQUFBLFFBQUQsQ0FBVSxNQUFWLENBQXRGLEVBQXlHLE1BQXpHO1FBQ1QsSUFBRyxDQUFDLENBQUMsS0FBRixHQUFVLFNBQWI7bUJBQTRCLElBQUMsQ0FBQSxZQUFELENBQWMsTUFBZCxFQUE1QjtTQUFBLE1BQUE7bUJBQXNELE9BQXREOztJQW5CVzs7OztHQXRPbUI7O0FBcVF0QyxPQUFPLENBQUMsSUFBUixHQUFxQjs7O0lBQ0osY0FBQyxNQUFELEVBQVMsSUFBVCxFQUFlLEdBQWY7UUFDVCxJQUFDLENBQUEsTUFBRCxHQUFVLE1BQUEsSUFBVTtRQUNwQixJQUFDLENBQUEsSUFBRCxHQUFVLElBQUEsSUFBUSxJQUFJO1FBQ3RCLElBQUMsQ0FBQSxLQUFELEdBQVUsR0FBQSxLQUFPO1FBQ2pCLElBQUMsQ0FBQSxXQUFELEdBQWUsQ0FBQyxDQUFDLElBQUMsQ0FBQSxJQUFJLENBQUMsUUFBTixDQUFlLFNBQUMsSUFBRDttQkFDNUIsQ0FBQyxJQUFBLFlBQWdCLEVBQWhCLElBQXVCLElBQUksQ0FBQyxPQUFMLENBQUEsQ0FBeEIsQ0FBQSxJQUEyQyxJQUFBLFlBQWdCO1FBRC9CLENBQWY7SUFKUjs7bUJBT2IsUUFBQSxHQUFVLENBQUMsUUFBRCxFQUFXLE1BQVg7O21CQUVWLFdBQUEsR0FBYSxTQUFBO2VBQUcsQ0FBQyxDQUFDLElBQUMsQ0FBQTtJQUFOOzttQkFFYixLQUFBLEdBQU87O21CQUVQLFNBQUEsR0FBVyxTQUFDLFdBQUQ7ZUFBaUIsSUFBSSxLQUFKLENBQVUsV0FBVixFQUF1QixJQUFDLENBQUEsSUFBeEIsRUFBOEIsSUFBOUI7SUFBakI7O21CQVFYLFdBQUEsR0FBYSxTQUFDLENBQUQ7QUFFVCxZQUFBO1FBQUEsSUFBRyxJQUFDLENBQUEsS0FBRCwyQ0FBeUIsQ0FBRSxlQUE5QjtZQUNJLElBQUMsQ0FBQSxPQUFELEdBQVcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsUUFEOUI7O1FBR0EsSUFBRyxJQUFDLENBQUEsS0FBRCxJQUFXLENBQUksSUFBQyxDQUFBLE9BQW5CO1lBQ0ksSUFBQyxDQUFBLE9BQUQsR0FBVztZQUNYLE9BQUEsR0FBVSxJQUFJLElBQUosQ0FBUyxDQUFDLElBQUksS0FBSixDQUFVLElBQUksaUJBQUosQ0FBc0IsSUFBQyxDQUFBLE9BQXZCLENBQVYsQ0FBRCxDQUFULEVBQXFELElBQUksS0FBSixDQUFVLENBQUMsSUFBRCxDQUFWLENBQXJEO1lBQ1YsU0FBQSxHQUFZLElBQUksSUFBSixDQUFTLE9BQVQsRUFBa0IsQ0FBQyxJQUFJLFdBQUwsQ0FBbEI7WUFDWixTQUFTLENBQUMsMkJBQVYsQ0FBc0MsSUFBQyxDQUFBLFlBQXZDO0FBQ0EsbUJBQU8sU0FBUyxDQUFDLFdBQVYsQ0FBc0IsQ0FBdEIsRUFMWDs7UUFPQSxDQUFDLENBQUMsS0FBRixHQUFrQixHQUFBLENBQUksQ0FBSixFQUFPLFlBQVAsQ0FBQSxJQUF3QixJQUFDLENBQUEsU0FBRCxDQUFXLENBQUMsQ0FBQyxLQUFiO1FBQzFDLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBUixHQUFrQixHQUFBLENBQUksQ0FBSixFQUFPLGFBQVA7UUFDbEIsQ0FBQyxDQUFDLE1BQUYsSUFBa0I7UUFDbEIsT0FBTyxDQUFDLENBQUM7UUFDVCxPQUFPLENBQUMsQ0FBQztRQUNULE1BQUEsR0FBUztRQUNULEtBQUEsR0FBUztBQUNUO0FBQUEsYUFBQSx3Q0FBQTs7Z0JBQTBCLENBQUEsQ0FBQSxLQUFBLFlBQXFCLFNBQXJCO2dCQUN0QixDQUFDLENBQUMsS0FBSyxDQUFDLFNBQVIsQ0FBa0IsS0FBSyxDQUFDLFdBQU4sQ0FBa0IsQ0FBbEIsQ0FBbEI7O0FBREo7QUFFQTtBQUFBLGFBQUEsd0NBQUE7O2tCQUEwQixLQUFLLENBQUMsS0FBTixJQUFlLEtBQUEsWUFBaUI7OztBQUN0RDtBQUFBLGlCQUFBLHdDQUFBOztvQkFBc0IsQ0FBQSxDQUFBLENBQUEsWUFBaUIsU0FBakIsQ0FBQSxJQUErQixDQUFDLENBQUMsSUFBSSxDQUFDO29CQUN4RCxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQVIsQ0FBWSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQW5CLEVBQTBCLEtBQTFCLEVBQWlDLElBQWpDOztBQURKO1lBRUEsTUFBQSxHQUFTLElBQUksTUFBSixDQUFXLElBQUksS0FBSixDQUFVLElBQUksR0FBSjs7QUFBUTtBQUFBO3FCQUFBLHdDQUFBOztpQ0FBQSxDQUFDLENBQUMsV0FBRixDQUFjLENBQWQ7QUFBQTs7eUJBQVIsQ0FBVixDQUFYLEVBQytCLElBQUksS0FBSixDQUFVLElBQUksaUJBQUosQ0FBc0IsV0FBdEIsQ0FBVixDQUQvQjtBQUVUO0FBTEo7QUFNQTtBQUFBLGFBQUEsd0NBQUE7O1lBQ0ksSUFBRyxLQUFLLENBQUMsU0FBTixDQUFBLENBQUg7Z0JBQ0ksR0FBQSxHQUFNLEdBQUEsR0FBTSxLQUFLLENBQUMsV0FBTixDQUFrQixDQUFsQjtnQkFDWixJQUFzQyxLQUFLLENBQUMsS0FBNUM7b0JBQUEsR0FBQSxHQUFNLElBQUksRUFBSixDQUFPLEdBQVAsRUFBWSxHQUFaLEVBQWlCLEtBQUssQ0FBQyxLQUF2QixFQUFOOztnQkFDQSxLQUFLLENBQUMsSUFBTixDQUFXLElBQUksTUFBSixDQUFXLElBQUksS0FBSixDQUFVLEtBQUssQ0FBQyxJQUFoQixDQUFYLEVBQWtDLEdBQWxDLEVBQXVDLEdBQXZDLEVBQTRDO29CQUFBLEtBQUEsRUFBTyxJQUFQO2lCQUE1QyxDQUFYLEVBSEo7YUFBQSxNQUFBO2dCQUtJLEdBQUEsR0FBTTtnQkFDTixJQUFHLEtBQUssQ0FBQyxLQUFUO29CQUNJLEdBQUEsR0FBTSxJQUFJLE9BQUosQ0FBWSxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQVQsR0FBaUIsVUFBN0I7b0JBQ04sR0FBQSxHQUFNLElBQUksTUFBSixDQUFXLElBQUksS0FBSixDQUFVLEtBQUssQ0FBQyxJQUFoQixDQUFYLEVBQWtDLEtBQUssQ0FBQyxLQUF4QyxFQUErQyxHQUEvQztvQkFDTixLQUFLLENBQUMsSUFBTixDQUFXLElBQUksRUFBSixDQUFPLEdBQVAsRUFBWSxHQUFaLENBQVgsRUFISjtpQkFOSjs7WUFVQSxJQUFBLENBQXVCLE1BQXZCO2dCQUFBLE1BQU0sQ0FBQyxJQUFQLENBQVksR0FBWixFQUFBOztBQVhKO1FBWUEsUUFBQSxHQUFXLElBQUMsQ0FBQSxJQUFJLENBQUMsT0FBTixDQUFBO1FBQ1gsSUFBd0IsTUFBeEI7WUFBQSxLQUFLLENBQUMsT0FBTixDQUFjLE1BQWQsRUFBQTs7UUFDQSxJQUFzQyxLQUFLLENBQUMsTUFBNUM7WUFBQSxRQUFBLElBQUMsQ0FBQSxJQUFJLENBQUMsV0FBTixDQUFpQixDQUFDLE9BQWxCLGFBQTBCLEtBQTFCLEVBQUE7O0FBQ0EsYUFBQSxrREFBQTs7WUFDSSxNQUFPLENBQUEsQ0FBQSxDQUFQLEdBQVksQ0FBQyxDQUFDLGtCQUFGLENBQXFCLENBQXJCO1lBQ1osQ0FBQyxDQUFDLEtBQUssQ0FBQyxTQUFSLENBQWtCLGVBQUEsQ0FBZ0IsTUFBTyxDQUFBLENBQUEsQ0FBdkIsQ0FBbEI7QUFGSjtRQUdBLEtBQUEsR0FBUTtRQUVSLElBQUMsQ0FBQSxhQUFELENBQWUsU0FBQyxJQUFELEVBQU8sSUFBUDtZQUNYLElBQWtELGFBQVEsS0FBUixFQUFBLElBQUEsTUFBbEQ7Z0JBQUEsSUFBSSxDQUFDLEtBQUwsQ0FBVyw0QkFBQSxHQUE2QixJQUF4QyxFQUFBOzttQkFDQSxLQUFLLENBQUMsSUFBTixDQUFXLElBQVg7UUFGVyxDQUFmO1FBSUEsSUFBQSxDQUFBLENBQTBCLFFBQUEsSUFBWSxJQUFDLENBQUEsUUFBdkMsQ0FBQTtZQUFBLElBQUMsQ0FBQSxJQUFJLENBQUMsVUFBTixDQUFBLEVBQUE7O1FBQ0EsSUFBQSxHQUFPO1FBQ1AsSUFBZSxJQUFDLENBQUEsV0FBaEI7WUFBQSxJQUFBLElBQVEsSUFBUjs7UUFDQSxJQUF1QixJQUFDLENBQUEsSUFBeEI7WUFBQSxJQUFBLElBQVEsR0FBQSxHQUFNLElBQUMsQ0FBQSxLQUFmOztRQUNBLElBQUEsSUFBUTtRQUVSLE1BQUEsR0FBUyxDQUFDLElBQUMsQ0FBQSxRQUFELENBQVUsSUFBVixDQUFEO0FBRVQsYUFBQSxrREFBQTs7WUFDSSxJQUFHLENBQUg7Z0JBQVUsTUFBTSxDQUFDLElBQVAsQ0FBWSxJQUFDLENBQUEsUUFBRCxDQUFVLElBQVYsQ0FBWixFQUFWOztZQUNBLE1BQU0sQ0FBQyxJQUFQLGVBQVksQ0FBWjtBQUZKO1FBR0EsTUFBTSxDQUFDLElBQVAsQ0FBWSxJQUFDLENBQUEsUUFBRCxDQUFVLEtBQVYsQ0FBWjtRQUNBLElBQUEsQ0FBeUcsSUFBQyxDQUFBLElBQUksQ0FBQyxPQUFOLENBQUEsQ0FBekc7WUFBQSxNQUFBLEdBQVMsTUFBTSxDQUFDLE1BQVAsQ0FBYyxJQUFDLENBQUEsUUFBRCxDQUFVLElBQVYsQ0FBZCxFQUErQixJQUFDLENBQUEsSUFBSSxDQUFDLHVCQUFOLENBQThCLENBQTlCLENBQS9CLEVBQWlFLElBQUMsQ0FBQSxRQUFELENBQVUsSUFBQSxHQUFLLElBQUMsQ0FBQSxHQUFoQixDQUFqRSxFQUFUOztRQUNBLE1BQU0sQ0FBQyxJQUFQLENBQVksSUFBQyxDQUFBLFFBQUQsQ0FBVSxHQUFWLENBQVo7UUFFQSxJQUF1QyxJQUFDLENBQUEsSUFBeEM7QUFBQSxtQkFBUSxDQUFBLElBQUMsQ0FBQSxRQUFELENBQVUsSUFBQyxDQUFBLEdBQVgsQ0FBaUIsU0FBQSxXQUFBLE1BQUEsQ0FBQSxFQUF6Qjs7UUFDQSxJQUFHLElBQUMsQ0FBQSxLQUFELElBQVUsQ0FBQyxDQUFDLENBQUMsS0FBRixJQUFXLFlBQVosQ0FBYjttQkFBNEMsSUFBQyxDQUFBLFlBQUQsQ0FBYyxNQUFkLEVBQTVDO1NBQUEsTUFBQTttQkFBc0UsT0FBdEU7O0lBbkVTOzttQkFxRWIsYUFBQSxHQUFlLFNBQUMsUUFBRDtBQUNYLFlBQUE7QUFBQTtBQUFBO2FBQUEsd0NBQUE7O3lCQUFBLEtBQUssQ0FBQyxRQUFOLENBQWUsUUFBZjtBQUFBOztJQURXOzttQkFNZixnQkFBQSxHQUFrQixTQUFDLFVBQUQsRUFBYSxJQUFiO1FBRWQsSUFBMkIsVUFBM0I7bUJBQUEsMkNBQU0sVUFBTixFQUFrQixJQUFsQixFQUFBOztJQUZjOzs7O0dBakdZOztBQStHbEMsT0FBTyxDQUFDLEtBQVIsR0FBc0I7OztJQUVMLGVBQUMsS0FBRCxFQUFRLE1BQVIsRUFBZ0IsS0FBaEI7QUFDVCxZQUFBO1FBRFUsSUFBQyxDQUFBLE9BQUQ7UUFBTyxJQUFDLENBQUEsUUFBRDtRQUFRLElBQUMsQ0FBQSxRQUFEO1FBQ3pCLE9BQUEsR0FBVSxjQUFBLENBQWUsSUFBQyxDQUFBLElBQUksQ0FBQyxTQUFOLENBQUEsQ0FBaUIsQ0FBQyxLQUFqQztRQUNWLElBQXVCLE9BQXZCO1lBQUEsSUFBQyxDQUFBLElBQUksQ0FBQyxLQUFOLENBQVksT0FBWixFQUFBOztJQUZTOztvQkFRYixRQUFBLEdBQVUsQ0FBQyxNQUFELEVBQVMsT0FBVDs7b0JBRVYsa0JBQUEsR0FBb0IsU0FBQyxDQUFEO2VBRWhCLElBQUMsQ0FBQSxJQUFJLENBQUMsa0JBQU4sQ0FBeUIsQ0FBekIsRUFBNEIsVUFBNUI7SUFGZ0I7O29CQUlwQixXQUFBLEdBQWEsU0FBQyxDQUFEO0FBRVQsWUFBQTtRQUFBLElBQXFCLElBQUMsQ0FBQSxTQUF0QjtBQUFBLG1CQUFPLElBQUMsQ0FBQSxVQUFSOztRQUNBLElBQUEsR0FBTyxJQUFDLENBQUE7UUFDUixJQUFHLElBQUksRUFBQyxJQUFELEVBQVA7WUFDSSxJQUFBLEdBQU8sSUFBSSxDQUFDLFVBQVcsQ0FBQSxDQUFBLENBQUUsQ0FBQyxJQUFJLENBQUM7WUFDL0IsSUFBcUIsYUFBUSxZQUFSLEVBQUEsSUFBQSxNQUFyQjtnQkFBQSxJQUFBLEdBQU8sR0FBQSxHQUFJLEtBQVg7O1lBQ0EsSUFBQSxHQUFPLElBQUksaUJBQUosQ0FBc0IsQ0FBQyxDQUFDLEtBQUssQ0FBQyxZQUFSLENBQXFCLElBQXJCLENBQXRCLEVBSFg7U0FBQSxNQUlLLElBQUcsSUFBSSxDQUFDLFNBQUwsQ0FBQSxDQUFIO1lBQ0QsSUFBQSxHQUFPLElBQUksaUJBQUosQ0FBc0IsQ0FBQyxDQUFDLEtBQUssQ0FBQyxZQUFSLENBQXFCLEtBQXJCLENBQXRCLEVBRE47O1FBRUwsSUFBQSxHQUFPLElBQUksS0FBSixDQUFVLElBQVY7UUFDUCxJQUF5QixJQUFDLENBQUEsS0FBMUI7WUFBQSxJQUFBLEdBQU8sSUFBSSxLQUFKLENBQVUsSUFBVixFQUFQOztRQUNBLElBQUksQ0FBQywyQkFBTCxDQUFpQyxJQUFDLENBQUEsWUFBbEM7ZUFDQSxJQUFDLENBQUEsU0FBRCxHQUFhO0lBYko7O29CQWViLFNBQUEsR0FBVyxTQUFBO2VBRVAsSUFBQyxDQUFBLElBQUksQ0FBQyxTQUFOLENBQUE7SUFGTzs7b0JBVVgsUUFBQSxHQUFVLFNBQUMsUUFBRCxFQUFXLElBQVg7QUFFTixZQUFBOztZQUZpQixPQUFPLElBQUMsQ0FBQTs7UUFFekIsT0FBQSxHQUFVLFNBQUMsR0FBRDttQkFFTixRQUFBLENBQVMsR0FBQSxHQUFJLEdBQUcsQ0FBQyxVQUFXLENBQUEsQ0FBQSxDQUFFLENBQUMsSUFBSSxDQUFDLEtBQXBDLEVBQTZDLEdBQTdDO1FBRk07UUFJVixJQUFHLElBQUEsWUFBZ0IsaUJBQW5CO1lBQ0ksSUFBVSxJQUFBLFlBQWdCLFdBQTFCO0FBQUEsdUJBQUE7O0FBRUEsbUJBQU8sUUFBQSxDQUFTLElBQUksQ0FBQyxLQUFkLEVBQXFCLElBQXJCLEVBSFg7O1FBS0EsSUFBdUIsSUFBQSxZQUFnQixLQUF2QztBQUFBLG1CQUFPLE9BQUEsQ0FBUSxJQUFSLEVBQVA7O0FBRUE7QUFBQSxhQUFBLHdDQUFBOztZQUVJLElBQUcsR0FBQSxZQUFlLE1BQWYsSUFBOEIscUJBQWpDO2dCQUNJLEdBQUEsR0FBTSxHQUFHLENBQUMsU0FEZDs7WUFHQSxJQUFHLEdBQUEsWUFBZSxNQUFsQjtnQkFFSSxJQUFHLEdBQUcsQ0FBQyxLQUFKLFlBQXFCLE1BQXhCO29CQUNJLEdBQUEsR0FBTSxHQUFHLENBQUMsTUFEZDs7Z0JBRUEsSUFBQyxDQUFBLFFBQUQsQ0FBVSxRQUFWLEVBQW9CLEdBQUcsQ0FBQyxLQUFLLENBQUMsTUFBVixDQUFBLENBQXBCLEVBSko7YUFBQSxNQU1LLElBQUcsR0FBQSxZQUFlLEtBQWxCO2dCQUNELElBQUEsR0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQVQsQ0FBQTtnQkFFUCxRQUFBLENBQVMsSUFBSSxDQUFDLEtBQWQsRUFBcUIsSUFBckIsRUFIQzthQUFBLE1BS0EsSUFBRyxHQUFBLFlBQWUsS0FBbEI7Z0JBRUQsSUFBRyxHQUFHLENBQUMsT0FBSixDQUFBLENBQUEsSUFBaUIsR0FBRyxDQUFDLFFBQUosQ0FBQSxDQUFwQjtvQkFDSSxJQUFDLENBQUEsUUFBRCxDQUFVLFFBQVYsRUFBb0IsR0FBRyxDQUFDLElBQXhCLEVBREo7aUJBQUEsTUFHSyxJQUFHLEdBQUcsRUFBQyxJQUFELEVBQU47b0JBQ0QsT0FBQSxDQUFRLEdBQVIsRUFEQztpQkFBQSxNQUFBO29CQUtELFFBQUEsQ0FBUyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQWxCLEVBQXlCLEdBQUcsQ0FBQyxJQUE3QixFQUxDO2lCQUxKO2FBQUEsTUFXQSxJQUFHLENBQUEsQ0FBQSxHQUFBLFlBQW1CLFNBQW5CLENBQUg7Z0JBQ0QsR0FBRyxDQUFDLEtBQUosQ0FBVSxvQkFBQSxHQUFvQixDQUFDLEdBQUcsQ0FBQyxPQUFKLENBQUEsQ0FBRCxDQUE5QixFQURDOztBQTNCVDtJQWJNOzs7O0dBekNzQjs7QUE4RnBDLE9BQU8sQ0FBQyxLQUFSLEdBQXNCOzs7b0JBRWxCLFFBQUEsR0FBVSxDQUFDLE1BQUQ7O29CQUVWLFlBQUEsR0FBYzs7SUFFRCxlQUFDLElBQUQ7UUFDVCxJQUFDLENBQUEsSUFBRCxHQUFXLElBQUksQ0FBQyxPQUFSLEdBQXFCLElBQXJCLEdBQStCLElBQUksT0FBSixDQUFZLElBQVo7SUFEOUI7O29CQUdiLE9BQUEsR0FBUyxTQUFDLElBQUQ7ZUFDTCxJQUFDLENBQUEsSUFBSSxDQUFDLE9BQU4sQ0FBYyxJQUFkO0lBREs7O29CQUdULFdBQUEsR0FBYSxTQUFDLENBQUQ7ZUFDVCxJQUFDLENBQUEsSUFBSSxDQUFDLGtCQUFOLENBQXlCLENBQXpCO0lBRFM7O29CQUdiLE1BQUEsR0FBUSxTQUFBO2VBQUcsSUFBQyxDQUFBO0lBQUo7O0lBSVIsS0FBQyxDQUFBLG9CQUFELEdBQXVCLFNBQUMsQ0FBRCxFQUFJLElBQUosRUFBVSxLQUFWO0FBRW5CLFlBQUE7UUFBQSxLQUFBLEdBQVEsQ0FBQztBQUNBLGVBQU0sQ0FBQyxJQUFBLEdBQU8sSUFBSyxDQUFBLEVBQUUsS0FBRixDQUFiLENBQUEsSUFBMkIsQ0FBQSxDQUFBLElBQUEsWUFBb0IsS0FBcEIsQ0FBakM7QUFBVDtRQUFTO1FBQ1QsSUFBYSxLQUFBLElBQVMsSUFBSSxDQUFDLE1BQTNCO0FBQUEsbUJBQU8sR0FBUDs7UUFDQSxJQUFHLElBQUksQ0FBQyxNQUFMLEtBQWUsQ0FBbEI7WUFDSSxJQUFBLEdBQU8sSUFBSyxDQUFBLENBQUE7WUFDWixTQUFBLEdBQVksSUFBSSxDQUFDLGtCQUFMLENBQXdCLENBQXhCLEVBQTJCLFVBQTNCO1lBQ1osSUFBb0IsS0FBcEI7QUFBQSx1QkFBTyxVQUFQOztBQUNBLG1CQUFPLEVBQUUsQ0FBQyxNQUFILENBQVUsSUFBSSxDQUFDLFFBQUwsQ0FBZ0IsQ0FBRSxPQUFBLENBQVEsT0FBUixFQUFpQixDQUFqQixDQUFGLENBQUEsR0FBc0IsUUFBdEMsQ0FBVixFQUEwRCxTQUExRCxFQUFxRSxJQUFJLENBQUMsUUFBTCxDQUFjLEdBQWQsQ0FBckUsRUFKWDs7UUFLQSxJQUFBLEdBQU8sSUFBSztBQUNaLGFBQUEsZ0RBQUE7O1lBQ0ksWUFBQSxHQUFlLElBQUksQ0FBQyxrQkFBTCxDQUF3QixDQUF4QixFQUEyQixVQUEzQjtZQUNmLElBQUssQ0FBQSxDQUFBLENBQUwsR0FBYSxJQUFBLFlBQWdCLEtBQW5CLEdBQ0wsRUFBRSxDQUFDLE1BQUgsQ0FBVSxJQUFJLENBQUMsUUFBTCxDQUFnQixDQUFFLE9BQUEsQ0FBUSxPQUFSLEVBQWlCLENBQWpCLENBQUYsQ0FBQSxHQUFzQixRQUF0QyxDQUFWLEVBQTBELFlBQTFELEVBQXdFLElBQUksQ0FBQyxRQUFMLENBQWMsR0FBZCxDQUF4RSxDQURLLEdBRUwsRUFBRSxDQUFDLE1BQUgsQ0FBVSxJQUFJLENBQUMsUUFBTCxDQUFjLEdBQWQsQ0FBVixFQUE4QixZQUE5QixFQUE0QyxJQUFJLENBQUMsUUFBTCxDQUFjLEdBQWQsQ0FBNUM7QUFKVDtRQUtBLElBQUcsS0FBQSxLQUFTLENBQVo7WUFDSSxJQUFBLEdBQU8sSUFBSyxDQUFBLENBQUE7WUFDWixVQUFBLEdBQWMsSUFBSSxDQUFDLGtCQUFMLENBQXdCLElBQUssU0FBN0IsRUFBbUMsSUFBbkM7QUFDZCxtQkFBTyxJQUFLLENBQUEsQ0FBQSxDQUFFLENBQUMsTUFBUixDQUFlLElBQUksQ0FBQyxRQUFMLENBQWMsVUFBZCxDQUFmLEVBQTBDLFVBQTFDLEVBQXNELElBQUksQ0FBQyxRQUFMLENBQWMsR0FBZCxDQUF0RCxFQUhYOztRQUlBLElBQUE7O0FBQVE7QUFBQTtpQkFBQSx3Q0FBQTs7NkJBQUEsSUFBSSxDQUFDLGtCQUFMLENBQXdCLENBQXhCLEVBQTJCLFVBQTNCO0FBQUE7OztRQUNSLElBQUEsR0FBTyxJQUFLLENBQUEsQ0FBQSxDQUFFLENBQUMsa0JBQVIsQ0FBMkIsSUFBM0IsRUFBaUMsSUFBakM7UUFDUCxVQUFBLEdBQWEsSUFBSyxDQUFBLEtBQUEsQ0FBTSxDQUFDLGtCQUFaLENBQStCLElBQS9CLEVBQXFDLElBQXJDO1FBQ1A7ZUFDTixFQUFFLENBQUMsTUFBSCxDQUFVLElBQUssQ0FBQSxDQUFBLENBQUUsQ0FBQyxRQUFSLENBQWlCLEdBQWpCLENBQVYsRUFBaUMsSUFBakMsRUFBdUMsSUFBSyxDQUFBLEtBQUEsQ0FBTSxDQUFDLFFBQVosQ0FBcUIsV0FBckIsQ0FBdkMsRUFBMEUsVUFBMUUsRUFBc0YsSUFBSSxDQUFDLFFBQUwsQ0FBYyxHQUFkLENBQXRGO0lBeEJtQjs7OztHQW5CUzs7QUFxRHBDLE9BQU8sQ0FBQyxTQUFSLEdBQTBCOzs7Ozs7O3dCQUV0QixTQUFBLEdBQVc7O3dCQUVYLFdBQUEsR0FBYSxTQUFDLENBQUQ7ZUFDVCxJQUFDLENBQUEsS0FBRCxDQUFPLDRFQUFQO0lBRFM7O3dCQUdiLFdBQUEsR0FBYSxTQUFDLENBQUQ7ZUFDVDtJQURTOzt3QkFHYixRQUFBLEdBQVUsU0FBQyxRQUFELEdBQUE7Ozs7R0FWOEI7O0FBc0I1QyxPQUFPLENBQUMsS0FBUixHQUFzQjs7O0lBRUwsZUFBQyxTQUFELEVBQVksT0FBWjtRQUNULElBQUMsQ0FBQSxTQUFELHNCQUFnQixPQUFPLENBQUUsZ0JBQVosR0FBd0IsU0FBUyxDQUFDLE1BQVYsQ0FBQSxDQUF4QixHQUFnRDtRQUM3RCxJQUFDLENBQUEsS0FBRCxxQkFBZSxPQUFPLENBQUU7SUFGZjs7b0JBSWIsUUFBQSxHQUFVLENBQUMsV0FBRCxFQUFjLE9BQWQsRUFBdUIsTUFBdkI7O29CQUVWLFdBQUEsR0FBYTs7b0JBRWIsVUFBQSxHQUFZLFNBQUMsR0FBRDtRQUNSLElBQUcsR0FBSDttQkFDSSx1Q0FBQSxTQUFBLEVBREo7U0FBQSxNQUFBO1lBR0ksSUFBQyxDQUFBLE9BQUQsR0FBVyxDQUFJLElBQUMsQ0FBQSxLQUFELENBQU87Z0JBQUEsSUFBQSxFQUFNLElBQU47YUFBUDttQkFDZixLQUpKOztJQURROztvQkFPWixPQUFBLEdBQVMsU0FBQyxLQUFEO1FBQUMsSUFBQyxDQUFBLE9BQUQ7ZUFDTjtJQURLOztvQkFHVCxLQUFBLEdBQU8sU0FBQTtBQUNILFlBQUE7UUFBQyxjQUFlLElBQUMsQ0FBQTtRQUNqQixJQUFBLENBQWlCLFdBQVcsQ0FBQyxNQUE3QjtBQUFBLG1CQUFPLE1BQVA7O0FBQ0EsYUFBQSwrQ0FBQTs7WUFDSSxJQUFtQixRQUFBLEdBQVcsSUFBSSxDQUFDLEtBQUwsQ0FBVztnQkFBQSxJQUFBLEVBQU0sSUFBTjthQUFYLENBQTlCO0FBQUEsdUJBQU8sU0FBUDs7QUFESjtlQUVBO0lBTEc7O29CQVdQLFdBQUEsR0FBYSxTQUFDLENBQUQ7QUFDVCxZQUFBO1FBQUEsQ0FBQyxDQUFDLE1BQUYsSUFBWTtRQUNaLEdBQUEsR0FBZTtRQUNkLE9BQVU7UUFDWCxJQUFHLElBQUksQ0FBQyxPQUFMLENBQUEsQ0FBSDtZQUNJLElBQUEsR0FBTyxJQUFDLENBQUEsUUFBRCxDQUFVLEVBQVYsRUFEWDtTQUFBLE1BQUE7WUFHSSxJQUFHLElBQUMsQ0FBQSxPQUFKO2dCQUNJLElBQUksQ0FBQyxVQUFMLENBQWdCLElBQUEsR0FBTyxDQUFDLENBQUMsS0FBSyxDQUFDLFlBQVIsQ0FBcUIsU0FBckIsQ0FBdkI7Z0JBQ0EsR0FBQSxHQUFPLEVBQUEsR0FBRyxJQUFDLENBQUEsR0FBSixHQUFVLElBQVYsR0FBZSxXQUYxQjs7WUFHQSxJQUFHLElBQUMsQ0FBQSxLQUFKO2dCQUNJLElBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFqQixHQUEwQixDQUE3QjtvQkFDSSxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQWpCLENBQXlCLElBQUksRUFBSixDQUFPLENBQUMsSUFBSSxNQUFKLENBQVcsSUFBQyxDQUFBLEtBQVosQ0FBRCxDQUFtQixDQUFDLE1BQXBCLENBQUEsQ0FBUCxFQUFxQyxJQUFJLGdCQUFKLENBQXFCLFVBQXJCLENBQXJDLENBQXpCLEVBREo7aUJBQUEsTUFBQTtvQkFHSSxJQUEyQyxJQUFDLENBQUEsS0FBNUM7d0JBQUEsSUFBQSxHQUFPLEtBQUssQ0FBQyxJQUFOLENBQVcsQ0FBQyxJQUFJLEVBQUosQ0FBTyxJQUFDLENBQUEsS0FBUixFQUFlLElBQWYsQ0FBRCxDQUFYLEVBQVA7cUJBSEo7aUJBREo7O1lBS0EsSUFBQSxHQUFPLEVBQUUsQ0FBQyxNQUFILENBQVUsSUFBQyxDQUFBLFFBQUQsQ0FBVSxJQUFWLENBQVYsRUFBNEIsSUFBSSxDQUFDLGtCQUFMLENBQXdCLENBQXhCLEVBQTJCLFNBQTNCLENBQTVCLEVBQW1FLElBQUMsQ0FBQSxRQUFELENBQVUsSUFBQSxHQUFLLElBQUMsQ0FBQSxHQUFoQixDQUFuRSxFQVhYOztRQVlBLE1BQUEsR0FBUyxFQUFFLENBQUMsTUFBSCxDQUFVLElBQUMsQ0FBQSxRQUFELENBQVUsR0FBQSxHQUFNLElBQUMsQ0FBQSxHQUFQLEdBQWEsU0FBdkIsQ0FBVixFQUE2QyxJQUFDLENBQUEsU0FBUyxDQUFDLGtCQUFYLENBQThCLENBQTlCLEVBQWlDLFdBQWpDLENBQTdDLEVBQ0wsSUFBQyxDQUFBLFFBQUQsQ0FBVSxLQUFWLENBREssRUFDYSxJQURiLEVBQ21CLElBQUMsQ0FBQSxRQUFELENBQVUsR0FBVixDQURuQjtRQUVULElBQUcsSUFBQyxDQUFBLE9BQUo7WUFDSSxNQUFNLENBQUMsSUFBUCxDQUFZLElBQUMsQ0FBQSxRQUFELENBQVUsSUFBQSxHQUFLLElBQUMsQ0FBQSxHQUFOLEdBQVUsU0FBVixHQUFtQixJQUFuQixHQUF3QixHQUFsQyxDQUFaLEVBREo7O2VBRUE7SUFwQlM7Ozs7R0EvQm1COztBQTZEcEMsT0FBTyxDQUFDLEVBQVIsR0FBbUI7QUFDZixRQUFBOzs7O0lBQWEsWUFBQyxFQUFELEVBQUssS0FBTCxFQUFZLE1BQVosRUFBb0IsSUFBcEI7UUFDVCxJQUErQixFQUFBLEtBQU0sSUFBckM7QUFBQSxtQkFBTyxJQUFJLEVBQUosQ0FBTyxLQUFQLEVBQWMsTUFBZCxFQUFQOztRQUNBLElBQUcsRUFBQSxLQUFNLElBQVQ7QUFDSSxtQkFBTyxJQUFDLENBQUEsVUFBRCxDQUFZLEtBQVosRUFEWDs7UUFFQSxJQUFHLEVBQUEsS0FBTSxLQUFUO1lBQ0ksSUFBOEIsS0FBQSxZQUFpQixJQUFqQixJQUEwQixDQUFJLEtBQUssRUFBQyxFQUFELEVBQW5DLElBQTJDLENBQUksS0FBSyxDQUFDLEtBQW5GO0FBQUEsdUJBQU8sS0FBSyxDQUFDLFdBQU4sQ0FBQSxFQUFQOztZQUNBLElBQWdDLEtBQUEsWUFBaUIsSUFBakIsSUFBMEIsS0FBSyxDQUFDLEtBQWhDLElBQXlDLEtBQUssRUFBQyxFQUFELEVBQTlFO2dCQUFBLEtBQUEsR0FBUSxJQUFJLE1BQUosQ0FBVyxLQUFYLEVBQVI7YUFGSjs7UUFHQSxJQUFDLENBQUEsUUFBRCxHQUFZLFdBQVksQ0FBQSxFQUFBLENBQVosSUFBbUI7UUFDL0IsSUFBQyxDQUFBLEtBQUQsR0FBWTtRQUNaLElBQUMsQ0FBQSxNQUFELEdBQVk7UUFDWixJQUFDLENBQUEsSUFBRCxHQUFZLENBQUMsQ0FBQztBQUNkLGVBQU87SUFYRTs7SUFhYixXQUFBLEdBQ0k7UUFBQSxJQUFBLEVBQWEsS0FBYjtRQUNBLElBQUEsRUFBYSxLQURiO1FBRUEsSUFBQSxFQUFhLElBRmI7UUFHQSxXQUFBLEVBQWEsUUFIYjs7O0lBS0osVUFBQSxHQUNJO1FBQUEsS0FBQSxFQUFPLEtBQVA7UUFDQSxLQUFBLEVBQU8sS0FEUDs7O2lCQUdKLFFBQUEsR0FBVSxDQUFDLE9BQUQsRUFBVSxRQUFWOztpQkFFVixRQUFBLEdBQVUsU0FBQTtBQUNOLFlBQUE7ZUFBQSxJQUFDLENBQUEsT0FBRCxDQUFBLENBQUEsSUFBZSxTQUFBLElBQUMsQ0FBQSxTQUFELEtBQWMsR0FBZCxJQUFBLElBQUEsS0FBbUIsR0FBbkIsQ0FBZixJQUNJLElBQUMsQ0FBQSxLQUFELFlBQWtCLEtBRHRCLElBQ2dDLElBQUMsQ0FBQSxLQUFLLENBQUMsUUFBUCxDQUFBO0lBRjFCOztpQkFJVixPQUFBLEdBQVMsU0FBQTtBQUNMLFlBQUE7dUJBQUEsSUFBQyxDQUFBLFNBQUQsS0FBYyxPQUFkLElBQUEsSUFBQSxLQUF1QjtJQURsQjs7aUJBR1QsT0FBQSxHQUFTLFNBQUE7ZUFDTCxDQUFJLElBQUMsQ0FBQTtJQURBOztpQkFHVCxTQUFBLEdBQVcsU0FBQTtlQUNQLENBQUksSUFBQyxDQUFBLFFBQUQsQ0FBQTtJQURHOztpQkFLWCxXQUFBLEdBQWEsU0FBQTtBQUNULFlBQUE7dUJBQUEsSUFBQyxDQUFBLFNBQUQsS0FBYyxHQUFkLElBQUEsSUFBQSxLQUFtQixHQUFuQixJQUFBLElBQUEsS0FBd0IsSUFBeEIsSUFBQSxJQUFBLEtBQThCLElBQTlCLElBQUEsSUFBQSxLQUFvQyxLQUFwQyxJQUFBLElBQUEsS0FBMkM7SUFEbEM7O2lCQUdiLE1BQUEsR0FBUSxTQUFBO0FBQ0osWUFBQTtRQUFBLElBQUcsSUFBQyxDQUFBLFdBQUQsQ0FBQSxDQUFBLElBQW1CLElBQUMsQ0FBQSxLQUFLLENBQUMsV0FBUCxDQUFBLENBQXRCO1lBQ0ksYUFBQSxHQUFnQjtZQUNoQixJQUFBLEdBQU87QUFDUCxtQkFBTSxJQUFBLElBQVMsSUFBSSxDQUFDLFFBQXBCO2dCQUNJLGtCQUFBLGdCQUFvQixJQUFJLENBQUMsUUFBTCxJQUFpQjtnQkFDckMsSUFBQSxHQUFPLElBQUksQ0FBQztZQUZoQjtZQUdBLElBQUEsQ0FBd0MsYUFBeEM7QUFBQSx1QkFBTyxJQUFJLE1BQUosQ0FBVyxJQUFYLENBQWdCLENBQUMsTUFBakIsQ0FBQSxFQUFQOztZQUNBLElBQUEsR0FBTztBQUNQLG1CQUFNLElBQUEsSUFBUyxJQUFJLENBQUMsUUFBcEI7Z0JBQ0ksSUFBSSxDQUFDLE1BQUwsR0FBYyxDQUFDLElBQUksQ0FBQztnQkFDcEIsSUFBSSxDQUFDLFFBQUwsR0FBZ0IsVUFBVyxDQUFBLElBQUksQ0FBQyxRQUFMO2dCQUMzQixJQUFBLEdBQU8sSUFBSSxDQUFDO1lBSGhCO21CQUlBLEtBWko7U0FBQSxNQWFLLElBQUcsRUFBQSxHQUFLLFVBQVcsQ0FBQSxJQUFDLENBQUEsUUFBRCxDQUFuQjtZQUNELElBQUMsQ0FBQSxRQUFELEdBQVk7WUFDWixJQUFHLElBQUMsQ0FBQSxLQUFLLENBQUMsTUFBUCxDQUFBLENBQUEsWUFBMkIsRUFBOUI7Z0JBQ0ksSUFBQyxDQUFBLEtBQUssQ0FBQyxNQUFQLENBQUEsRUFESjs7bUJBRUEsS0FKQztTQUFBLE1BS0EsSUFBRyxJQUFDLENBQUEsTUFBSjttQkFDRCxJQUFJLE1BQUosQ0FBVyxJQUFYLENBQWdCLENBQUMsTUFBakIsQ0FBQSxFQURDO1NBQUEsTUFFQSxJQUFHLElBQUMsQ0FBQSxRQUFELEtBQWEsR0FBYixJQUFxQixDQUFDLEdBQUEsR0FBTSxJQUFDLENBQUEsS0FBSyxDQUFDLE1BQVAsQ0FBQSxDQUFQLENBQUEsWUFBbUMsRUFBeEQsSUFDb0QsU0FBQSxHQUFHLENBQUMsU0FBSixLQUFpQixHQUFqQixJQUFBLElBQUEsS0FBc0IsSUFBdEIsSUFBQSxJQUFBLEtBQTRCLFlBQTVCLENBRHZEO21CQUVELElBRkM7U0FBQSxNQUFBO21CQUlELElBQUksRUFBSixDQUFPLEdBQVAsRUFBWSxJQUFaLEVBSkM7O0lBckJEOztpQkEyQlIsVUFBQSxHQUFZLFNBQUMsQ0FBRDtBQUNSLFlBQUE7ZUFBQSxTQUFBLElBQUMsQ0FBQSxTQUFELEtBQWMsSUFBZCxJQUFBLElBQUEsS0FBb0IsSUFBcEIsSUFBQSxJQUFBLEtBQTBCLFFBQTFCLENBQUEsSUFBd0MsVUFBQSxDQUFXLENBQVgsRUFBYyxJQUFkLEVBQW9CLE9BQXBCO0lBRGhDOztpQkFHWixVQUFBLEdBQVksU0FBQyxHQUFEO0FBQ1IsWUFBQTtRQUFBLFlBQUEsR0FBZTtRQUNmLElBQUEsR0FBVSxHQUFBLFlBQWUsTUFBZixJQUEwQixDQUFDLEdBQUEsR0FBTSxHQUFHLENBQUMsS0FBSyxDQUFDLE1BQVYsQ0FBQSxDQUFQLENBQUEsWUFBc0MsSUFBbkUsR0FDSCxHQURHLEdBR0g7QUFDSjtBQUFBLGFBQUEsd0NBQUE7O1lBQ0ksSUFBRyxLQUFLLENBQUMsS0FBVDtnQkFDSSxZQUFZLENBQUMsSUFBYixDQUFrQixLQUFLLENBQUMsS0FBeEI7Z0JBQ0EsT0FBTyxLQUFLLENBQUMsTUFGakI7YUFBQSxNQUFBO2dCQUlJLFlBQVksQ0FBQyxJQUFiLENBQWtCLEtBQWxCLEVBSko7O0FBREo7UUFNQSxJQUFBLEdBQU8sSUFBSSxJQUFKLENBQVMsR0FBVCxFQUFjLFlBQWQ7UUFDUCxJQUFJLEVBQUMsRUFBRCxFQUFKLEdBQVU7ZUFDVjtJQWRROztpQkFnQlosV0FBQSxHQUFhLFNBQUMsQ0FBRDtBQUNULFlBQUE7UUFBQSxPQUFBLEdBQVUsSUFBQyxDQUFBLFdBQUQsQ0FBQSxDQUFBLElBQW1CLElBQUMsQ0FBQSxLQUFLLENBQUMsV0FBUCxDQUFBO1FBRzdCLElBQUEsQ0FBNkIsT0FBN0I7WUFBQSxJQUFDLENBQUEsS0FBSyxDQUFDLEtBQVAsR0FBZSxJQUFDLENBQUEsTUFBaEI7O1FBQ0EsSUFBRyxJQUFDLENBQUEsUUFBRCxLQUFhLFFBQWIsSUFBMEIsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFSLENBQWMsSUFBQyxDQUFBLEtBQUssQ0FBQyxTQUFQLENBQUEsQ0FBa0IsQ0FBQyxLQUFqQyxDQUE3QjtZQUNJLElBQUMsQ0FBQSxLQUFELENBQU8sMkNBQVAsRUFESjs7UUFFQSxZQUFHLElBQUMsQ0FBQSxTQUFELEtBQWMsSUFBZCxJQUFBLElBQUEsS0FBb0IsSUFBdkI7WUFDSSxPQUFBLEdBQVUsY0FBQSxDQUFlLElBQUMsQ0FBQSxLQUFLLENBQUMsU0FBUCxDQUFBLENBQWtCLENBQUMsS0FBbEM7WUFDVixJQUF3QixPQUF4QjtnQkFBQSxJQUFDLENBQUEsS0FBSyxDQUFDLEtBQVAsQ0FBYSxPQUFiLEVBQUE7YUFGSjs7UUFHQSxJQUEwQixJQUFDLENBQUEsT0FBRCxDQUFBLENBQTFCO0FBQUEsbUJBQU8sSUFBQyxDQUFBLFlBQUQsQ0FBYyxDQUFkLEVBQVA7O1FBQ0EsSUFBMEIsSUFBQyxDQUFBLE9BQUQsQ0FBQSxDQUExQjtBQUFBLG1CQUFPLElBQUMsQ0FBQSxZQUFELENBQWMsQ0FBZCxFQUFQOztRQUNBLElBQTBCLE9BQTFCO0FBQUEsbUJBQU8sSUFBQyxDQUFBLFlBQUQsQ0FBYyxDQUFkLEVBQVA7O0FBQ0EsZ0JBQU8sSUFBQyxDQUFBLFFBQVI7QUFBQSxpQkFDUyxHQURUO3VCQUNxQixJQUFDLENBQUEsZ0JBQUQsQ0FBa0IsQ0FBbEI7QUFEckIsaUJBRVMsSUFGVDt1QkFFbUIsSUFBQyxDQUFBLFlBQUQsQ0FBYyxDQUFkO0FBRm5CLGlCQUdTLElBSFQ7dUJBR21CLElBQUMsQ0FBQSxvQkFBRCxDQUFzQixDQUF0QjtBQUhuQixpQkFJUyxJQUpUO3VCQUltQixJQUFDLENBQUEsYUFBRCxDQUFlLENBQWY7QUFKbkI7Z0JBTVEsR0FBQSxHQUFNLElBQUMsQ0FBQSxLQUFLLENBQUMsa0JBQVAsQ0FBMEIsQ0FBMUIsRUFBNkIsUUFBN0I7Z0JBQ04sR0FBQSxHQUFNLElBQUMsQ0FBQSxNQUFNLENBQUMsa0JBQVIsQ0FBMkIsQ0FBM0IsRUFBOEIsUUFBOUI7Z0JBQ04sTUFBQSxHQUFTLEVBQUUsQ0FBQyxNQUFILENBQVUsR0FBVixFQUFlLElBQUMsQ0FBQSxRQUFELENBQVUsR0FBQSxHQUFJLElBQUMsQ0FBQSxRQUFMLEdBQWMsR0FBeEIsQ0FBZixFQUE0QyxHQUE1QztnQkFDVCxJQUFHLENBQUMsQ0FBQyxLQUFGLElBQVcsUUFBZDsyQkFBNEIsT0FBNUI7aUJBQUEsTUFBQTsyQkFBd0MsSUFBQyxDQUFBLFlBQUQsQ0FBYyxNQUFkLEVBQXhDOztBQVRSO0lBYlM7O2lCQThCYixZQUFBLEdBQWMsU0FBQyxDQUFEO0FBQ1YsWUFBQTtRQUFBLE9BQTBCLElBQUMsQ0FBQSxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQWQsQ0FBb0IsQ0FBcEIsQ0FBMUIsRUFBQyxJQUFDLENBQUEsS0FBSyxDQUFDLGdCQUFSLEVBQWdCO1FBQ2hCLEdBQUEsR0FBTSxJQUFDLENBQUEsS0FBSyxDQUFDLGtCQUFQLENBQTBCLENBQTFCLEVBQTZCLFFBQTdCO1FBQ04sU0FBQSxHQUFZLEdBQUcsQ0FBQyxNQUFKLENBQVcsSUFBQyxDQUFBLFFBQUQsQ0FBVSxHQUFBLEdBQUcsQ0FBSSxJQUFDLENBQUEsTUFBSixHQUFnQixJQUFoQixHQUEwQixJQUEzQixDQUFILEdBQW1DLEdBQTdDLENBQVgsRUFDUCxNQUFNLENBQUMsa0JBQVAsQ0FBMEIsQ0FBMUIsQ0FETyxFQUN1QixJQUFDLENBQUEsUUFBRCxDQUFVLEdBQUEsR0FBSSxJQUFDLENBQUEsUUFBTCxHQUFjLEdBQXhCLENBRHZCLEVBQ3FELElBQUMsQ0FBQSxNQUFNLENBQUMsa0JBQVIsQ0FBMkIsQ0FBM0IsRUFBOEIsUUFBOUIsQ0FEckQ7ZUFFWixJQUFDLENBQUEsWUFBRCxDQUFjLFNBQWQ7SUFMVTs7aUJBUWQsZ0JBQUEsR0FBa0IsU0FBQyxDQUFEO0FBQ2QsWUFBQTtRQUFBLElBQUcsSUFBQyxDQUFBLEtBQUssQ0FBQyxTQUFQLENBQUEsQ0FBSDtZQUNJLEdBQUEsR0FBTSxJQUFJLGlCQUFKLENBQXNCLENBQUMsQ0FBQyxLQUFLLENBQUMsWUFBUixDQUFxQixLQUFyQixDQUF0QjtZQUNOLEdBQUEsR0FBTSxJQUFJLE1BQUosQ0FBVyxJQUFJLE1BQUosQ0FBVyxHQUFYLEVBQWdCLElBQUMsQ0FBQSxLQUFqQixDQUFYLEVBRlY7U0FBQSxNQUFBO1lBSUksR0FBQSxHQUFNLElBQUMsQ0FBQTtZQUNQLEdBQUEsR0FBTSxJQUxWOztlQU1BLElBQUksRUFBSixDQUFPLElBQUksU0FBSixDQUFjLEdBQWQsQ0FBUCxFQUEyQixHQUEzQixFQUFnQztZQUFBLElBQUEsRUFBTSxJQUFOO1NBQWhDLENBQTJDLENBQUMsT0FBNUMsQ0FBb0QsSUFBQyxDQUFBLE1BQXJELENBQTRELENBQUMsa0JBQTdELENBQWdGLENBQWhGO0lBUGM7O2lCQVVsQixZQUFBLEdBQWMsU0FBQyxDQUFEO0FBQ1YsWUFBQTtRQUFBLEtBQUEsR0FBUTtRQUNSLEVBQUEsR0FBSyxJQUFDLENBQUE7UUFDTixLQUFLLENBQUMsSUFBTixDQUFXLENBQUMsSUFBQyxDQUFBLFFBQUQsQ0FBVSxFQUFWLENBQUQsQ0FBWDtRQUNBLElBQUcsRUFBQSxLQUFNLEdBQU4sSUFBYyxJQUFDLENBQUEsS0FBRCxZQUFrQixTQUFuQztZQUNJLElBQUMsQ0FBQSxLQUFLLENBQUMsT0FBUCxHQUFpQixDQUFJLElBQUMsQ0FBQSxLQUFLLENBQUM7QUFDNUIsbUJBQU8sSUFBQyxDQUFBLEtBQUssQ0FBQyxrQkFBUCxDQUEwQixDQUExQixFQUZYOztRQUdBLElBQUcsQ0FBQyxDQUFDLEtBQUYsSUFBVyxZQUFkO0FBQ0ksbUJBQU8sQ0FBQyxJQUFJLE1BQUosQ0FBVyxJQUFYLENBQUQsQ0FBaUIsQ0FBQyxrQkFBbEIsQ0FBcUMsQ0FBckMsRUFEWDs7UUFFQSxTQUFBLEdBQVksRUFBQSxLQUFPLEdBQVAsSUFBQSxFQUFBLEtBQVk7UUFDeEIsSUFBK0IsQ0FBQSxFQUFBLEtBQU8sS0FBUCxJQUFBLEVBQUEsS0FBYyxRQUFkLElBQUEsRUFBQSxLQUF3QixRQUF4QixDQUFBLElBQ0ssU0FBQSxJQUFjLElBQUMsQ0FBQSxLQUFELFlBQWtCLEVBQWhDLElBQXVDLElBQUMsQ0FBQSxLQUFLLENBQUMsUUFBUCxLQUFtQixFQUQ5RjtZQUFBLEtBQUssQ0FBQyxJQUFOLENBQVcsQ0FBQyxJQUFDLENBQUEsUUFBRCxDQUFVLEdBQVYsQ0FBRCxDQUFYLEVBQUE7O1FBRUEsSUFBRyxDQUFDLFNBQUEsSUFBYyxJQUFDLENBQUEsS0FBRCxZQUFrQixFQUFqQyxDQUFBLElBQXdDLENBQUMsRUFBQSxLQUFNLEtBQU4sSUFBZ0IsSUFBQyxDQUFBLEtBQUssQ0FBQyxXQUFQLENBQW1CLENBQW5CLENBQWpCLENBQTNDO1lBQ0ksSUFBQyxDQUFBLEtBQUQsR0FBUyxJQUFJLE1BQUosQ0FBVyxJQUFDLENBQUEsS0FBWixFQURiOztRQUVBLEtBQUssQ0FBQyxJQUFOLENBQVcsSUFBQyxDQUFBLEtBQUssQ0FBQyxrQkFBUCxDQUEwQixDQUExQixFQUE2QixRQUE3QixDQUFYO1FBQ0EsSUFBbUIsSUFBQyxDQUFBLElBQXBCO1lBQUEsS0FBSyxDQUFDLE9BQU4sQ0FBQSxFQUFBOztlQUNBLElBQUMsQ0FBQSxrQkFBRCxDQUFvQixLQUFwQixFQUEyQixFQUEzQjtJQWhCVTs7aUJBa0JkLFlBQUEsR0FBYyxTQUFDLENBQUQ7QUFDVixZQUFBO1FBQUEsS0FBQSxHQUFRO1FBQ1IsRUFBQSxHQUFLLElBQUMsQ0FBQTtRQUNOLElBQU8sc0JBQVA7WUFDSSxJQUFDLENBQUEsS0FBRCxDQUFPLHVDQUFQLEVBREo7O1FBRUEsSUFBRyxhQUFnQixNQUFNLENBQUMsSUFBUCxDQUFZLElBQUMsQ0FBQSxLQUFiLENBQWhCLEVBQUEsWUFBQSxNQUFBLElBQXdDLENBQUksQ0FBQyxJQUFDLENBQUEsS0FBRCxZQUFrQixLQUFuQixDQUEvQztZQUNJLElBQStELDZCQUEvRDtnQkFBQSxLQUFLLENBQUMsSUFBTixDQUFXLElBQUMsQ0FBQSxLQUFLLENBQUMsVUFBVSxDQUFDLGtCQUFsQixDQUFxQyxDQUFyQyxFQUF3QyxRQUF4QyxDQUFYLEVBQUE7YUFESjtTQUFBLE1BQUE7WUFHSSxJQUE4QixDQUFDLENBQUMsS0FBRixJQUFXLFdBQXpDO2dCQUFBLEtBQUssQ0FBQyxJQUFOLENBQVcsQ0FBQyxJQUFDLENBQUEsUUFBRCxDQUFVLEdBQVYsQ0FBRCxDQUFYLEVBQUE7O1lBQ0EsS0FBSyxDQUFDLElBQU4sQ0FBVyxDQUFDLElBQUMsQ0FBQSxRQUFELENBQVUsRUFBVixDQUFELENBQVg7WUFDQSw0Q0FBeUMsQ0FBRSxlQUFiLEtBQXNCLEVBQXBEO2dCQUFBLEtBQUssQ0FBQyxJQUFOLENBQVcsQ0FBQyxJQUFDLENBQUEsUUFBRCxDQUFVLEdBQVYsQ0FBRCxDQUFYLEVBQUE7O1lBQ0EsS0FBSyxDQUFDLElBQU4sQ0FBVyxJQUFDLENBQUEsS0FBSyxDQUFDLGtCQUFQLENBQTBCLENBQTFCLEVBQTZCLFFBQTdCLENBQVg7WUFDQSxJQUE4QixDQUFDLENBQUMsS0FBRixJQUFXLFdBQXpDO2dCQUFBLEtBQUssQ0FBQyxJQUFOLENBQVcsQ0FBQyxJQUFDLENBQUEsUUFBRCxDQUFVLEdBQVYsQ0FBRCxDQUFYLEVBQUE7YUFQSjs7ZUFRQSxJQUFDLENBQUEsa0JBQUQsQ0FBb0IsS0FBcEIsRUFBMkIsRUFBM0I7SUFiVTs7aUJBZWQsWUFBQSxHQUFjLFNBQUMsQ0FBRDtBQUVWLFlBQUE7UUFBQSxHQUFBLEdBQU0sSUFBSSxLQUFKLENBQVUsSUFBSSxpQkFBSixDQUFzQixNQUF0QixDQUFWLEVBQXlDLENBQUMsSUFBSSxNQUFKLENBQVcsSUFBSSxZQUFKLENBQWlCLEtBQWpCLENBQVgsQ0FBRCxDQUF6QztlQUNOLElBQUksSUFBSixDQUFTLEdBQVQsRUFBYyxDQUFDLElBQUMsQ0FBQSxLQUFGLEVBQVMsSUFBQyxDQUFBLE1BQVYsQ0FBZCxDQUFnQyxDQUFDLGtCQUFqQyxDQUFvRCxDQUFwRDtJQUhVOztpQkFLZCxvQkFBQSxHQUFzQixTQUFDLENBQUQ7QUFDbEIsWUFBQTtRQUFBLEtBQUEsR0FBUSxJQUFJLEtBQUosQ0FBVSxJQUFJLGlCQUFKLENBQXNCLE1BQXRCLENBQVYsRUFBeUMsQ0FBQyxJQUFJLE1BQUosQ0FBVyxJQUFJLFlBQUosQ0FBaUIsT0FBakIsQ0FBWCxDQUFELENBQXpDO1FBQ1IsTUFBQSxHQUFZLElBQUMsQ0FBQSxNQUFNLENBQUMsU0FBUixDQUFBLENBQUgsR0FBNEIsSUFBSSxNQUFKLENBQVcsSUFBQyxDQUFBLE1BQVosQ0FBNUIsR0FBb0QsSUFBQyxDQUFBO1FBQzlELEdBQUEsR0FBTSxJQUFJLEVBQUosQ0FBTyxHQUFQLEVBQVksSUFBQyxDQUFBLEtBQWIsRUFBb0IsTUFBcEI7ZUFDTixJQUFJLElBQUosQ0FBUyxLQUFULEVBQWdCLENBQUMsR0FBRCxDQUFoQixDQUFzQixDQUFDLGtCQUF2QixDQUEwQyxDQUExQztJQUprQjs7aUJBTXRCLGFBQUEsR0FBZSxTQUFDLENBQUQ7QUFDWCxZQUFBO1FBQUEsR0FBQSxHQUFNLElBQUksS0FBSixDQUFVLElBQUksT0FBSixDQUFZLE9BQUEsQ0FBUSxRQUFSLEVBQWtCLENBQWxCLENBQVosQ0FBVjtlQUNOLElBQUksSUFBSixDQUFTLEdBQVQsRUFBYyxDQUFDLElBQUMsQ0FBQSxLQUFGLEVBQVMsSUFBQyxDQUFBLE1BQVYsQ0FBZCxDQUFnQyxDQUFDLGtCQUFqQyxDQUFvRCxDQUFwRDtJQUZXOztpQkFJZixRQUFBLEdBQVUsU0FBQyxHQUFEO2VBQ04saUNBQU0sR0FBTixFQUFXLElBQUMsQ0FBQSxXQUFXLENBQUMsSUFBYixHQUFvQixHQUFwQixHQUEwQixJQUFDLENBQUEsUUFBdEM7SUFETTs7OztHQTFMZ0I7O0FBbU05QixPQUFPLENBQUMsRUFBUixHQUFtQjs7O0lBRUYsWUFBQyxNQUFELEVBQVUsS0FBVjtRQUFDLElBQUMsQ0FBQSxTQUFEO1FBQVMsSUFBQyxDQUFBLFFBQUQ7SUFBVjs7aUJBRWIsUUFBQSxHQUFVLENBQUMsUUFBRCxFQUFXLE9BQVg7O2lCQUVWLE1BQUEsR0FBUTs7aUJBRVIsV0FBQSxHQUFhLFNBQUMsQ0FBRDtBQUNULFlBQUE7UUFBQSxJQUFHLElBQUMsQ0FBQSxLQUFELFlBQWtCLEtBQWxCLElBQTRCLElBQUMsQ0FBQSxLQUFLLENBQUMsT0FBUCxDQUFBLENBQTVCLElBQWlELElBQUMsQ0FBQSxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUF4RTtBQUNJO0FBQUEsaUJBQUEsd0NBQUE7O3NCQUFvQyxHQUFBLFlBQWU7OztnQkFDL0MsUUFBQSxHQUFXO0FBQ1g7QUFGSjtZQUlBLElBQUEsQ0FBK0IsUUFBL0I7QUFBQSx1QkFBTyxJQUFDLENBQUEsYUFBRCxDQUFlLENBQWYsRUFBUDthQUxKOztlQU1BLElBQUMsQ0FBQSxlQUFELENBQWlCLENBQWpCO0lBUFM7O2lCQVNiLGFBQUEsR0FBZSxTQUFDLENBQUQ7QUFDWCxZQUFBO1FBQUEsT0FBYSxJQUFDLENBQUEsTUFBTSxDQUFDLEtBQVIsQ0FBYyxDQUFkLEVBQWlCLFFBQWpCLENBQWIsRUFBQyxhQUFELEVBQU07UUFDTixPQUFnQixJQUFDLENBQUEsT0FBSixHQUFpQixDQUFDLE9BQUQsRUFBVSxNQUFWLENBQWpCLEdBQXdDLENBQUMsT0FBRCxFQUFVLE1BQVYsQ0FBckQsRUFBQyxhQUFELEVBQU07UUFDTixLQUFBLEdBQVE7QUFDUjtBQUFBLGFBQUEsZ0RBQUE7O1lBQ0ksSUFBRyxDQUFIO2dCQUFVLEtBQUssQ0FBQyxJQUFOLENBQVcsSUFBQyxDQUFBLFFBQUQsQ0FBVSxHQUFWLENBQVgsRUFBVjs7WUFDQSxLQUFBLEdBQVEsS0FBSyxDQUFDLE1BQU4sQ0FBYSxDQUFJLENBQUgsR0FBVSxHQUFWLEdBQW1CLEdBQXBCLENBQWIsRUFBdUMsSUFBQyxDQUFBLFFBQUQsQ0FBVSxHQUFWLENBQXZDLEVBQXVELElBQUksQ0FBQyxrQkFBTCxDQUF3QixDQUF4QixFQUEyQixZQUEzQixDQUF2RDtBQUZaO1FBR0EsSUFBRyxDQUFDLENBQUMsS0FBRixHQUFVLFFBQWI7bUJBQTJCLE1BQTNCO1NBQUEsTUFBQTttQkFBc0MsSUFBQyxDQUFBLFlBQUQsQ0FBYyxLQUFkLEVBQXRDOztJQVBXOztpQkFTZixlQUFBLEdBQWlCLFNBQUMsQ0FBRDtBQUNiLFlBQUE7UUFBQSxPQUFhLElBQUMsQ0FBQSxNQUFNLENBQUMsS0FBUixDQUFjLENBQWQsRUFBaUIsVUFBakIsQ0FBYixFQUFDLGFBQUQsRUFBTTtRQUNOLFNBQUEsR0FBWSxFQUFFLENBQUMsTUFBSCxDQUFVLElBQUMsQ0FBQSxRQUFELENBQVUsT0FBQSxDQUFRLFNBQVIsRUFBbUIsQ0FBbkIsQ0FBQSxHQUF3QixRQUFsQyxDQUFWLEVBQXVELElBQUMsQ0FBQSxLQUFLLENBQUMsa0JBQVAsQ0FBMEIsQ0FBMUIsRUFBNkIsVUFBN0IsQ0FBdkQsRUFDUixJQUFDLENBQUEsUUFBRCxDQUFVLElBQVYsQ0FEUSxFQUNTLEdBRFQsRUFDYyxJQUFDLENBQUEsUUFBRCxDQUFVLElBQUEsR0FBTyxDQUFHLElBQUMsQ0FBQSxPQUFKLEdBQWlCLEtBQWpCLEdBQTRCLE1BQTVCLENBQWpCLENBRGQ7UUFFWixJQUFvQixlQUFBLENBQWdCLEdBQWhCLENBQUEsS0FBd0IsZUFBQSxDQUFnQixHQUFoQixDQUE1QztBQUFBLG1CQUFPLFVBQVA7O1FBQ0EsU0FBQSxHQUFZLEdBQUcsQ0FBQyxNQUFKLENBQVcsSUFBQyxDQUFBLFFBQUQsQ0FBVSxJQUFWLENBQVgsRUFBNEIsU0FBNUI7UUFDWixJQUFHLENBQUMsQ0FBQyxLQUFGLEdBQVUsVUFBYjttQkFBNkIsVUFBN0I7U0FBQSxNQUFBO21CQUE0QyxJQUFDLENBQUEsWUFBRCxDQUFjLFNBQWQsRUFBNUM7O0lBTmE7O2lCQVFqQixRQUFBLEdBQVUsU0FBQyxHQUFEO2VBQ04saUNBQU0sR0FBTixFQUFXLElBQUMsQ0FBQSxXQUFXLENBQUMsSUFBYixHQUFvQixDQUFHLElBQUMsQ0FBQSxPQUFKLEdBQWlCLEdBQWpCLEdBQTBCLEVBQTFCLENBQS9CO0lBRE07Ozs7R0FsQ2dCOztBQTZDOUIsT0FBTyxDQUFDLEdBQVIsR0FBb0I7OztJQUVILGFBQUMsT0FBRCxFQUFXLGFBQVgsRUFBMkIsUUFBM0IsRUFBc0MsTUFBdEM7UUFBQyxJQUFDLENBQUEsVUFBRDtRQUFVLElBQUMsQ0FBQSxnQkFBRDtRQUFnQixJQUFDLENBQUEsV0FBRDtRQUFXLElBQUMsQ0FBQSxTQUFEO0lBQXRDOztrQkFFYixRQUFBLEdBQVUsQ0FBQyxTQUFELEVBQVksVUFBWixFQUF3QixRQUF4Qjs7a0JBRVYsV0FBQSxHQUFhOztrQkFFYixLQUFBLEdBQU8sU0FBQyxDQUFEO0FBQU8sWUFBQTtlQUFBLElBQUMsQ0FBQSxPQUFPLENBQUMsS0FBVCxDQUFlLENBQWYsQ0FBQSwwQ0FBOEIsQ0FBRSxLQUFYLENBQWlCLENBQWpCO0lBQTVCOztrQkFFUCxVQUFBLEdBQVksU0FBQyxHQUFEO1FBQ1IsSUFBd0MsSUFBQyxDQUFBLE9BQXpDO1lBQUEsSUFBQyxDQUFBLE9BQUQsR0FBWSxJQUFDLENBQUEsT0FBUSxDQUFDLFVBQVYsQ0FBcUIsR0FBckIsRUFBWjs7UUFDQSxJQUF3QyxJQUFDLENBQUEsUUFBekM7WUFBQSxJQUFDLENBQUEsUUFBRCxHQUFZLElBQUMsQ0FBQSxRQUFRLENBQUMsVUFBVixDQUFxQixHQUFyQixFQUFaOztlQUNBO0lBSFE7O2tCQU9aLFdBQUEsR0FBYSxTQUFDLENBQUQ7QUFDVCxZQUFBO1FBQUEsQ0FBQyxDQUFDLE1BQUYsSUFBWTtRQUNaLE9BQUEsR0FBWSxJQUFDLENBQUEsT0FBTyxDQUFDLGtCQUFULENBQTRCLENBQTVCLEVBQStCLFNBQS9CO1FBRVosU0FBQSxHQUFlLElBQUMsQ0FBQSxRQUFKLEdBQ1IsQ0FBQSwwQkFBQSxHQUE2QixDQUFDLENBQUMsS0FBSyxDQUFDLFlBQVIsQ0FBcUIsT0FBckIsRUFBOEI7WUFBQSxPQUFBLEVBQVMsS0FBVDtTQUE5QixDQUE3QixFQUNBLFdBQUEsR0FBYyxJQUFJLGlCQUFKLENBQXNCLDBCQUF0QixDQURkLEVBRUcsSUFBQyxDQUFBLGFBQUosR0FDSSxDQUFBLE9BQUEsR0FBVSxjQUFBLENBQWUsSUFBQyxDQUFBLGFBQWEsQ0FBQyxTQUFmLENBQUEsQ0FBMEIsQ0FBQyxLQUExQyxDQUFWLEVBQ2dDLE9BQWhDLEdBQUEsSUFBQyxDQUFBLGFBQWEsQ0FBQyxLQUFmLENBQXFCLE9BQXJCLENBQUEsR0FBQSxNQURBLEVBRUEsSUFBQyxDQUFBLFFBQVEsQ0FBQyxPQUFWLENBQWtCLElBQUksTUFBSixDQUFXLElBQUMsQ0FBQSxhQUFaLEVBQTJCLFdBQTNCLENBQWxCLENBRkEsQ0FESixHQUFBLE1BRkEsRUFNQSxFQUFFLENBQUMsTUFBSCxDQUFVLElBQUMsQ0FBQSxRQUFELENBQVUsVUFBVixDQUFWLEVBQWlDLFdBQVcsQ0FBQyxrQkFBWixDQUErQixDQUEvQixDQUFqQyxFQUFvRSxJQUFDLENBQUEsUUFBRCxDQUFVLE9BQVYsQ0FBcEUsRUFDSSxJQUFDLENBQUEsUUFBUSxDQUFDLGtCQUFWLENBQTZCLENBQTdCLEVBQWdDLFNBQWhDLENBREosRUFDZ0QsSUFBQyxDQUFBLFFBQUQsQ0FBVSxJQUFBLEdBQUssSUFBQyxDQUFBLEdBQU4sR0FBVSxHQUFwQixDQURoRCxDQU5BLENBRFEsR0FTUCxDQUFBLENBQU8sSUFBQyxDQUFBLE1BQUQsSUFBVyxJQUFDLENBQUEsUUFBbkIsQ0FBQSxHQUNELENBQUEsMEJBQUEsR0FBNkIsQ0FBQyxDQUFDLEtBQUssQ0FBQyxZQUFSLENBQXFCLE9BQXJCLEVBQThCO1lBQUEsT0FBQSxFQUFTLEtBQVQ7U0FBOUIsQ0FBN0IsRUFDQSxDQUFDLElBQUMsQ0FBQSxRQUFELENBQVUsVUFBQSxHQUFXLDBCQUFYLEdBQXNDLE1BQWhELENBQUQsQ0FEQSxDQURDLEdBSUQ7UUFFSixVQUFBLEdBQWdCLElBQUMsQ0FBQSxNQUFKLEdBQWlCLEVBQUUsQ0FBQyxNQUFILENBQVUsSUFBQyxDQUFBLFFBQUQsQ0FBVSxjQUFWLENBQVYsRUFBcUMsSUFBQyxDQUFBLE1BQU0sQ0FBQyxrQkFBUixDQUEyQixDQUEzQixFQUE4QixTQUE5QixDQUFyQyxFQUMxQixJQUFDLENBQUEsUUFBRCxDQUFVLElBQUEsR0FBSyxJQUFDLENBQUEsR0FBTixHQUFVLEdBQXBCLENBRDBCLENBQWpCLEdBQ3FCO2VBRWxDLEVBQUUsQ0FBQyxNQUFILENBQVUsSUFBQyxDQUFBLFFBQUQsQ0FBYSxJQUFDLENBQUEsR0FBRixHQUFNLFNBQWxCLENBQVYsRUFDSSxPQURKLEVBRUksSUFBQyxDQUFBLFFBQUQsQ0FBVSxJQUFBLEdBQUssSUFBQyxDQUFBLEdBQU4sR0FBVSxHQUFwQixDQUZKLEVBRTZCLFNBRjdCLEVBRXdDLFVBRnhDO0lBdEJTOzs7O0dBakJlOztBQW1EaEMsT0FBTyxDQUFDLEtBQVIsR0FBc0I7OztJQUVMLGVBQUMsVUFBRDtRQUFDLElBQUMsQ0FBQSxhQUFEO0lBQUQ7O29CQUViLFFBQUEsR0FBVSxDQUFDLFlBQUQ7O29CQUVWLFdBQUEsR0FBYTs7b0JBQ2IsS0FBQSxHQUFhOztvQkFHYixVQUFBLEdBQVk7O29CQUVaLFdBQUEsR0FBYSxTQUFDLENBQUQ7ZUFDVCxFQUFFLENBQUMsTUFBSCxDQUFVLElBQUMsQ0FBQSxRQUFELENBQVUsSUFBQyxDQUFBLEdBQUQsR0FBTyxRQUFqQixDQUFWLEVBQXNDLElBQUMsQ0FBQSxVQUFVLENBQUMsa0JBQVosQ0FBK0IsQ0FBL0IsQ0FBdEMsRUFBeUUsSUFBQyxDQUFBLFFBQUQsQ0FBVSxHQUFWLENBQXpFO0lBRFM7Ozs7R0FabUI7O0FBeUJwQyxPQUFPLENBQUMsU0FBUixHQUEwQjs7O0lBRVQsbUJBQUMsVUFBRDtRQUFDLElBQUMsQ0FBQSxhQUFEO0lBQUQ7O3dCQUViLFFBQUEsR0FBVSxDQUFDLFlBQUQ7O3dCQUVWLE1BQUEsR0FBUTs7d0JBRVIsV0FBQSxHQUFhLFNBQUMsQ0FBRDtBQUNULFlBQUE7UUFBQSxJQUFDLENBQUEsVUFBVSxDQUFDLEtBQVosR0FBb0IsSUFBQyxDQUFBO1FBQ3JCLElBQUEsR0FBTyxJQUFDLENBQUEsVUFBVSxDQUFDLE9BQVosQ0FBb0IsQ0FBcEIsRUFBdUIsUUFBdkI7UUFDUCxJQUFHLElBQUMsQ0FBQSxVQUFVLENBQUMsTUFBWixDQUFBLENBQUEsWUFBZ0MsaUJBQWhDLElBQXNELENBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFSLENBQWMsSUFBZCxDQUE3RDtZQUNJLE9BQWdCLElBQUMsQ0FBQSxPQUFKLEdBQWlCLENBQUMsS0FBRCxFQUFRLElBQVIsQ0FBakIsR0FBb0MsQ0FBQyxLQUFELEVBQVEsSUFBUixDQUFqRCxFQUFDLGFBQUQsRUFBTTtZQUNOLElBQUEsR0FBTyxTQUFBLEdBQVUsSUFBVixHQUFlLEdBQWYsR0FBa0IsR0FBbEIsR0FBc0IsaUJBQXRCLEdBQXVDLEdBQXZDLEdBQTJDLEdBQTNDLEdBQThDLElBQTlDLEdBQW1ELEdBQW5ELEdBQXNELEdBQXRELEdBQTBELFFBRnJFO1NBQUEsTUFBQTtZQUtJLElBQUEsR0FBVSxJQUFELEdBQU0sR0FBTixHQUFRLENBQUksSUFBQyxDQUFBLE9BQUosR0FBaUIsSUFBakIsR0FBMkIsSUFBNUIsQ0FBUixHQUF5QyxRQUx0RDs7ZUFNQSxDQUFDLElBQUMsQ0FBQSxRQUFELENBQWEsQ0FBQyxDQUFDLEtBQUYsSUFBVyxVQUFkLEdBQThCLElBQTlCLEdBQXdDLEdBQUEsR0FBSSxJQUFKLEdBQVMsR0FBM0QsQ0FBRDtJQVRTOzs7O0dBUjJCOztBQStCNUMsT0FBTyxDQUFDLE1BQVIsR0FBdUI7OztJQUVOLGdCQUFDLEtBQUQ7UUFBQyxJQUFDLENBQUEsT0FBRDtJQUFEOztxQkFFYixRQUFBLEdBQVUsQ0FBQyxNQUFEOztxQkFFVixNQUFBLEdBQVcsU0FBQTtlQUFHLElBQUMsQ0FBQTtJQUFKOztxQkFDWCxTQUFBLEdBQVcsU0FBQTtlQUFHLElBQUMsQ0FBQSxJQUFJLENBQUMsU0FBTixDQUFBO0lBQUg7O3FCQUVYLFdBQUEsR0FBYSxTQUFDLENBQUQ7QUFDVCxZQUFBO1FBQUEsSUFBQSxHQUFPLElBQUMsQ0FBQSxJQUFJLENBQUMsTUFBTixDQUFBO1FBQ1AsSUFBRyxJQUFBLFlBQWdCLEtBQWhCLElBQTBCLElBQUksQ0FBQyxRQUFMLENBQUEsQ0FBN0I7WUFDSSxJQUFJLENBQUMsS0FBTCxHQUFhLElBQUMsQ0FBQTtBQUNkLG1CQUFPLElBQUksQ0FBQyxrQkFBTCxDQUF3QixDQUF4QixFQUZYOztRQUdBLFNBQUEsR0FBWSxJQUFJLENBQUMsa0JBQUwsQ0FBd0IsQ0FBeEIsRUFBMkIsV0FBM0I7UUFDWixJQUFBLEdBQU8sQ0FBQyxDQUFDLEtBQUYsR0FBVSxRQUFWLElBQXVCLENBQUMsSUFBQSxZQUFnQixFQUFoQixJQUFzQixJQUFBLFlBQWdCLElBQXRDLElBQzNCLENBQUMsSUFBQSxZQUFnQixHQUFoQixJQUF3QixJQUFJLENBQUMsT0FBOUIsQ0FEMEIsQ0FBdkIsSUFDeUMsQ0FBQyxDQUFDLENBQUMsS0FBRixHQUFVLFVBQVYsSUFDekMsU0FBUyxDQUFDLE1BQVYsSUFBb0IsQ0FEb0I7UUFFaEQsSUFBRyxJQUFIO21CQUFhLFVBQWI7U0FBQSxNQUFBO21CQUE0QixJQUFDLENBQUEsWUFBRCxDQUFjLFNBQWQsRUFBNUI7O0lBVFM7Ozs7R0FUcUI7O0FBNEJ0QyxPQUFPLENBQUMsd0JBQVIsR0FBeUM7Ozs7Ozs7dUNBRXJDLFdBQUEsR0FBYSxTQUFDLENBQUQ7QUFNVCxZQUFBO1FBQUEsSUFBQSxDQUFPLENBQUMsQ0FBQyxvQkFBVDtBQUNJLG1CQUFPLDJEQUFBLFNBQUEsRUFEWDs7UUFHQSxJQUFBLEdBQU8sSUFBQyxDQUFBLElBQUksQ0FBQyxNQUFOLENBQUE7UUFFUCxRQUFBLEdBQVc7UUFDWCxJQUFJLENBQUMsZ0JBQUwsQ0FBc0IsS0FBdEIsRUFBMEIsU0FBQyxJQUFEO1lBQ3RCLElBQUcsSUFBQSxZQUFnQixhQUFuQjtnQkFDSSxRQUFRLENBQUMsSUFBVCxDQUFjLElBQWQ7QUFDQSx1QkFBTyxLQUZYO2FBQUEsTUFHSyxJQUFHLElBQUEsWUFBZ0IsTUFBbkI7Z0JBQ0QsUUFBUSxDQUFDLElBQVQsQ0FBYyxJQUFkO0FBQ0EsdUJBQU8sTUFGTjs7QUFHTCxtQkFBTztRQVBlLENBQTFCO1FBU0EsU0FBQSxHQUFZO1FBQ1osU0FBUyxDQUFDLElBQVYsQ0FBZSxJQUFDLENBQUEsUUFBRCxDQUFVLEdBQVYsQ0FBZjtBQUNBLGFBQUEsNENBQUE7O1lBQ0ksSUFBRyxPQUFBLFlBQW1CLGFBQXRCO2dCQUNJLEtBQUEsR0FBUSxPQUFPLENBQUMsS0FBTTtnQkFFdEIsS0FBQSxHQUFRLEtBQUssQ0FBQyxPQUFOLENBQWMsZ0JBQWQsRUFBZ0MsU0FBQyxLQUFELEVBQVEsV0FBUixFQUFxQixXQUFyQjtvQkFDcEMsSUFBRyxXQUFXLENBQUMsTUFBWixHQUFxQixDQUFyQixLQUEwQixDQUE3QjsrQkFDTyxXQUFELEdBQWEsSUFBYixHQUFpQixZQUR2QjtxQkFBQSxNQUFBOytCQUdJLE1BSEo7O2dCQURvQyxDQUFoQztnQkFLUixTQUFTLENBQUMsSUFBVixDQUFlLElBQUMsQ0FBQSxRQUFELENBQVUsS0FBVixDQUFmLEVBUko7YUFBQSxNQUFBO2dCQVVJLFNBQVMsQ0FBQyxJQUFWLENBQWUsSUFBQyxDQUFBLFFBQUQsQ0FBVSxJQUFWLENBQWY7Z0JBQ0EsU0FBUyxDQUFDLElBQVYsa0JBQWUsT0FBTyxDQUFDLGtCQUFSLENBQTJCLENBQTNCLEVBQThCLFdBQTlCLENBQWY7Z0JBQ0EsU0FBUyxDQUFDLElBQVYsQ0FBZSxJQUFDLENBQUEsUUFBRCxDQUFVLEdBQVYsQ0FBZixFQVpKOztBQURKO1FBY0EsU0FBUyxDQUFDLElBQVYsQ0FBZSxJQUFDLENBQUEsUUFBRCxDQUFVLEdBQVYsQ0FBZjtlQUVBO0lBdkNTOzs7O0dBRnlEOztBQXlEMUUsT0FBTyxDQUFDLEdBQVIsR0FBb0I7OztJQUNILGFBQUMsSUFBRCxFQUFPLE1BQVA7QUFDVCxZQUFBO1FBQUMsSUFBQyxDQUFBLGdCQUFBLE1BQUYsRUFBVSxJQUFDLENBQUEsZUFBQSxLQUFYLEVBQWtCLElBQUMsQ0FBQSxjQUFBLElBQW5CLEVBQXlCLElBQUMsQ0FBQSxjQUFBLElBQTFCLEVBQWdDLElBQUMsQ0FBQSxlQUFBO1FBQ2pDLElBQUMsQ0FBQSxJQUFELEdBQVUsS0FBSyxDQUFDLElBQU4sQ0FBVyxDQUFDLElBQUQsQ0FBWDtRQUNWLElBQUMsQ0FBQSxHQUFELEdBQVUsQ0FBQyxDQUFDLE1BQU0sQ0FBQztRQUNuQixJQUFDLENBQUEsTUFBRCxHQUFVLENBQUMsQ0FBQyxNQUFNLENBQUM7UUFDbkIsSUFBQyxDQUFBLElBQUQsR0FBVSxDQUFDLENBQUMsTUFBTSxDQUFDO1FBQ25CLElBQWlELElBQUMsQ0FBQSxJQUFELElBQVUsSUFBQyxDQUFBLEtBQTVEO1lBQUEsSUFBQyxDQUFBLEtBQUssQ0FBQyxLQUFQLENBQWEsZ0NBQWIsRUFBQTs7UUFDQSxJQUFtRixJQUFDLENBQUEsR0FBRCxJQUFTLENBQUksSUFBQyxDQUFBLE1BQWpHO1lBQUEsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFkLENBQW9CLDBCQUFBLEdBQTBCLENBQUksSUFBQyxDQUFBLElBQUosR0FBYyxNQUFkLEdBQTBCLElBQTNCLENBQTlDLEVBQUE7O1FBQ0EsSUFBcUMsSUFBQyxDQUFBLE1BQXRDO1lBQUEsT0FBa0IsQ0FBQyxJQUFDLENBQUEsS0FBRixFQUFTLElBQUMsQ0FBQSxJQUFWLENBQWxCLEVBQUMsSUFBQyxDQUFBLGNBQUYsRUFBUSxJQUFDLENBQUEsZ0JBQVQ7O1FBQ0EsSUFBZ0UsSUFBQyxDQUFBLEtBQUQsWUFBa0IsS0FBbEIsSUFBNEIsQ0FBSSxJQUFDLENBQUEsS0FBSyxDQUFDLFlBQVAsQ0FBQSxDQUFoRztZQUFBLElBQUMsQ0FBQSxLQUFLLENBQUMsS0FBUCxDQUFhLCtDQUFiLEVBQUE7O1FBQ0EsSUFBQyxDQUFBLEtBQUQsR0FBVyxJQUFDLENBQUEsTUFBRCxZQUFtQixLQUFuQixJQUE2QixJQUFDLENBQUEsTUFBTSxDQUFDLElBQVIsWUFBd0IsS0FBckQsSUFBK0QsQ0FBSSxJQUFDLENBQUEsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUF0RixJQUFpRyxDQUFJLElBQUMsQ0FBQTtRQUNqSCxJQUFDLENBQUEsT0FBRCxHQUFXLElBQUMsQ0FBQSxJQUFELFlBQWlCO1FBQzVCLElBQXNELElBQUMsQ0FBQSxLQUFELElBQVcsSUFBQyxDQUFBLEtBQWxFO1lBQUEsSUFBQyxDQUFBLEtBQUssQ0FBQyxLQUFQLENBQWEscUNBQWIsRUFBQTs7UUFDQSxJQUF1RCxJQUFDLENBQUEsS0FBRCxJQUFXLElBQUMsQ0FBQSxPQUFuRTtZQUFBLElBQUMsQ0FBQSxJQUFJLENBQUMsS0FBTixDQUFZLHVDQUFaLEVBQUE7O1FBQ0EsSUFBQyxDQUFBLE9BQUQsR0FBVztJQWRGOztrQkFnQmIsUUFBQSxHQUFVLENBQUMsTUFBRCxFQUFTLFFBQVQsRUFBbUIsT0FBbkIsRUFBNEIsTUFBNUI7O2tCQU1WLFdBQUEsR0FBYSxTQUFDLENBQUQ7QUFDVCxZQUFBO1FBQUEsSUFBQSxHQUFjLEtBQUssQ0FBQyxJQUFOLENBQVcsQ0FBQyxJQUFDLENBQUEsSUFBRixDQUFYO1FBQ2QsT0FBYyxJQUFJLENBQUMsV0FBbkIsRUFBTTtRQUNOLG9CQUFvQixJQUFJLENBQUUsS0FBTixDQUFBLFdBQUEsWUFBeUIsTUFBN0M7WUFBQSxJQUFDLENBQUEsT0FBRCxHQUFjLE1BQWQ7O1FBQ0EsTUFBQSxHQUFpQixJQUFDLENBQUEsS0FBSixHQUFlLElBQUMsQ0FBQSxNQUFNLENBQUMsSUFBdkIsR0FBaUMsSUFBQyxDQUFBO1FBQ2hELEtBQUEsR0FBYyxDQUFDLENBQUM7UUFDaEIsSUFBMEQsQ0FBSSxJQUFDLENBQUEsT0FBL0Q7WUFBQSxJQUFBLEdBQWMsSUFBQyxDQUFBLElBQUQsSUFBVyxDQUFDLElBQUMsQ0FBQSxJQUFJLENBQUMsT0FBTixDQUFjLENBQWQsRUFBaUIsVUFBakIsQ0FBRCxFQUF6Qjs7UUFDQSxLQUFBLEdBQWMsSUFBQyxDQUFBLEtBQUQsSUFBVyxDQUFDLElBQUMsQ0FBQSxLQUFLLENBQUMsT0FBUCxDQUFlLENBQWYsRUFBa0IsVUFBbEIsQ0FBRDtRQUN6QixJQUFxQixJQUFBLElBQVMsQ0FBSSxJQUFDLENBQUEsT0FBbkM7WUFBQSxLQUFLLENBQUMsSUFBTixDQUFXLElBQVgsRUFBQTs7UUFDQSxJQUFxQixLQUFBLElBQVUsQ0FBQSxDQUFBLElBQUMsQ0FBQSxLQUFELFlBQXNCLEtBQXRCLENBQS9CO1lBQUEsS0FBSyxDQUFDLElBQU4sQ0FBVyxLQUFYLEVBQUE7O1FBQ0EsSUFBdUMsSUFBQyxDQUFBLE9BQXhDO1lBQUEsSUFBQSxHQUFPLEtBQUssQ0FBQyxZQUFOLENBQW1CLFNBQW5CLEVBQVA7O1FBQ0EsSUFBRyxJQUFDLENBQUEsSUFBSjtZQUNJLElBQStDLElBQUMsQ0FBQSxPQUFoRDtnQkFBQSxJQUFBLEdBQU8sS0FBSyxDQUFDLFlBQU4sQ0FBbUIsR0FBbkIsRUFBd0I7b0JBQUEsTUFBQSxFQUFRLElBQVI7aUJBQXhCLEVBQVA7YUFESjtTQUFBLE1BQUE7WUFHSSxJQUFBLEdBQU8sQ0FBQyxJQUFDLENBQUEsTUFBRCxJQUFZLEtBQWIsQ0FBQSxJQUF1QixLQUFLLENBQUMsWUFBTixDQUFtQixHQUFuQixFQUF3QjtnQkFBQSxNQUFBLEVBQVEsSUFBUjthQUF4QixFQUhsQzs7UUFJQSxJQUFBLEdBQU8sQ0FBQyxDQUFDLElBQUMsQ0FBQSxLQUFELElBQVUsSUFBQyxDQUFBLElBQVosQ0FBQSxJQUFzQixJQUF2QixDQUFBLElBQWdDLEtBQWhDLElBQXlDO1FBQ2hELFVBQUEsR0FBaUIsSUFBQSxLQUFRLElBQVgsR0FBd0IsSUFBRCxHQUFNLEtBQTdCLEdBQXVDO1FBQ3JELElBQUcsSUFBQyxDQUFBLElBQUQsSUFBVSxDQUFJLElBQUMsQ0FBQSxLQUFsQjtZQUNJLE9BQWtCLElBQUMsQ0FBQSxvQkFBRCxDQUFzQixJQUFDLENBQUEsSUFBSSxDQUFDLEtBQU4sQ0FBWSxDQUFaLEVBQWUsVUFBZixFQUEyQixxQkFBM0IsQ0FBdEIsQ0FBbEIsRUFBQyxjQUFELEVBQU87WUFDUCxJQUE0QixJQUFDLENBQUEsSUFBSSxDQUFDLFFBQU4sQ0FBQSxDQUE1QjtnQkFBQSxPQUFBLEdBQVUsTUFBQSxDQUFPLE9BQVAsRUFBVjthQUZKOztRQUdBLElBQW9CLElBQUMsQ0FBQSxPQUFyQjtZQUFBLElBQUEsR0FBWSxLQUFaOztRQUNBLE9BQUEsR0FBWTtRQUNaLFNBQUEsR0FBWTtRQUNaLE9BQUEsR0FBWTtRQUNaLElBQUEsR0FBWSxJQUFDLENBQUEsR0FBRCxHQUFPO1FBQ25CLElBQUcsSUFBQyxDQUFBLEtBQUo7WUFDSSxnQkFBQSxHQUFtQixNQUFNLENBQUMsa0JBQVAsQ0FBMEIsS0FBQSxDQUFNLENBQU4sRUFDekM7Z0JBQUMsS0FBQSxFQUFPLElBQVI7Z0JBQWMsTUFBQSxJQUFkO2dCQUFxQixNQUFELElBQUMsQ0FBQSxJQUFyQjtnQkFBMkIsU0FBQSxFQUFXLHFCQUF0QzthQUR5QyxDQUExQixFQUR2QjtTQUFBLE1BQUE7WUFJSSxJQUFBLEdBQU8sSUFBQyxDQUFBLE1BQU0sQ0FBQyxPQUFSLENBQWdCLENBQWhCLEVBQW1CLFVBQW5CO1lBQ1AsSUFBRyxDQUFDLElBQUEsSUFBUSxJQUFDLENBQUEsR0FBVixDQUFBLElBQW1CLENBQUEsQ0FBQSxJQUFDLENBQUEsTUFBTSxDQUFDLE1BQVIsQ0FBQSxDQUFBLFlBQWdDLGlCQUFoQyxDQUF0QjtnQkFDSSxPQUFBLElBQVcsRUFBQSxHQUFHLElBQUMsQ0FBQSxHQUFKLEdBQVMsQ0FBQyxHQUFBLEdBQU0sS0FBSyxDQUFDLFlBQU4sQ0FBbUIsS0FBbkIsQ0FBUCxDQUFULEdBQXlDLEtBQXpDLEdBQThDLElBQTlDLEdBQW1EO2dCQUM5RCxJQUFBLEdBQU8sSUFGWDs7WUFHQSxJQUFHLElBQUEsSUFBUyxDQUFJLElBQUMsQ0FBQSxPQUFkLElBQTBCLENBQUksSUFBQyxDQUFBLElBQWxDO2dCQUNJLFFBQUEsR0FBYyxJQUFELEdBQU0sS0FBTixHQUFXLElBQVgsR0FBZ0IsR0FBaEIsR0FBbUIsSUFBbkIsR0FBd0IsSUFEekM7O1lBRUEsSUFBRyxDQUFJLElBQUMsQ0FBQSxNQUFMLElBQWdCLENBQUksSUFBQyxDQUFBLElBQXhCO2dCQUNJLElBQWtDLElBQUEsS0FBUSxPQUExQztvQkFBQSxPQUFBLElBQVcsRUFBQSxHQUFHLElBQUMsQ0FBQSxHQUFKLEdBQVUsSUFBVixHQUFlLE1BQTFCOztnQkFDQSxJQUFBLEdBQU8sT0FBQSxHQUFVO2dCQUNqQixJQUFBLENBQUEsQ0FBdUMsSUFBQyxDQUFBLElBQUQsSUFBVSxpQkFBVixJQUF1QixJQUE5RCxDQUFBO29CQUFBLElBQUEsR0FBTyxLQUFLLENBQUMsWUFBTixDQUFtQixLQUFuQixFQUFQOztnQkFDQSxPQUFBLEdBQVUsRUFBQSxHQUFHLFVBQUgsR0FBZ0IsSUFBaEIsR0FBcUIsUUFBckIsR0FBNkIsSUFBN0IsR0FBa0MsS0FBbEMsR0FBdUMsSUFBdkMsR0FBNEM7Z0JBQ3RELFdBQUEsR0FBYyxFQUFBLEdBQUcsVUFBSCxHQUFnQixJQUFoQixHQUFxQixLQUFyQixHQUEwQixJQUExQixHQUErQjtnQkFDN0MsT0FBQSxHQUFhLElBQUQsR0FBTSxLQUFOLEdBQVc7Z0JBQ3ZCLFdBQUEsR0FBaUIsSUFBRCxHQUFNO2dCQUN0QixJQUFHLElBQUMsQ0FBQSxJQUFKO29CQUNJLElBQUcsZUFBSDt3QkFDSSxJQUFHLElBQUg7NEJBQ0ksT0FBQSxHQUFVOzRCQUNWLE9BQUEsR0FBVSxZQUZkO3lCQURKO3FCQUFBLE1BQUE7d0JBS0ksT0FBQSxHQUFhLE9BQUQsR0FBUyxTQUFULEdBQWtCLE9BQWxCLEdBQTBCLEtBQTFCLEdBQStCO3dCQUMzQyxPQUFBLEdBQVUsR0FBQSxHQUFJLE9BQUosR0FBWSxVQUFaLEdBQXNCLE9BQXRCLEdBQThCLE1BQTlCLEdBQW9DLFdBQXBDLEdBQWdELElBTjlEOztvQkFPQSxTQUFBLEdBQWUsSUFBRCxHQUFNLE1BQU4sR0FBWSxRQVI5QjtpQkFBQSxNQUFBO29CQVVJLFNBQUEsR0FBWSxFQUFBLEdBQUUsQ0FBSSxJQUFBLEtBQVEsSUFBWCxHQUFxQixJQUFBLEdBQUssSUFBMUIsR0FBeUMsSUFBRCxHQUFNLElBQS9DLEVBVmxCOztnQkFXQSxnQkFBQSxHQUFtQixDQUFDLElBQUMsQ0FBQSxRQUFELENBQWEsT0FBRCxHQUFTLElBQVQsR0FBYSxPQUFiLEdBQXFCLElBQXJCLEdBQXlCLFVBQXpCLEdBQXNDLFNBQWxELENBQUQsRUFuQnZCO2FBVko7O1FBOEJBLElBQUcsSUFBQyxDQUFBLE9BQUo7WUFDSSxVQUFBLEdBQWUsRUFBQSxHQUFHLElBQUMsQ0FBQSxHQUFKLEdBQVUsSUFBVixHQUFlO1lBQzlCLFlBQUEsR0FBZSxJQUFBLEdBQUssSUFBQyxDQUFBLEdBQU4sR0FBVSxTQUFWLEdBQW1CLElBQW5CLEdBQXdCO1lBQ3ZDLElBQUksQ0FBQyxVQUFMLENBQWdCLElBQWhCLEVBSEo7O1FBSUEsSUFBRyxJQUFDLENBQUEsS0FBSjtZQUNJLElBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFqQixHQUEwQixDQUE3QjtnQkFDSSxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQWpCLENBQXlCLElBQUksRUFBSixDQUFPLENBQUMsSUFBSSxNQUFKLENBQVcsSUFBQyxDQUFBLEtBQVosQ0FBRCxDQUFtQixDQUFDLE1BQXBCLENBQUEsQ0FBUCxFQUFxQyxJQUFJLGdCQUFKLENBQXFCLFVBQXJCLENBQXJDLENBQXpCLEVBREo7YUFBQSxNQUFBO2dCQUdJLElBQTJDLElBQUMsQ0FBQSxLQUE1QztvQkFBQSxJQUFBLEdBQU8sS0FBSyxDQUFDLElBQU4sQ0FBVyxDQUFDLElBQUksRUFBSixDQUFPLElBQUMsQ0FBQSxLQUFSLEVBQWUsSUFBZixDQUFELENBQVgsRUFBUDtpQkFISjthQURKOztRQUtBLElBQUcsSUFBQyxDQUFBLE9BQUo7WUFDSSxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQWpCLENBQXlCLElBQUksTUFBSixDQUFXLElBQUMsQ0FBQSxJQUFaLEVBQXFCLElBQUMsQ0FBQSxJQUFKLEdBQWMsSUFBSSxpQkFBSixDQUFzQixJQUF0QixDQUFkLEdBQThDLElBQUksT0FBSixDQUFlLElBQUQsR0FBTSxHQUFOLEdBQVMsSUFBVCxHQUFjLEdBQTVCLENBQWhFLENBQXpCLEVBREo7O1FBRUEsZ0JBQUEsR0FBbUIsRUFBRSxDQUFDLE1BQUgsQ0FBVSxJQUFDLENBQUEsUUFBRCxDQUFVLE9BQVYsQ0FBVixFQUE4QixJQUFDLENBQUEsZUFBRCxDQUFpQixDQUFqQixFQUFvQixJQUFwQixDQUE5QjtRQUNuQixJQUFxQyxRQUFyQztZQUFBLE9BQUEsR0FBVSxJQUFBLEdBQUssSUFBTCxHQUFZLFFBQVosR0FBcUIsSUFBL0I7O1FBQ0EsSUFBRyxJQUFDLENBQUEsTUFBSjtZQUNJLGdCQUFBLEdBQW1CLENBQUMsSUFBQyxDQUFBLFFBQUQsQ0FBYSxJQUFELEdBQU0sTUFBTixHQUFZLElBQXhCLENBQUQ7WUFDbkIsSUFBeUYsSUFBQyxDQUFBLEdBQTFGO2dCQUFBLFNBQUEsR0FBWSxJQUFBLEdBQUssSUFBTCxHQUFVLE9BQVYsR0FBZ0IsQ0FBQyxPQUFBLENBQVEsU0FBUixFQUFtQixDQUFuQixDQUFELENBQWhCLEdBQXNDLFFBQXRDLEdBQThDLElBQTlDLEdBQW1ELElBQW5ELEdBQXVELElBQXZELEdBQTRELGVBQXhFO2FBRko7U0FBQSxNQUdLLElBQUcsSUFBQyxDQUFBLElBQUo7WUFDRCxnQkFBQSxHQUFtQixDQUFDLElBQUMsQ0FBQSxRQUFELENBQWEsSUFBRCxHQUFNLE1BQU4sR0FBWSxJQUF4QixDQUFELEVBRGxCOztRQUVMLGFBQUEsR0FBZ0IsSUFBSSxDQUFDLGtCQUFMLENBQXdCLEtBQUEsQ0FBTSxDQUFOLEVBQVM7WUFBQSxNQUFBLEVBQVEsSUFBUjtTQUFULENBQXhCLEVBQWdELFNBQWhEO1FBQ2hCLElBQUcsYUFBQSxJQUFrQixhQUFhLENBQUMsTUFBZCxHQUF1QixDQUE1QztZQUNJLGFBQUEsR0FBZ0IsRUFBRSxDQUFDLE1BQUgsQ0FBVSxJQUFDLENBQUEsUUFBRCxDQUFVLElBQVYsQ0FBVixFQUEyQixhQUEzQixFQUEwQyxJQUFDLENBQUEsUUFBRCxDQUFVLElBQVYsQ0FBMUMsRUFEcEI7O2VBRUEsRUFBRSxDQUFDLE1BQUgsQ0FBVSxnQkFBVixFQUE0QixJQUFDLENBQUEsUUFBRCxDQUFVLEVBQUEsR0FBRSxDQUFDLFVBQUEsSUFBYyxFQUFmLENBQUYsR0FBc0IsSUFBQyxDQUFBLEdBQXZCLEdBQTJCLE9BQXJDLENBQTVCLEVBQ0ksZ0JBREosRUFDc0IsSUFBQyxDQUFBLFFBQUQsQ0FBVSxLQUFBLEdBQU0sU0FBTixHQUFrQixPQUE1QixDQUR0QixFQUM4RCxhQUQ5RCxFQUVJLElBQUMsQ0FBQSxRQUFELENBQWEsSUFBQyxDQUFBLEdBQUYsR0FBTSxHQUFOLEdBQVEsQ0FBQyxZQUFBLElBQWdCLEVBQWpCLENBQXBCLENBRko7SUE1RVM7O2tCQWdGYixlQUFBLEdBQWlCLFNBQUMsQ0FBRCxFQUFJLElBQUo7QUFDYixZQUFBO1FBQUEsSUFBQSxHQUFPO0FBQ1A7QUFBQSxhQUFBLG9EQUFBOztZQUNJLElBQUEsR0FBTyxJQUFJLENBQUMsU0FBTCxDQUFBO1lBQ1AsSUFBQSxDQUFBLENBQWdCLElBQUEsWUFBZ0IsSUFBaEMsQ0FBQTtBQUFBLHlCQUFBOztZQUNBLEdBQUEsd0NBQW1CLENBQUUsU0FBZixDQUFBO1lBQ04sSUFBQSxDQUFBLENBQWdCLENBQUMsR0FBQSxZQUFlLElBQWhCLENBQUEsSUFDZ0IsQ0FBQyxHQUFBLFlBQWUsS0FBZixxQ0FDTyxDQUFFLFNBQVYsQ0FBQSxXQUFBLFlBQWlDLElBRGhDLElBRUQsR0FBRyxDQUFDLFVBQVUsQ0FBQyxNQUFmLEtBQXlCLENBRnhCLElBR0QsdURBQXNCLENBQUUsZUFBeEIsS0FBa0MsTUFBbEMsSUFBQSxJQUFBLEtBQTBDLE9BQTFDLENBSEEsQ0FEaEMsQ0FBQTtBQUFBLHlCQUFBOztZQUtBLEVBQUEsb0NBQWtCLENBQUUsU0FBVixDQUFBLFdBQUEsSUFBeUI7WUFDbkMsR0FBQSxHQUFVLElBQUksaUJBQUosQ0FBc0IsQ0FBQyxDQUFDLEtBQUssQ0FBQyxZQUFSLENBQXFCLElBQXJCLENBQXRCO1lBQ1YsSUFBQSxHQUFVLElBQUksS0FBSixDQUFVLEdBQVY7WUFDVixJQUFHLEdBQUcsQ0FBQyxJQUFQO2dCQUNJLE9BQW1CLENBQUMsSUFBRCxFQUFPLEdBQVAsQ0FBbkIsRUFBQyxHQUFHLENBQUMsY0FBTCxFQUFXLGVBRGY7O1lBRUEsSUFBSSxDQUFDLFdBQVksQ0FBQSxHQUFBLENBQWpCLEdBQXdCLElBQUksSUFBSixDQUFTLElBQVQsRUFBZSxJQUFJLENBQUMsSUFBcEI7WUFDeEIsSUFBQSxHQUFPLElBQUksQ0FBQyxNQUFMLENBQVksSUFBQyxDQUFBLFFBQUQsQ0FBVSxJQUFDLENBQUEsR0FBWCxDQUFaLEVBQThCLElBQUksTUFBSixDQUFXLEdBQVgsRUFBZ0IsRUFBaEIsQ0FBbUIsQ0FBQyxrQkFBcEIsQ0FBdUMsQ0FBdkMsRUFBMEMsU0FBMUMsQ0FBOUIsRUFBcUYsSUFBQyxDQUFBLFFBQUQsQ0FBVSxLQUFWLENBQXJGO0FBZlg7ZUFnQkE7SUFsQmE7Ozs7R0F2R1c7O0FBbUloQyxPQUFPLENBQUMsTUFBUixHQUF1Qjs7O0lBQ04sZ0JBQUMsT0FBRCxFQUFXLEtBQVgsRUFBbUIsU0FBbkI7UUFBQyxJQUFDLENBQUEsVUFBRDtRQUFVLElBQUMsQ0FBQSxRQUFEO1FBQVEsSUFBQyxDQUFBLFlBQUQ7SUFBbkI7O3FCQUViLFFBQUEsR0FBVSxDQUFDLFNBQUQsRUFBWSxPQUFaLEVBQXFCLFdBQXJCOztxQkFFVixXQUFBLEdBQWE7O3FCQUViLEtBQUEsR0FBTyxTQUFDLENBQUQ7QUFDSCxZQUFBOztZQURJLElBQUk7Z0JBQUMsS0FBQSxFQUFPLElBQVI7OztBQUNSO0FBQUEsYUFBQSx3Q0FBQTs0QkFBSyxpQkFBTztZQUNSLElBQW1CLFFBQUEsR0FBVyxLQUFLLENBQUMsS0FBTixDQUFZLENBQVosQ0FBOUI7QUFBQSx1QkFBTyxTQUFQOztBQURKO3FEQUVVLENBQUUsS0FBWixDQUFrQixDQUFsQjtJQUhHOztxQkFLUCxVQUFBLEdBQVksU0FBQyxHQUFEO0FBQ1IsWUFBQTtBQUFBO0FBQUEsYUFBQSx3Q0FBQTs7WUFBQSxJQUFLLENBQUEsQ0FBQSxDQUFFLENBQUMsVUFBUixDQUFtQixHQUFuQjtBQUFBO1FBQ0EsSUFBbUQsR0FBbkQ7WUFBQSxJQUFDLENBQUEsY0FBRCxJQUFDLENBQUEsWUFBYyxJQUFJLEtBQUosQ0FBVSxDQUFDLElBQUksT0FBSixDQUFZLFFBQVosQ0FBRCxDQUFWLEdBQWY7OztnQkFDVSxDQUFFLFVBQVosQ0FBdUIsR0FBdkI7O2VBQ0E7SUFKUTs7cUJBTVosV0FBQSxHQUFhLFNBQUMsQ0FBRDtBQUNULFlBQUE7UUFBQSxJQUFBLEdBQU8sQ0FBQyxDQUFDLE1BQUYsR0FBVztRQUNsQixJQUFBLEdBQU8sQ0FBQyxDQUFDLE1BQUYsR0FBVyxJQUFBLEdBQU87UUFDekIsU0FBQSxHQUFZLEVBQUUsQ0FBQyxNQUFILENBQVUsSUFBQyxDQUFBLFFBQUQsQ0FBVSxJQUFDLENBQUEsR0FBRCxHQUFPLFVBQWpCLENBQVYsRUFDUixDQUFJLElBQUMsQ0FBQSxPQUFKLEdBQWlCLElBQUMsQ0FBQSxPQUFPLENBQUMsa0JBQVQsQ0FBNEIsQ0FBNUIsRUFBK0IsV0FBL0IsQ0FBakIsR0FBa0UsSUFBQyxDQUFBLFFBQUQsQ0FBVSxPQUFWLENBQW5FLENBRFEsRUFFUixJQUFDLENBQUEsUUFBRCxDQUFVLE9BQVYsQ0FGUTtBQUdaO0FBQUEsYUFBQSxnREFBQTs0QkFBSyxzQkFBWTtBQUNiO0FBQUEsaUJBQUEsd0NBQUE7O2dCQUNJLElBQUEsQ0FBK0IsSUFBQyxDQUFBLE9BQWhDO29CQUFBLElBQUEsR0FBVSxJQUFJLENBQUMsTUFBTCxDQUFBLEVBQVY7O2dCQUNBLFNBQUEsR0FBWSxTQUFTLENBQUMsTUFBVixDQUFpQixJQUFDLENBQUEsUUFBRCxDQUFVLElBQUEsR0FBTyxPQUFqQixDQUFqQixFQUE0QyxJQUFJLENBQUMsa0JBQUwsQ0FBd0IsQ0FBeEIsRUFBMkIsV0FBM0IsQ0FBNUMsRUFBcUYsSUFBQyxDQUFBLFFBQUQsQ0FBVSxLQUFWLENBQXJGO0FBRmhCO1lBR0EsSUFBc0QsQ0FBQyxJQUFBLEdBQU8sS0FBSyxDQUFDLGtCQUFOLENBQXlCLENBQXpCLEVBQTRCLFNBQTVCLENBQVIsQ0FBOEMsQ0FBQyxNQUEvQyxHQUF3RCxDQUE5RztnQkFBQSxTQUFBLEdBQVksU0FBUyxDQUFDLE1BQVYsQ0FBaUIsSUFBakIsRUFBdUIsSUFBQyxDQUFBLFFBQUQsQ0FBVSxJQUFWLENBQXZCLEVBQVo7O1lBQ0EsSUFBUyxDQUFBLEtBQUssSUFBQyxDQUFBLEtBQUssQ0FBQyxNQUFQLEdBQWdCLENBQXJCLElBQTJCLENBQUksSUFBQyxDQUFBLFNBQXpDO0FBQUEsc0JBQUE7O1lBQ0EsSUFBQSxHQUFPLElBQUMsQ0FBQSxjQUFELENBQWdCLEtBQUssQ0FBQyxXQUF0QjtZQUNQLElBQVksSUFBQSxZQUFnQixNQUFoQixJQUEwQixDQUFDLElBQUEsWUFBZ0IsT0FBaEIsSUFBNEIsSUFBSSxDQUFDLEtBQUwsQ0FBQSxDQUE1QixJQUE2QyxJQUFJLENBQUMsS0FBTCxLQUFjLFVBQTVELENBQXRDO0FBQUEseUJBQUE7O1lBQ0EsU0FBUyxDQUFDLElBQVYsQ0FBZSxJQUFJLENBQUMsUUFBTCxDQUFjLElBQUEsR0FBTyxVQUFyQixDQUFmO0FBUko7UUFTQSxJQUFHLElBQUMsQ0FBQSxTQUFELElBQWUsSUFBQyxDQUFBLFNBQVMsQ0FBQyxXQUFXLENBQUMsTUFBekM7WUFDSSxTQUFTLENBQUMsSUFBVixrQkFBZSxDQUFBLElBQUMsQ0FBQSxRQUFELENBQVUsSUFBQSxHQUFPLFlBQWpCLENBQWdDLFNBQUEsV0FBQyxJQUFDLENBQUEsU0FBUyxDQUFDLGtCQUFYLENBQThCLENBQTlCLEVBQWlDLFNBQWpDLENBQUQsQ0FBQSxFQUFpRCxDQUFBLElBQUMsQ0FBQSxRQUFELENBQVUsSUFBVixDQUFBLENBQUEsQ0FBaEcsRUFESjs7UUFFQSxTQUFTLENBQUMsSUFBVixDQUFlLElBQUMsQ0FBQSxRQUFELENBQVUsSUFBQyxDQUFBLEdBQUQsR0FBTyxHQUFqQixDQUFmO2VBQ0E7SUFsQlM7Ozs7R0FsQnFCOztBQWlEdEMsT0FBTyxDQUFDLEVBQVIsR0FBbUI7OztJQUVGLFlBQUMsU0FBRCxFQUFZLEtBQVosRUFBbUIsT0FBbkI7UUFBWSxJQUFDLENBQUEsT0FBRDs7WUFBTyxVQUFVOztRQUN0QyxJQUFDLENBQUEsU0FBRCxHQUFnQixPQUFPLENBQUMsSUFBUixLQUFnQixRQUFuQixHQUFpQyxTQUFTLENBQUMsTUFBVixDQUFBLENBQWpDLEdBQXlEO1FBQ3RFLElBQUMsQ0FBQSxRQUFELEdBQWU7UUFDZixJQUFDLENBQUEsT0FBRCxHQUFlO1FBQ2QsSUFBQyxDQUFBLE9BQWEsUUFBYjtJQUpPOztpQkFNYixRQUFBLEdBQVUsQ0FBQyxXQUFELEVBQWMsTUFBZCxFQUFzQixVQUF0Qjs7aUJBRVYsUUFBQSxHQUFvQixTQUFBO0FBQUcsWUFBQTtnREFBSyxDQUFFLE1BQVAsQ0FBQTtJQUFIOztpQkFDcEIsWUFBQSxHQUFjLFNBQUE7QUFBRyxZQUFBO29EQUFTLENBQUUsTUFBWCxDQUFBO0lBQUg7O2lCQUlkLE9BQUEsR0FBUyxTQUFDLFFBQUQ7UUFDTCxJQUFHLElBQUMsQ0FBQSxPQUFKO1lBQ0ksSUFBQyxDQUFBLFlBQUQsQ0FBQSxDQUFlLENBQUMsT0FBaEIsQ0FBd0IsUUFBeEIsRUFESjtTQUFBLE1BQUE7WUFHSSxJQUFDLENBQUEsT0FBRCxHQUFjLFFBQUEsWUFBb0I7WUFDbEMsSUFBQyxDQUFBLFFBQUQsR0FBWSxJQUFDLENBQUEsV0FBRCxDQUFhLFFBQWI7WUFDWixJQUFDLENBQUEsUUFBUSxDQUFDLDJCQUFWLENBQXNDLFFBQVEsQ0FBQyxZQUEvQyxFQUxKOztlQU1BO0lBUEs7O2lCQVlULFdBQUEsR0FBYSxTQUFDLENBQUQ7QUFDVCxZQUFBOzRCQUFBLENBQUMsQ0FBRSxlQUFILEtBQVksU0FBWixJQUNJLElBQUMsQ0FBQSxRQUFELENBQUEsQ0FBVyxDQUFDLFdBQVosQ0FBd0IsQ0FBeEIsQ0FESixnREFDaUQsQ0FBRSxXQUFqQixDQUE2QixDQUE3QjtJQUZ6Qjs7aUJBSWIsS0FBQSxHQUFPLFNBQUMsQ0FBRDtBQUFPLFlBQUE7ZUFBQSxJQUFDLENBQUEsSUFBSSxDQUFDLEtBQU4sQ0FBWSxDQUFaLENBQUEsMENBQTJCLENBQUUsS0FBWCxDQUFpQixDQUFqQjtJQUF6Qjs7aUJBRVAsV0FBQSxHQUFhLFNBQUMsQ0FBRDtRQUNULElBQUcsSUFBQyxDQUFBLFdBQUQsQ0FBYSxDQUFiLENBQUg7bUJBQXVCLElBQUMsQ0FBQSxnQkFBRCxDQUFrQixDQUFsQixFQUF2QjtTQUFBLE1BQUE7bUJBQWdELElBQUMsQ0FBQSxpQkFBRCxDQUFtQixDQUFuQixFQUFoRDs7SUFEUzs7aUJBR2IsVUFBQSxHQUFZLFNBQUMsR0FBRDtRQUNSLElBQXFELEdBQXJEO1lBQUEsSUFBQyxDQUFBLGFBQUQsSUFBQyxDQUFBLFdBQWdCLElBQUksS0FBSixDQUFVLENBQUMsSUFBSSxPQUFKLENBQVksUUFBWixDQUFELENBQVYsR0FBakI7O1FBQ0EsSUFBQyxDQUFBLFNBQUQsSUFBQyxDQUFBLE9BQW9CLElBQUksS0FBSixDQUFVLENBQUMsSUFBQyxDQUFBLElBQUksQ0FBQyxVQUFOLENBQWlCLEdBQWpCLENBQUQsQ0FBVjtRQUNyQixJQUFDLENBQUEsYUFBRCxJQUFDLENBQUEsV0FBYyxJQUFJLEtBQUosQ0FBVSxDQUFDLElBQUMsQ0FBQSxRQUFRLENBQUMsVUFBVixDQUFxQixHQUFyQixDQUFELENBQVY7ZUFDZjtJQUpROztpQkFNWixXQUFBLEdBQWEsU0FBQyxJQUFEO1FBQ1QsSUFBRyxJQUFBLFlBQWdCLEtBQW5CO21CQUE4QixLQUE5QjtTQUFBLE1BQUE7bUJBQXdDLElBQUksS0FBSixDQUFVLENBQUMsSUFBRCxDQUFWLEVBQXhDOztJQURTOztpQkFJYixnQkFBQSxHQUFrQixTQUFDLENBQUQ7QUFDZCxZQUFBO1FBQUEsS0FBQSxHQUFlLEdBQUEsQ0FBSSxDQUFKLEVBQU8sWUFBUDtRQUNmLElBQUEsR0FBZSxHQUFBLENBQUksQ0FBSixFQUFPLHFCQUFQO1FBRWYsSUFBRyxJQUFIO0FBQ0ksbUJBQU8sSUFBSSxFQUFKLENBQU8sSUFBQyxDQUFBLFNBQVMsQ0FBQyxNQUFYLENBQUEsQ0FBUCxFQUE0QixJQUFDLENBQUEsWUFBRCxDQUFBLENBQTVCLEVBQTZDO2dCQUFBLElBQUEsRUFBTSxJQUFOO2FBQTdDLENBQXdELENBQUMsa0JBQXpELENBQTRFLENBQTVFLEVBRFg7O1FBR0EsTUFBQSxHQUFXLENBQUMsQ0FBQyxNQUFGLEdBQVc7UUFDdEIsSUFBQSxHQUFlLElBQUMsQ0FBQSxTQUFTLENBQUMsa0JBQVgsQ0FBOEIsQ0FBOUIsRUFBaUMsV0FBakM7UUFDZixJQUFBLEdBQWUsSUFBQyxDQUFBLFdBQUQsQ0FBYSxJQUFDLENBQUEsSUFBZCxDQUFtQixDQUFDLGtCQUFwQixDQUF1QyxLQUFBLENBQU0sQ0FBTixFQUFTO1lBQUMsUUFBQSxNQUFEO1NBQVQsQ0FBdkM7UUFDZixNQUFBLEdBQVcsRUFBRSxDQUFDLE1BQUgsQ0FBVSxJQUFDLENBQUEsUUFBRCxDQUFVLE1BQVYsQ0FBVixFQUE2QixJQUE3QixFQUFtQyxJQUFDLENBQUEsUUFBRCxDQUFVLE9BQVYsQ0FBbkMsRUFBdUQsSUFBdkQsRUFBNkQsSUFBQyxDQUFBLFFBQUQsQ0FBVSxJQUFBLEdBQUssSUFBQyxDQUFBLEdBQU4sR0FBVSxHQUFwQixDQUE3RDtRQUNYLElBQUEsQ0FBcUMsS0FBckM7WUFBQSxNQUFNLENBQUMsT0FBUCxDQUFlLElBQUMsQ0FBQSxRQUFELENBQVUsSUFBQyxDQUFBLEdBQVgsQ0FBZixFQUFBOztRQUNBLElBQUEsQ0FBcUIsSUFBQyxDQUFBLFFBQXRCO0FBQUEsbUJBQU8sT0FBUDs7UUFDQSxNQUFBLEdBQVMsTUFBTSxDQUFDLE1BQVAsQ0FBYyxJQUFDLENBQUEsUUFBRCxDQUFVLFFBQVYsQ0FBZDtRQUNULElBQUcsSUFBQyxDQUFBLE9BQUo7WUFDSSxDQUFDLENBQUMsVUFBRixHQUFlO1lBQ2YsTUFBQSxHQUFTLE1BQU0sQ0FBQyxNQUFQLENBQWMsSUFBQyxDQUFBLFFBQVEsQ0FBQyxNQUFWLENBQUEsQ0FBa0IsQ0FBQyxrQkFBbkIsQ0FBc0MsQ0FBdEMsRUFBeUMsU0FBekMsQ0FBZCxFQUZiO1NBQUEsTUFBQTtZQUlJLE1BQUEsR0FBUyxNQUFNLENBQUMsTUFBUCxDQUFjLElBQUMsQ0FBQSxRQUFELENBQVUsS0FBVixDQUFkLEVBQWdDLElBQUMsQ0FBQSxRQUFRLENBQUMsa0JBQVYsQ0FBNkIsS0FBQSxDQUFNLENBQU4sRUFBUztnQkFBQyxRQUFBLE1BQUQ7YUFBVCxDQUE3QixFQUFpRCxTQUFqRCxDQUFoQyxFQUE2RixJQUFDLENBQUEsUUFBRCxDQUFVLElBQUEsR0FBSyxJQUFDLENBQUEsR0FBTixHQUFVLEdBQXBCLENBQTdGLEVBSmI7O2VBS0E7SUFuQmM7O2lCQXNCbEIsaUJBQUEsR0FBbUIsU0FBQyxDQUFEO0FBQ2YsWUFBQTtRQUFBLElBQUEsR0FBTyxJQUFDLENBQUEsU0FBUyxDQUFDLGtCQUFYLENBQThCLENBQTlCLEVBQWlDLFVBQWpDO1FBQ1AsSUFBQSxHQUFPLElBQUMsQ0FBQSxRQUFELENBQUEsQ0FBVyxDQUFDLGtCQUFaLENBQStCLENBQS9CLEVBQWtDLFVBQWxDO1FBQ1AsR0FBQSxHQUFVLElBQUMsQ0FBQSxZQUFELENBQUEsQ0FBSCxHQUF3QixJQUFDLENBQUEsWUFBRCxDQUFBLENBQWUsQ0FBQyxrQkFBaEIsQ0FBbUMsQ0FBbkMsRUFBc0MsVUFBdEMsQ0FBeEIsR0FBK0UsQ0FBQyxJQUFDLENBQUEsUUFBRCxDQUFVLFFBQVYsQ0FBRDtRQUN0RixTQUFBLEdBQVksSUFBSSxDQUFDLE1BQUwsQ0FBWSxJQUFDLENBQUEsUUFBRCxDQUFVLEtBQVYsQ0FBWixFQUE4QixJQUE5QixFQUFvQyxJQUFDLENBQUEsUUFBRCxDQUFVLEtBQVYsQ0FBcEMsRUFBc0QsR0FBdEQ7UUFDWixJQUFHLENBQUMsQ0FBQyxLQUFGLElBQVcsVUFBZDttQkFBOEIsSUFBQyxDQUFBLFlBQUQsQ0FBYyxTQUFkLEVBQTlCO1NBQUEsTUFBQTttQkFBMkQsVUFBM0Q7O0lBTGU7O2lCQU9uQixVQUFBLEdBQVksU0FBQTtlQUNSLElBQUMsQ0FBQSxJQUFELElBQVU7SUFERjs7OztHQTNFYzs7QUFvRjlCLFNBQUEsR0FLSTtJQUFBLE1BQUEsRUFBUSxTQUFDLENBQUQ7ZUFBTywwREFBQSxHQUdFLENBQUMsT0FBQSxDQUFRLFNBQVIsRUFBbUIsQ0FBbkIsQ0FBRCxDQUhGLEdBR3dCO0lBSC9CLENBQVI7SUFnQkEsSUFBQSxFQUFNLFNBQUE7ZUFBRztJQUFILENBaEJOO0lBeUJBLE9BQUEsRUFBUyxTQUFBO2VBQUc7SUFBSCxDQXpCVDtJQWtDQSxNQUFBLEVBQVEsU0FBQTtlQUFHO0lBQUgsQ0FsQ1I7SUF1Q0EsT0FBQSxFQUFTLFNBQUE7ZUFBRztJQUFILENBdkNUO0lBd0NBLEtBQUEsRUFBTyxTQUFBO2VBQUc7SUFBSCxDQXhDUDs7O0FBNENKLFNBQUEsR0FBZTs7QUFDZixXQUFBLEdBQWU7O0FBQ2YsVUFBQSxHQUFlOztBQUNmLFVBQUEsR0FBZTs7QUFDZixRQUFBLEdBQWU7O0FBQ2YsWUFBQSxHQUFlOztBQUVmLEdBQUEsR0FBTTs7QUFFTixTQUFBLEdBQVk7O0FBVVosT0FBQSxHQUFVLFNBQUMsSUFBRCxFQUFPLENBQVA7QUFDTixRQUFBO0lBQUMsT0FBUSxDQUFDLENBQUM7SUFDWCxJQUFHLElBQUEsSUFBUSxJQUFJLENBQUMsU0FBaEI7ZUFDSSxJQUFJLENBQUMsU0FBVSxDQUFBLElBQUEsRUFEbkI7S0FBQSxNQUFBO1FBR0ksR0FBQSxHQUFNLElBQUksQ0FBQyxZQUFMLENBQWtCLElBQWxCO1FBQ04sSUFBSSxDQUFDLE1BQUwsQ0FBWSxHQUFaLEVBQWlCLFNBQVUsQ0FBQSxJQUFBLENBQVYsQ0FBZ0IsQ0FBaEIsQ0FBakI7ZUFDQSxJQUFJLENBQUMsU0FBVSxDQUFBLElBQUEsQ0FBZixHQUF1QixJQUwzQjs7QUFGTTs7QUFTVixTQUFBLEdBQVksU0FBQyxJQUFELEVBQU8sR0FBUDtJQUNSLElBQUEsR0FBTyxJQUFJLENBQUMsT0FBTCxDQUFhLEtBQWIsRUFBb0IsSUFBQSxHQUFPLEdBQTNCO1dBQ1AsSUFBSSxDQUFDLE9BQUwsQ0FBYSxNQUFiLEVBQXFCLEVBQXJCO0FBRlE7O0FBSVosa0JBQUEsR0FBcUIsU0FBQyxJQUFEO1dBQ2pCLElBQUEsWUFBZ0IsaUJBQWhCLElBQXNDLElBQUksQ0FBQyxLQUFMLEtBQWM7QUFEbkM7O0FBR3JCLGFBQUEsR0FBZ0IsU0FBQyxJQUFEO1dBQ1osSUFBQSxZQUFnQixXQUFoQixJQUNJLENBQUMsSUFBQSxZQUFnQixJQUFoQixJQUF5QixJQUFJLENBQUMsS0FBL0IsQ0FESixJQUVJLElBQUEsWUFBZ0I7QUFIUjs7QUFLaEIscUJBQUEsR0FBd0IsU0FBQyxJQUFEO1dBQVUsSUFBSSxDQUFDLFNBQUwsQ0FBQSxDQUFBLCtDQUFvQixJQUFJLENBQUM7QUFBbkM7O0FBR3hCLFVBQUEsR0FBYSxTQUFDLENBQUQsRUFBSSxNQUFKLEVBQVksSUFBWjtBQUNULFFBQUE7SUFBQSxJQUFBLENBQWMsQ0FBQSxHQUFBLEdBQU0sTUFBTyxDQUFBLElBQUEsQ0FBSyxDQUFDLFVBQWIsQ0FBd0IsQ0FBeEIsQ0FBTixDQUFkO0FBQUEsZUFBQTs7SUFDQSxNQUFPLENBQUEsSUFBQSxDQUFQLEdBQWUsR0FBRyxDQUFDO0lBQ25CLEdBQUcsQ0FBQyxJQUFKLEdBQVcsSUFBSSxLQUFKLENBQVUsTUFBVjtXQUNYO0FBSlMiLCJzb3VyY2VzQ29udGVudCI6WyIjIyNcbjAwMCAgIDAwMCAgIDAwMDAwMDAgICAwMDAwMDAwICAgIDAwMDAwMDAwICAgMDAwMDAwMCAgXG4wMDAwICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAgICAgMDAwICAgICAgIFxuMDAwIDAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgIDAwMDAwMDAgICBcbjAwMCAgMDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgICAgICAgIDAwMCAgXG4wMDAgICAwMDAgICAwMDAwMDAwICAgMDAwMDAwMCAgICAwMDAwMDAwMCAgMDAwMDAwMCAgIFxuIyMjXG5cbiMgQ29udGFpbnMgYWxsIG9mIHRoZSBub2RlIGNsYXNzZXMgZm9yIHRoZSBzeW50YXggdHJlZS4gXG4jIE1vc3Qgbm9kZXMgYXJlIGNyZWF0ZWQgYXMgdGhlIHJlc3VsdCBvZiBhY3Rpb25zIGluIHRoZSBncmFtbWFyLFxuIyBidXQgc29tZSBhcmUgY3JlYXRlZCBieSBvdGhlciBub2RlcyBhcyBhIG1ldGhvZCBvZiBjb2RlIGdlbmVyYXRpb24uIFxuIyBUbyBjb252ZXJ0IHRoZSBzeW50YXggdHJlZSBpbnRvIGEgc3RyaW5nIG9mIEphdmFTY3JpcHQgY29kZSwgY2FsbCBgY29tcGlsZSgpYCBvbiB0aGUgcm9vdC5cblxuRXJyb3Iuc3RhY2tUcmFjZUxpbWl0ID0gSW5maW5pdHlcbmxvZyA9IGNvbnNvbGUubG9nXG5cbntTY29wZX0gPSByZXF1aXJlICcuL3Njb3BlJ1xue2lzVW5hc3NpZ25hYmxlLCBKU19GT1JCSURERU59ID0gcmVxdWlyZSAnLi9sZXhlcidcblxuIyBJbXBvcnQgdGhlIGhlbHBlcnMgd2UgcGxhbiB0byB1c2UuXG57Y29tcGFjdCwgZmxhdHRlbiwgZXh0ZW5kLCBtZXJnZSwgZGVsLCBzdGFydHMsIGVuZHMsIHNvbWUsXG5hZGRMb2NhdGlvbkRhdGFGbiwgbG9jYXRpb25EYXRhVG9TdHJpbmcsIHRocm93U3ludGF4RXJyb3J9ID0gcmVxdWlyZSAnLi9oZWxwZXJzJ1xuXG4jIEZ1bmN0aW9ucyByZXF1aXJlZCBieSBwYXJzZXJcbmV4cG9ydHMuZXh0ZW5kID0gZXh0ZW5kXG5leHBvcnRzLmFkZExvY2F0aW9uRGF0YUZuID0gYWRkTG9jYXRpb25EYXRhRm5cblxuIyBDb25zdGFudCBmdW5jdGlvbnMgZm9yIG5vZGVzIHRoYXQgZG9uJ3QgbmVlZCBjdXN0b21pemF0aW9uLlxuWUVTICAgICA9IC0+IHllc1xuTk8gICAgICA9IC0+IG5vXG5USElTICAgID0gLT4gdGhpc1xuTkVHQVRFICA9IC0+IEBuZWdhdGVkID0gbm90IEBuZWdhdGVkOyB0aGlzXG5cbiMgMDAwMDAwMDAgIDAwMDAwMDAwICAgIDAwMDAwMDAgICAgMDAwMDAwMCAgIDAwICAgICAwMCAgMDAwMDAwMDAgIDAwMCAgIDAwMCAgMDAwMDAwMDAwICBcbiMgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAgICAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMDAgIDAwMCAgICAgMDAwICAgICBcbiMgMDAwMDAwICAgIDAwMDAwMDAgICAgMDAwMDAwMDAwICAwMDAgIDAwMDAgIDAwMDAwMDAwMCAgMDAwMDAwMCAgIDAwMCAwIDAwMCAgICAgMDAwICAgICBcbiMgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAwIDAwMCAgMDAwICAgICAgIDAwMCAgMDAwMCAgICAgMDAwICAgICBcbiMgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgMDAwMDAwMDAgIDAwMCAgIDAwMCAgICAgMDAwICAgICBcblxuIyBUaGUgdmFyaW91cyBub2RlcyBkZWZpbmVkIGJlbG93IGFsbCBjb21waWxlIHRvIGEgY29sbGVjdGlvbiBvZiBDb2RlRnJhZ21lbnQgb2JqZWN0cy5cbiMgQSBDb2RlRnJhZ21lbnRzIGlzIGEgYmxvY2sgb2YgZ2VuZXJhdGVkIGNvZGUsIGFuZCB0aGUgbG9jYXRpb24gaW4gdGhlIHNvdXJjZSBmaWxlIHdoZXJlIHRoZSBjb2RlXG4jIGNhbWUgZnJvbS4gQ29kZUZyYWdtZW50cyBjYW4gYmUgYXNzZW1ibGVkIHRvZ2V0aGVyIGludG8gd29ya2luZyBjb2RlIGp1c3QgYnkgY2F0dGluZyB0b2dldGhlclxuIyBhbGwgdGhlIENvZGVGcmFnbWVudHMnIGBjb2RlYCBzbmlwcGV0cywgaW4gb3JkZXIuXG5cbmV4cG9ydHMuQ29kZUZyYWdtZW50ID0gY2xhc3MgQ29kZUZyYWdtZW50XG4gICAgXG4gICAgQDogKHBhcmVudCwgY29kZSkgLT5cbiAgICAgICAgXG4gICAgICAgIEBjb2RlID0gXCIje2NvZGV9XCJcbiAgICAgICAgQGxvY2F0aW9uRGF0YSA9IHBhcmVudD8ubG9jYXRpb25EYXRhXG4gICAgICAgIEB0eXBlID0gcGFyZW50Py5jb25zdHJ1Y3Rvcj8ubmFtZSBvciAndW5rbm93bidcblxuICAgIHRvU3RyaW5nOiAtPlxuICAgICAgICBcbiAgICAgICAgXCIje0Bjb2RlfSN7aWYgQGxvY2F0aW9uRGF0YSB0aGVuIFwiOiBcIiArIGxvY2F0aW9uRGF0YVRvU3RyaW5nKEBsb2NhdGlvbkRhdGEpIGVsc2UgJyd9XCJcblxuZnJhZ21lbnRzVG9UZXh0ID0gKGZyYWdtZW50cykgLT4gIyBDb252ZXJ0IGFuIGFycmF5IG9mIENvZGVGcmFnbWVudHMgaW50byBhIHN0cmluZy5cbiAgICBcbiAgICAoZnJhZ21lbnQuY29kZSBmb3IgZnJhZ21lbnQgaW4gZnJhZ21lbnRzKS5qb2luKCcnKVxuXG4jIDAwMDAwMDAgICAgIDAwMDAwMDAgICAgMDAwMDAwMCAgMDAwMDAwMDAgIFxuIyAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgICAgICBcbiMgMDAwMDAwMCAgICAwMDAwMDAwMDAgIDAwMDAwMDAgICAwMDAwMDAwICAgXG4jIDAwMCAgIDAwMCAgMDAwICAgMDAwICAgICAgIDAwMCAgMDAwICAgICAgIFxuIyAwMDAwMDAwICAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgIDAwMDAwMDAwICBcblxuIyBUaGUgKipCYXNlKiogaXMgdGhlIGFic3RyYWN0IGJhc2UgY2xhc3MgZm9yIGFsbCBub2RlcyBpbiB0aGUgc3ludGF4IHRyZWUuXG4jIEVhY2ggc3ViY2xhc3MgaW1wbGVtZW50cyB0aGUgYGNvbXBpbGVOb2RlYCBtZXRob2QsIHdoaWNoIHBlcmZvcm1zIHRoZVxuIyBjb2RlIGdlbmVyYXRpb24gZm9yIHRoYXQgbm9kZS4gVG8gY29tcGlsZSBhIG5vZGUgdG8gSmF2YVNjcmlwdCxcbiMgY2FsbCBgY29tcGlsZWAgb24gaXQsIHdoaWNoIHdyYXBzIGBjb21waWxlTm9kZWAgaW4gc29tZSBnZW5lcmljIGV4dHJhIHNtYXJ0cyxcbiMgdG8ga25vdyB3aGVuIHRoZSBnZW5lcmF0ZWQgY29kZSBuZWVkcyB0byBiZSB3cmFwcGVkIHVwIGluIGEgY2xvc3VyZS5cbiMgQW4gb3B0aW9ucyBoYXNoIGlzIHBhc3NlZCBhbmQgY2xvbmVkIHRocm91Z2hvdXQsIGNvbnRhaW5pbmcgaW5mb3JtYXRpb24gYWJvdXRcbiMgdGhlIGVudmlyb25tZW50IGZyb20gaGlnaGVyIGluIHRoZSB0cmVlIChzdWNoIGFzIGlmIGEgcmV0dXJuZWQgdmFsdWUgaXNcbiMgYmVpbmcgcmVxdWVzdGVkIGJ5IHRoZSBzdXJyb3VuZGluZyBmdW5jdGlvbiksIGluZm9ybWF0aW9uIGFib3V0IHRoZSBjdXJyZW50XG4jIHNjb3BlLCBhbmQgaW5kZW50YXRpb24gbGV2ZWwuXG5cbmV4cG9ydHMuQmFzZSA9IGNsYXNzIEJhc2VcblxuICAgIGNvbXBpbGU6IChvLCBsdmwpIC0+XG4gICAgICAgIGZyYWdtZW50c1RvVGV4dCBAY29tcGlsZVRvRnJhZ21lbnRzIG8sIGx2bFxuXG4gICAgIyBDb21tb24gbG9naWMgZm9yIGRldGVybWluaW5nIHdoZXRoZXIgdG8gd3JhcCB0aGlzIG5vZGUgaW4gYSBjbG9zdXJlIGJlZm9yZVxuICAgICMgY29tcGlsaW5nIGl0LCBvciB0byBjb21waWxlIGRpcmVjdGx5LiBXZSBuZWVkIHRvIHdyYXAgaWYgdGhpcyBub2RlIGlzIGFcbiAgICAjICpzdGF0ZW1lbnQqLCBhbmQgaXQncyBub3QgYSAqcHVyZVN0YXRlbWVudCosIGFuZCB3ZSdyZSBub3QgYXRcbiAgICAjIHRoZSB0b3AgbGV2ZWwgb2YgYSBibG9jayAod2hpY2ggd291bGQgYmUgdW5uZWNlc3NhcnkpLCBhbmQgd2UgaGF2ZW4ndFxuICAgICMgYWxyZWFkeSBiZWVuIGFza2VkIHRvIHJldHVybiB0aGUgcmVzdWx0IChiZWNhdXNlIHN0YXRlbWVudHMga25vdyBob3cgdG9cbiAgICAjIHJldHVybiByZXN1bHRzKS5cbiAgICBcbiAgICBjb21waWxlVG9GcmFnbWVudHM6IChvLCBsdmwpIC0+XG4gICAgICAgIFxuICAgICAgICBvICAgICAgICA9IGV4dGVuZCB7fSwgb1xuICAgICAgICBvLmxldmVsICA9IGx2bCBpZiBsdmxcbiAgICAgICAgbm9kZSAgICAgPSBAdW5mb2xkU29hayhvKSBvciB0aGlzXG4gICAgICAgIG5vZGUudGFiID0gby5pbmRlbnRcbiAgICAgICAgaWYgby5sZXZlbCBpcyBMRVZFTF9UT1Agb3Igbm90IG5vZGUuaXNTdGF0ZW1lbnQobylcbiAgICAgICAgICAgIG5vZGUuY29tcGlsZU5vZGUgb1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBub2RlLmNvbXBpbGVDbG9zdXJlIG9cblxuICAgICMgU3RhdGVtZW50cyBjb252ZXJ0ZWQgaW50byBleHByZXNzaW9ucyB2aWEgY2xvc3VyZS13cmFwcGluZyBzaGFyZSBhIHNjb3BlXG4gICAgIyBvYmplY3Qgd2l0aCB0aGVpciBwYXJlbnQgY2xvc3VyZSwgdG8gcHJlc2VydmUgdGhlIGV4cGVjdGVkIGxleGljYWwgc2NvcGUuXG4gICAgXG4gICAgY29tcGlsZUNsb3N1cmU6IChvKSAtPlxuICAgICAgICBcbiAgICAgICAgaWYganVtcE5vZGUgPSBAanVtcHMoKVxuICAgICAgICAgICAganVtcE5vZGUuZXJyb3IgJ2Nhbm5vdCB1c2UgYSBwdXJlIHN0YXRlbWVudCBpbiBhbiBleHByZXNzaW9uJ1xuICAgICAgICBvLnNoYXJlZFNjb3BlID0geWVzXG4gICAgICAgIGZ1bmMgPSBuZXcgQ29kZSBbXSwgQmxvY2sud3JhcCBbdGhpc11cbiAgICAgICAgYXJncyA9IFtdXG4gICAgICAgIGlmIChhcmd1bWVudHNOb2RlID0gQGNvbnRhaW5zIGlzTGl0ZXJhbEFyZ3VtZW50cykgb3IgQGNvbnRhaW5zIGlzTGl0ZXJhbFRoaXNcbiAgICAgICAgICAgIGFyZ3MgPSBbbmV3IFRoaXNMaXRlcmFsXVxuICAgICAgICAgICAgaWYgYXJndW1lbnRzTm9kZVxuICAgICAgICAgICAgICAgIG1ldGggPSAnYXBwbHknXG4gICAgICAgICAgICAgICAgYXJncy5wdXNoIG5ldyBJZGVudGlmaWVyTGl0ZXJhbCAnYXJndW1lbnRzJ1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIG1ldGggPSAnY2FsbCdcbiAgICAgICAgICAgIGZ1bmMgPSBuZXcgVmFsdWUgZnVuYywgW25ldyBBY2Nlc3MgbmV3IFByb3BlcnR5TmFtZSBtZXRoXVxuICAgICAgICBwYXJ0cyA9IChuZXcgQ2FsbCBmdW5jLCBhcmdzKS5jb21waWxlTm9kZSBvXG4gICAgICAgIGlmIGZ1bmMuaXNHZW5lcmF0b3Igb3IgZnVuYy5iYXNlPy5pc0dlbmVyYXRvclxuICAgICAgICAgICAgcGFydHMudW5zaGlmdCBAbWFrZUNvZGUgXCIoeWllbGQqIFwiXG4gICAgICAgICAgICBwYXJ0cy5wdXNoICAgIEBtYWtlQ29kZSBcIilcIlxuICAgICAgICBwYXJ0c1xuXG4gICAgIyBJZiB0aGUgY29kZSBnZW5lcmF0aW9uIHdpc2hlcyB0byB1c2UgdGhlIHJlc3VsdCBvZiBhIGNvbXBsZXggZXhwcmVzc2lvblxuICAgICMgaW4gbXVsdGlwbGUgcGxhY2VzLCBlbnN1cmUgdGhhdCB0aGUgZXhwcmVzc2lvbiBpcyBvbmx5IGV2ZXIgZXZhbHVhdGVkIG9uY2UsXG4gICAgIyBieSBhc3NpZ25pbmcgaXQgdG8gYSB0ZW1wb3JhcnkgdmFyaWFibGUuIFBhc3MgYSBsZXZlbCB0byBwcmVjb21waWxlLlxuICAgICNcbiAgICAjIElmIGBsZXZlbGAgaXMgcGFzc2VkLCB0aGVuIHJldHVybnMgYFt2YWwsIHJlZl1gLCB3aGVyZSBgdmFsYCBpcyB0aGUgY29tcGlsZWQgdmFsdWUsIGFuZCBgcmVmYFxuICAgICMgaXMgdGhlIGNvbXBpbGVkIHJlZmVyZW5jZS4gSWYgYGxldmVsYCBpcyBub3QgcGFzc2VkLCB0aGlzIHJldHVybnMgYFt2YWwsIHJlZl1gIHdoZXJlXG4gICAgIyB0aGUgdHdvIHZhbHVlcyBhcmUgcmF3IG5vZGVzIHdoaWNoIGhhdmUgbm90IGJlZW4gY29tcGlsZWQuXG4gICAgXG4gICAgY2FjaGU6IChvLCBsZXZlbCwgaXNDb21wbGV4KSAtPlxuICAgICAgICBcbiAgICAgICAgY29tcGxleCA9IGlmIGlzQ29tcGxleD8gdGhlbiBpc0NvbXBsZXggdGhpcyBlbHNlIEBpc0NvbXBsZXgoKVxuICAgICAgICBpZiBjb21wbGV4XG4gICAgICAgICAgICByZWYgPSBuZXcgSWRlbnRpZmllckxpdGVyYWwgby5zY29wZS5mcmVlVmFyaWFibGUgJ3JlZidcbiAgICAgICAgICAgIHN1YiA9IG5ldyBBc3NpZ24gcmVmLCB0aGlzXG4gICAgICAgICAgICBpZiBsZXZlbCB0aGVuIFtzdWIuY29tcGlsZVRvRnJhZ21lbnRzKG8sIGxldmVsKSwgW0BtYWtlQ29kZShyZWYudmFsdWUpXV0gZWxzZSBbc3ViLCByZWZdXG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHJlZiA9IGlmIGxldmVsIHRoZW4gQGNvbXBpbGVUb0ZyYWdtZW50cyBvLCBsZXZlbCBlbHNlIHRoaXNcbiAgICAgICAgICAgIFtyZWYsIHJlZl1cblxuICAgIGNhY2hlVG9Db2RlRnJhZ21lbnRzOiAoY2FjaGVWYWx1ZXMpIC0+XG4gICAgICAgIFxuICAgICAgICBbZnJhZ21lbnRzVG9UZXh0KGNhY2hlVmFsdWVzWzBdKSwgZnJhZ21lbnRzVG9UZXh0KGNhY2hlVmFsdWVzWzFdKV1cblxuICAgICMgQ29uc3RydWN0IGEgbm9kZSB0aGF0IHJldHVybnMgdGhlIGN1cnJlbnQgbm9kZSdzIHJlc3VsdC5cbiAgICAjIE5vdGUgdGhhdCB0aGlzIGlzIG92ZXJyaWRkZW4gZm9yIHNtYXJ0ZXIgYmVoYXZpb3IgZm9yXG4gICAgIyBtYW55IHN0YXRlbWVudCBub2RlcyAoZS5nLiBJZiwgRm9yKS4uLlxuICAgIFxuICAgIG1ha2VSZXR1cm46IChyZXMpIC0+XG4gICAgICAgIG1lID0gQHVud3JhcEFsbCgpXG4gICAgICAgIGlmIHJlc1xuICAgICAgICAgICAgbmV3IENhbGwgbmV3IExpdGVyYWwoXCIje3Jlc30ucHVzaFwiKSwgW21lXVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICBuZXcgUmV0dXJuIG1lXG5cbiAgICAjIERvZXMgdGhpcyBub2RlLCBvciBhbnkgb2YgaXRzIGNoaWxkcmVuLCBjb250YWluIGEgbm9kZSBvZiBhIGNlcnRhaW4ga2luZD9cbiAgICAjIFJlY3Vyc2l2ZWx5IHRyYXZlcnNlcyBkb3duIHRoZSAqY2hpbGRyZW4qIG5vZGVzIGFuZCByZXR1cm5zIHRoZSBmaXJzdCBvbmVcbiAgICAjIHRoYXQgdmVyaWZpZXMgYHByZWRgLiBPdGhlcndpc2UgcmV0dXJuIHVuZGVmaW5lZC4gYGNvbnRhaW5zYCBkb2VzIG5vdCBjcm9zc1xuICAgICMgc2NvcGUgYm91bmRhcmllcy5cbiAgICBcbiAgICBjb250YWluczogKHByZWQpIC0+XG4gICAgICAgIG5vZGUgPSB1bmRlZmluZWRcbiAgICAgICAgQHRyYXZlcnNlQ2hpbGRyZW4gbm8sIChuKSAtPlxuICAgICAgICAgICAgaWYgcHJlZCBuXG4gICAgICAgICAgICAgICAgbm9kZSA9IG5cbiAgICAgICAgICAgICAgICByZXR1cm4gbm9cbiAgICAgICAgbm9kZVxuXG4gICAgbGFzdE5vbkNvbW1lbnQ6IChsaXN0KSAtPiAjIFB1bGwgb3V0IHRoZSBsYXN0IG5vbi1jb21tZW50IG5vZGUgb2YgYSBub2RlIGxpc3QuXG4gICAgICAgIGkgPSBsaXN0Lmxlbmd0aFxuICAgICAgICByZXR1cm4gbGlzdFtpXSB3aGlsZSBpLS0gd2hlbiBsaXN0W2ldIG5vdCBpbnN0YW5jZW9mIENvbW1lbnRcbiAgICAgICAgbnVsbFxuXG4gICAgIyBgdG9TdHJpbmdgIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBub2RlLCBmb3IgaW5zcGVjdGluZyB0aGUgcGFyc2UgdHJlZS5cbiAgICAjIFRoaXMgaXMgd2hhdCBgY29mZmVlIC0tbm9kZXNgIHByaW50cyBvdXQuXG4gICAgXG4gICAgdG9TdHJpbmc6IChpZHQgPSAnJywgbmFtZSA9IEBjb25zdHJ1Y3Rvci5uYW1lKSAtPlxuICAgICAgICB0cmVlID0gJ1xcbicgKyBpZHQgKyBuYW1lXG4gICAgICAgIHRyZWUgKz0gJz8nIGlmIEBzb2FrXG4gICAgICAgIEBlYWNoQ2hpbGQgKG5vZGUpIC0+IHRyZWUgKz0gbm9kZS50b1N0cmluZyBpZHQgKyBUQUJcbiAgICAgICAgdHJlZVxuXG4gICAgIyBQYXNzZXMgZWFjaCBjaGlsZCB0byBhIGZ1bmN0aW9uLCBicmVha2luZyB3aGVuIHRoZSBmdW5jdGlvbiByZXR1cm5zIGBmYWxzZWAuXG4gICAgXG4gICAgZWFjaENoaWxkOiAoZnVuYykgLT5cbiAgICAgICAgcmV0dXJuIHRoaXMgdW5sZXNzIEBjaGlsZHJlblxuICAgICAgICBmb3IgYXR0ciBpbiBAY2hpbGRyZW4gd2hlbiBAW2F0dHJdXG4gICAgICAgICAgICBmb3IgY2hpbGQgaW4gZmxhdHRlbiBbQFthdHRyXV1cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcyBpZiBmdW5jKGNoaWxkKSBpcyBmYWxzZVxuICAgICAgICB0aGlzXG5cbiAgICB0cmF2ZXJzZUNoaWxkcmVuOiAoY3Jvc3NTY29wZSwgZnVuYykgLT5cbiAgICAgICAgXG4gICAgICAgIEBlYWNoQ2hpbGQgKGNoaWxkKSAtPlxuICAgICAgICAgICAgcmVjdXIgPSBmdW5jKGNoaWxkKVxuICAgICAgICAgICAgY2hpbGQudHJhdmVyc2VDaGlsZHJlbihjcm9zc1Njb3BlLCBmdW5jKSB1bmxlc3MgcmVjdXIgaXMgbm9cblxuICAgIGludmVydDogLT5cbiAgICAgICAgbmV3IE9wICchJywgdGhpc1xuXG4gICAgdW53cmFwQWxsOiAtPlxuICAgICAgICBub2RlID0gdGhpc1xuICAgICAgICBjb250aW51ZSB1bnRpbCBub2RlIGlzIG5vZGUgPSBub2RlLnVud3JhcCgpXG4gICAgICAgIG5vZGVcblxuICAgICMgRGVmYXVsdCBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlIGNvbW1vbiBub2RlIHByb3BlcnRpZXMgYW5kIG1ldGhvZHMuIE5vZGVzXG4gICAgIyB3aWxsIG92ZXJyaWRlIHRoZXNlIHdpdGggY3VzdG9tIGxvZ2ljLCBpZiBuZWVkZWQuXG4gICAgXG4gICAgY2hpbGRyZW46ICAgICBbXVxuICAgIGlzU3RhdGVtZW50OiAgTk9cbiAgICBqdW1wczogICAgICAgIE5PXG4gICAgaXNDb21wbGV4OiAgICBZRVNcbiAgICBpc0NoYWluYWJsZTogIE5PXG4gICAgaXNBc3NpZ25hYmxlOiBOT1xuICAgIGlzTnVtYmVyOiAgICAgTk9cbiAgICB1bndyYXA6ICAgICAgIFRISVNcbiAgICB1bmZvbGRTb2FrOiAgIE5PXG5cbiAgICBhc3NpZ25zOiAgICAgIE5PICMgSXMgdGhpcyBub2RlIHVzZWQgdG8gYXNzaWduIGEgY2VydGFpbiB2YXJpYWJsZT9cblxuICAgICMgRm9yIHRoaXMgbm9kZSBhbmQgYWxsIGRlc2NlbmRlbnRzLCBzZXQgdGhlIGxvY2F0aW9uIGRhdGEgdG8gYGxvY2F0aW9uRGF0YWBcbiAgICAjIGlmIHRoZSBsb2NhdGlvbiBkYXRhIGlzIG5vdCBhbHJlYWR5IHNldC5cbiAgICBcbiAgICB1cGRhdGVMb2NhdGlvbkRhdGFJZk1pc3Npbmc6IChsb2NhdGlvbkRhdGEpIC0+XG4gICAgICAgIHJldHVybiB0aGlzIGlmIEBsb2NhdGlvbkRhdGFcbiAgICAgICAgQGxvY2F0aW9uRGF0YSA9IGxvY2F0aW9uRGF0YVxuXG4gICAgICAgIEBlYWNoQ2hpbGQgKGNoaWxkKSAtPlxuICAgICAgICAgICAgY2hpbGQudXBkYXRlTG9jYXRpb25EYXRhSWZNaXNzaW5nIGxvY2F0aW9uRGF0YVxuXG4gICAgZXJyb3I6IChtZXNzYWdlKSAtPiAjIFRocm93IGEgU3ludGF4RXJyb3IgYXNzb2NpYXRlZCB3aXRoIHRoaXMgbm9kZSdzIGxvY2F0aW9uLlxuICAgICAgICBcbiAgICAgICAgdGhyb3dTeW50YXhFcnJvciBtZXNzYWdlLCBAbG9jYXRpb25EYXRhXG5cbiAgICBtYWtlQ29kZTogKGNvZGUpIC0+XG4gICAgICAgIG5ldyBDb2RlRnJhZ21lbnQgdGhpcywgY29kZVxuXG4gICAgd3JhcEluQnJhY2VzOiAoZnJhZ21lbnRzKSAtPlxuICAgICAgICBbXS5jb25jYXQgQG1ha2VDb2RlKCcoJyksIGZyYWdtZW50cywgQG1ha2VDb2RlKCcpJylcblxuICAgICMgYGZyYWdtZW50c0xpc3RgIGlzIGFuIGFycmF5IG9mIGFycmF5cyBvZiBmcmFnbWVudHMuIEVhY2ggYXJyYXkgaW4gZnJhZ21lbnRzTGlzdCB3aWxsIGJlXG4gICAgIyBjb25jYXRvbmF0ZWQgdG9nZXRoZXIsIHdpdGggYGpvaW5TdHJgIGFkZGVkIGluIGJldHdlZW4gZWFjaCwgdG8gcHJvZHVjZSBhIGZpbmFsIGZsYXQgYXJyYXlcbiAgICAjIG9mIGZyYWdtZW50cy5cbiAgICBcbiAgICBqb2luRnJhZ21lbnRBcnJheXM6IChmcmFnbWVudHNMaXN0LCBqb2luU3RyKSAtPlxuICAgICAgICBhbnN3ZXIgPSBbXVxuICAgICAgICBmb3IgZnJhZ21lbnRzLGkgaW4gZnJhZ21lbnRzTGlzdFxuICAgICAgICAgICAgaWYgaSB0aGVuIGFuc3dlci5wdXNoIEBtYWtlQ29kZSBqb2luU3RyXG4gICAgICAgICAgICBhbnN3ZXIgPSBhbnN3ZXIuY29uY2F0IGZyYWdtZW50c1xuICAgICAgICBhbnN3ZXJcblxuIyAwMDAwMDAwICAgIDAwMCAgICAgICAwMDAwMDAwICAgIDAwMDAwMDAgIDAwMCAgIDAwMCAgXG4jIDAwMCAgIDAwMCAgMDAwICAgICAgMDAwICAgMDAwICAwMDAgICAgICAgMDAwICAwMDAgICBcbiMgMDAwMDAwMCAgICAwMDAgICAgICAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAwMDAwICAgIFxuIyAwMDAgICAwMDAgIDAwMCAgICAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgMDAwICAgXG4jIDAwMDAwMDAgICAgMDAwMDAwMCAgIDAwMDAwMDAgICAgMDAwMDAwMCAgMDAwICAgMDAwICBcblxuIyBUaGUgYmxvY2sgaXMgdGhlIGxpc3Qgb2YgZXhwcmVzc2lvbnMgdGhhdCBmb3JtcyB0aGUgYm9keSBvZiBhblxuIyBpbmRlbnRlZCBibG9jayBvZiBjb2RlIC0tIHRoZSBpbXBsZW1lbnRhdGlvbiBvZiBhIGZ1bmN0aW9uLCBhIGNsYXVzZSBpbiBhblxuIyBgaWZgLCBgc3dpdGNoYCwgb3IgYHRyeWAsIGFuZCBzbyBvbi4uLlxuXG5leHBvcnRzLkJsb2NrID0gY2xhc3MgQmxvY2sgZXh0ZW5kcyBCYXNlXG4gICAgXG4gICAgY29uc3RydWN0b3I6IChub2RlcykgLT5cbiAgICAgICAgXG4gICAgICAgIEBleHByZXNzaW9ucyA9IGNvbXBhY3QgZmxhdHRlbiBub2RlcyBvciBbXVxuXG4gICAgY2hpbGRyZW46IFsnZXhwcmVzc2lvbnMnXVxuXG4gICAgcHVzaDogKG5vZGUpIC0+ICMgVGFjayBhbiBleHByZXNzaW9uIG9uIHRvIHRoZSBlbmQgb2YgdGhpcyBleHByZXNzaW9uIGxpc3QuXG4gICAgICAgIFxuICAgICAgICBAZXhwcmVzc2lvbnMucHVzaCBub2RlXG4gICAgICAgIHRoaXNcblxuICAgIHBvcDogLT4gIyBSZW1vdmUgYW5kIHJldHVybiB0aGUgbGFzdCBleHByZXNzaW9uIG9mIHRoaXMgZXhwcmVzc2lvbiBsaXN0LlxuICAgICAgICBcbiAgICAgICAgQGV4cHJlc3Npb25zLnBvcCgpXG5cbiAgICB1bnNoaWZ0OiAobm9kZSkgLT4gIyBBZGQgYW4gZXhwcmVzc2lvbiBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoaXMgZXhwcmVzc2lvbiBsaXN0LlxuICAgICAgICBcbiAgICAgICAgQGV4cHJlc3Npb25zLnVuc2hpZnQgbm9kZVxuICAgICAgICB0aGlzXG5cbiAgICAjIElmIHRoaXMgQmxvY2sgY29uc2lzdHMgb2YganVzdCBhIHNpbmdsZSBub2RlLCB1bndyYXAgaXQgYnkgcHVsbGluZyBpdCBiYWNrIG91dC5cbiAgICBcbiAgICB1bndyYXA6IC0+XG4gICAgICAgIGlmIEBleHByZXNzaW9ucy5sZW5ndGggaXMgMSB0aGVuIEBleHByZXNzaW9uc1swXSBlbHNlIHRoaXNcblxuICAgIGlzRW1wdHk6IC0+ICMgSXMgdGhpcyBhbiBlbXB0eSBibG9jayBvZiBjb2RlP1xuICAgICAgICBub3QgQGV4cHJlc3Npb25zLmxlbmd0aFxuXG4gICAgaXNTdGF0ZW1lbnQ6IChvKSAtPlxuICAgICAgICBmb3IgZXhwIGluIEBleHByZXNzaW9ucyB3aGVuIGV4cC5pc1N0YXRlbWVudCBvXG4gICAgICAgICAgICByZXR1cm4geWVzXG4gICAgICAgIG5vXG5cbiAgICBqdW1wczogKG8pIC0+XG4gICAgICAgIGZvciBleHAgaW4gQGV4cHJlc3Npb25zXG4gICAgICAgICAgICByZXR1cm4ganVtcE5vZGUgaWYganVtcE5vZGUgPSBleHAuanVtcHMgb1xuXG4gICAgIyBBIEJsb2NrIG5vZGUgZG9lcyBub3QgcmV0dXJuIGl0cyBlbnRpcmUgYm9keSwgcmF0aGVyIGl0XG4gICAgIyBlbnN1cmVzIHRoYXQgdGhlIGZpbmFsIGV4cHJlc3Npb24gaXMgcmV0dXJuZWQuXG4gICAgXG4gICAgbWFrZVJldHVybjogKHJlcykgLT5cbiAgICAgICAgXG4gICAgICAgIGxlbiA9IEBleHByZXNzaW9ucy5sZW5ndGhcbiAgICAgICAgd2hpbGUgbGVuLS1cbiAgICAgICAgICAgIGV4cHIgPSBAZXhwcmVzc2lvbnNbbGVuXVxuICAgICAgICAgICAgaWYgZXhwciBub3QgaW5zdGFuY2VvZiBDb21tZW50XG4gICAgICAgICAgICAgICAgQGV4cHJlc3Npb25zW2xlbl0gPSBleHByLm1ha2VSZXR1cm4gcmVzXG4gICAgICAgICAgICAgICAgQGV4cHJlc3Npb25zLnNwbGljZShsZW4sIDEpIGlmIGV4cHIgaW5zdGFuY2VvZiBSZXR1cm4gYW5kIG5vdCBleHByLmV4cHJlc3Npb25cbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICB0aGlzXG5cbiAgICAjIEEgKipCbG9jayoqIGlzIHRoZSBvbmx5IG5vZGUgdGhhdCBjYW4gc2VydmUgYXMgdGhlIHJvb3QuXG4gICAgXG4gICAgY29tcGlsZVRvRnJhZ21lbnRzOiAobyA9IHt9LCBsZXZlbCkgLT5cbiAgICAgICAgaWYgby5zY29wZSB0aGVuIHN1cGVyIG8sIGxldmVsIGVsc2UgQGNvbXBpbGVSb290IG9cblxuICAgICMgQ29tcGlsZSBhbGwgZXhwcmVzc2lvbnMgd2l0aGluIHRoZSAqKkJsb2NrKiogYm9keS4gSWYgd2UgbmVlZCB0b1xuICAgICMgcmV0dXJuIHRoZSByZXN1bHQsIGFuZCBpdCdzIGFuIGV4cHJlc3Npb24sIHNpbXBseSByZXR1cm4gaXQuIElmIGl0J3MgYVxuICAgICMgc3RhdGVtZW50LCBhc2sgdGhlIHN0YXRlbWVudCB0byBkbyBzby5cbiAgICBcbiAgICBjb21waWxlTm9kZTogKG8pIC0+XG4gICAgICAgIFxuICAgICAgICBAdGFiICAgID0gby5pbmRlbnRcbiAgICAgICAgdG9wICAgICA9IG8ubGV2ZWwgaXMgTEVWRUxfVE9QXG4gICAgICAgIGNvbXBpbGVkTm9kZXMgPSBbXVxuXG4gICAgICAgIGZvciBub2RlLCBpbmRleCBpbiBAZXhwcmVzc2lvbnNcblxuICAgICAgICAgICAgbm9kZSA9IG5vZGUudW53cmFwQWxsKClcbiAgICAgICAgICAgIG5vZGUgPSAobm9kZS51bmZvbGRTb2FrKG8pIG9yIG5vZGUpXG4gICAgICAgICAgICBpZiBub2RlIGluc3RhbmNlb2YgQmxvY2tcbiAgICAgICAgICAgICAgICAjIFRoaXMgaXMgYSBuZXN0ZWQgYmxvY2suIFdlIGRvbid0IGRvIGFueXRoaW5nIHNwZWNpYWwgaGVyZSBsaWtlIGVuY2xvc2VcbiAgICAgICAgICAgICAgICAjIGl0IGluIGEgbmV3IHNjb3BlOyB3ZSBqdXN0IGNvbXBpbGUgdGhlIHN0YXRlbWVudHMgaW4gdGhpcyBibG9jayBhbG9uZyB3aXRoIG91ciBvd25cbiAgICAgICAgICAgICAgICBjb21waWxlZE5vZGVzLnB1c2ggbm9kZS5jb21waWxlTm9kZSBvXG4gICAgICAgICAgICBlbHNlIGlmIHRvcFxuICAgICAgICAgICAgICAgIG5vZGUuZnJvbnQgPSB0cnVlXG4gICAgICAgICAgICAgICAgZnJhZ21lbnRzID0gbm9kZS5jb21waWxlVG9GcmFnbWVudHMgb1xuICAgICAgICAgICAgICAgIHVubGVzcyBub2RlLmlzU3RhdGVtZW50IG9cbiAgICAgICAgICAgICAgICAgICAgZnJhZ21lbnRzLnVuc2hpZnQgQG1ha2VDb2RlIFwiI3tAdGFifVwiXG4gICAgICAgICAgICAgICAgICAgIGZyYWdtZW50cy5wdXNoIEBtYWtlQ29kZSBcIjtcIlxuICAgICAgICAgICAgICAgIGNvbXBpbGVkTm9kZXMucHVzaCBmcmFnbWVudHNcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBjb21waWxlZE5vZGVzLnB1c2ggbm9kZS5jb21waWxlVG9GcmFnbWVudHMgbywgTEVWRUxfTElTVFxuICAgICAgICBpZiB0b3BcbiAgICAgICAgICAgIGlmIEBzcGFjZWRcbiAgICAgICAgICAgICAgICByZXR1cm4gW10uY29uY2F0IEBqb2luRnJhZ21lbnRBcnJheXMoY29tcGlsZWROb2RlcywgJ1xcblxcbicpLCBAbWFrZUNvZGUoXCJcXG5cIilcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICByZXR1cm4gQGpvaW5GcmFnbWVudEFycmF5cyhjb21waWxlZE5vZGVzLCAnXFxuJylcbiAgICAgICAgaWYgY29tcGlsZWROb2Rlcy5sZW5ndGhcbiAgICAgICAgICAgIGFuc3dlciA9IEBqb2luRnJhZ21lbnRBcnJheXMoY29tcGlsZWROb2RlcywgJywgJylcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgYW5zd2VyID0gW0BtYWtlQ29kZSBcInZvaWQgMFwiXVxuICAgICAgICBpZiBjb21waWxlZE5vZGVzLmxlbmd0aCA+IDEgYW5kIG8ubGV2ZWwgPj0gTEVWRUxfTElTVCB0aGVuIEB3cmFwSW5CcmFjZXMgYW5zd2VyIGVsc2UgYW5zd2VyXG5cbiAgICAjIElmIHdlIGhhcHBlbiB0byBiZSB0aGUgdG9wLWxldmVsICoqQmxvY2sqKiwgd3JhcCBldmVyeXRoaW5nIGluXG4gICAgIyBhIHNhZmV0eSBjbG9zdXJlLCB1bmxlc3MgcmVxdWVzdGVkIG5vdCB0by5cbiAgICAjIEl0IHdvdWxkIGJlIGJldHRlciBub3QgdG8gZ2VuZXJhdGUgdGhlbSBpbiB0aGUgZmlyc3QgcGxhY2UsIGJ1dCBmb3Igbm93LFxuICAgICMgY2xlYW4gdXAgb2J2aW91cyBkb3VibGUtcGFyZW50aGVzZXMuXG4gICAgXG4gICAgY29tcGlsZVJvb3Q6IChvKSAtPlxuICAgICAgICBcbiAgICAgICAgby5pbmRlbnQgPSBpZiBvLmJhcmUgdGhlbiAnJyBlbHNlIFRBQlxuICAgICAgICBvLmxldmVsICA9IExFVkVMX1RPUFxuICAgICAgICBAc3BhY2VkICA9IHllc1xuICAgICAgICBvLnNjb3BlICA9IG5ldyBTY29wZSBudWxsLCB0aGlzLCBudWxsLCBvLnJlZmVyZW5jZWRWYXJzID8gW11cbiAgICAgICAgXG4gICAgICAgICMgTWFyayBnaXZlbiBsb2NhbCB2YXJpYWJsZXMgaW4gdGhlIHJvb3Qgc2NvcGUgYXMgcGFyYW1ldGVycyBzbyB0aGV5IGRvbid0IGVuZCB1cCBiZWluZyBkZWNsYXJlZCBvbiB0aGlzIGJsb2NrLlxuICAgICAgICBcbiAgICAgICAgby5zY29wZS5wYXJhbWV0ZXIgbmFtZSBmb3IgbmFtZSBpbiBvLmxvY2FscyBvciBbXVxuICAgICAgICBwcmVsdWRlID0gW11cbiAgICAgICAgaWYgbm90IG8uYmFyZVxuICAgICAgICAgICAgcHJlbHVkZUV4cHMgPSBmb3IgZXhwLCBpIGluIEBleHByZXNzaW9uc1xuICAgICAgICAgICAgICAgIGJyZWFrIHVubGVzcyBleHAudW53cmFwKCkgaW5zdGFuY2VvZiBDb21tZW50XG4gICAgICAgICAgICAgICAgZXhwXG4gICAgICAgICAgICByZXN0ID0gQGV4cHJlc3Npb25zW3ByZWx1ZGVFeHBzLmxlbmd0aC4uLl1cbiAgICAgICAgICAgIEBleHByZXNzaW9ucyA9IHByZWx1ZGVFeHBzXG4gICAgICAgICAgICBpZiBwcmVsdWRlRXhwcy5sZW5ndGhcbiAgICAgICAgICAgICAgICBwcmVsdWRlID0gQGNvbXBpbGVOb2RlIG1lcmdlKG8sIGluZGVudDogJycpXG4gICAgICAgICAgICAgICAgcHJlbHVkZS5wdXNoIEBtYWtlQ29kZSBcIlxcblwiXG4gICAgICAgICAgICBAZXhwcmVzc2lvbnMgPSByZXN0XG4gICAgICAgIGZyYWdtZW50cyA9IEBjb21waWxlV2l0aERlY2xhcmF0aW9ucyBvXG4gICAgICAgIHJldHVybiBmcmFnbWVudHMgaWYgby5iYXJlXG4gICAgICAgIFtdLmNvbmNhdCBwcmVsdWRlLCBAbWFrZUNvZGUoXCIoZnVuY3Rpb24oKSB7XFxuXCIpLCBmcmFnbWVudHMsIEBtYWtlQ29kZShcIlxcbn0pLmNhbGwodGhpcyk7XFxuXCIpXG5cbiAgICAjIENvbXBpbGUgdGhlIGV4cHJlc3Npb25zIGJvZHkgZm9yIHRoZSBjb250ZW50cyBvZiBhIGZ1bmN0aW9uLCB3aXRoXG4gICAgIyBkZWNsYXJhdGlvbnMgb2YgYWxsIGlubmVyIHZhcmlhYmxlcyBwdXNoZWQgdXAgdG8gdGhlIHRvcC5cbiAgICBcbiAgICBjb21waWxlV2l0aERlY2xhcmF0aW9uczogKG8pIC0+XG4gICAgICAgIFxuICAgICAgICBmcmFnbWVudHMgPSBbXVxuICAgICAgICBwb3N0ID0gW11cbiAgICAgICAgZm9yIGV4cCwgaSBpbiBAZXhwcmVzc2lvbnNcbiAgICAgICAgICAgIGV4cCA9IGV4cC51bndyYXAoKVxuICAgICAgICAgICAgYnJlYWsgdW5sZXNzIGV4cCBpbnN0YW5jZW9mIENvbW1lbnQgb3IgZXhwIGluc3RhbmNlb2YgTGl0ZXJhbFxuICAgICAgICBvID0gbWVyZ2UobywgbGV2ZWw6IExFVkVMX1RPUClcbiAgICAgICAgaWYgaVxuICAgICAgICAgICAgcmVzdCA9IEBleHByZXNzaW9ucy5zcGxpY2UgaSwgOWU5XG4gICAgICAgICAgICBbc3BhY2VkLCAgICAgICAgQHNwYWNlZF0gPSBbQHNwYWNlZCwgbm9dXG4gICAgICAgICAgICBbZnJhZ21lbnRzLCBAc3BhY2VkXSA9IFtAY29tcGlsZU5vZGUobyksIHNwYWNlZF1cbiAgICAgICAgICAgIEBleHByZXNzaW9ucyA9IHJlc3RcbiAgICAgICAgcG9zdCA9IEBjb21waWxlTm9kZSBvXG4gICAgICAgIHtzY29wZX0gPSBvXG4gICAgICAgIGlmIHNjb3BlLmV4cHJlc3Npb25zIGlzIHRoaXNcbiAgICAgICAgICAgIGRlY2xhcnMgPSBvLnNjb3BlLmhhc0RlY2xhcmF0aW9ucygpXG4gICAgICAgICAgICBhc3NpZ25zID0gc2NvcGUuaGFzQXNzaWdubWVudHNcbiAgICAgICAgICAgIGlmIGRlY2xhcnMgb3IgYXNzaWduc1xuICAgICAgICAgICAgICAgIGZyYWdtZW50cy5wdXNoIEBtYWtlQ29kZSAnXFxuJyBpZiBpXG4gICAgICAgICAgICAgICAgZnJhZ21lbnRzLnB1c2ggQG1ha2VDb2RlIFwiI3tAdGFifXZhciBcIlxuICAgICAgICAgICAgICAgIGlmIGRlY2xhcnNcbiAgICAgICAgICAgICAgICAgICAgZnJhZ21lbnRzLnB1c2ggQG1ha2VDb2RlIHNjb3BlLmRlY2xhcmVkVmFyaWFibGVzKCkuam9pbignLCAnKVxuICAgICAgICAgICAgICAgIGlmIGFzc2lnbnNcbiAgICAgICAgICAgICAgICAgICAgZnJhZ21lbnRzLnB1c2ggQG1ha2VDb2RlIFwiLFxcbiN7QHRhYiArIFRBQn1cIiBpZiBkZWNsYXJzXG4gICAgICAgICAgICAgICAgICAgIGZyYWdtZW50cy5wdXNoIEBtYWtlQ29kZSBzY29wZS5hc3NpZ25lZFZhcmlhYmxlcygpLmpvaW4oXCIsXFxuI3tAdGFiICsgVEFCfVwiKVxuICAgICAgICAgICAgICAgIGZyYWdtZW50cy5wdXNoIEBtYWtlQ29kZSBcIjtcXG4je2lmIEBzcGFjZWQgdGhlbiAnXFxuJyBlbHNlICcnfVwiXG4gICAgICAgICAgICBlbHNlIGlmIGZyYWdtZW50cy5sZW5ndGggYW5kIHBvc3QubGVuZ3RoXG4gICAgICAgICAgICAgICAgZnJhZ21lbnRzLnB1c2ggQG1ha2VDb2RlIFwiXFxuXCJcbiAgICAgICAgZnJhZ21lbnRzLmNvbmNhdCBwb3N0XG5cbiAgICAjIFdyYXAgdXAgdGhlIGdpdmVuIG5vZGVzIGFzIGEgKipCbG9jayoqLCB1bmxlc3MgaXQgYWxyZWFkeSBoYXBwZW5zIHRvIGJlIG9uZS5cbiAgICBcbiAgICBAd3JhcDogKG5vZGVzKSAtPlxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIG5vZGVzWzBdIGlmIG5vZGVzLmxlbmd0aCBpcyAxIGFuZCBub2Rlc1swXSBpbnN0YW5jZW9mIEJsb2NrXG4gICAgICAgIG5ldyBCbG9jayBub2Rlc1xuXG4jIDAwMCAgICAgIDAwMCAgMDAwMDAwMDAwICAwMDAwMDAwMCAgMDAwMDAwMDAgICAgMDAwMDAwMCAgIDAwMCAgICAgIFxuIyAwMDAgICAgICAwMDAgICAgIDAwMCAgICAgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAgICBcbiMgMDAwICAgICAgMDAwICAgICAwMDAgICAgIDAwMDAwMDAgICAwMDAwMDAwICAgIDAwMDAwMDAwMCAgMDAwICAgICAgXG4jIDAwMCAgICAgIDAwMCAgICAgMDAwICAgICAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgIFxuIyAwMDAwMDAwICAwMDAgICAgIDAwMCAgICAgMDAwMDAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAwMDAwICBcblxuIyBgTGl0ZXJhbGAgaXMgYSBiYXNlIGNsYXNzIGZvciBzdGF0aWMgdmFsdWVzIHRoYXQgY2FuIGJlIHBhc3NlZCB0aHJvdWdoXG4jIGRpcmVjdGx5IGludG8gSmF2YVNjcmlwdCB3aXRob3V0IHRyYW5zbGF0aW9uLCBzdWNoIGFzOiBzdHJpbmdzLCBudW1iZXJzLCBgdHJ1ZWAsIGBmYWxzZWAsIGBudWxsYC4uLlxuXG5leHBvcnRzLkxpdGVyYWwgPSBjbGFzcyBMaXRlcmFsIGV4dGVuZHMgQmFzZVxuICAgIFxuICAgIGNvbnN0cnVjdG9yOiAoQHZhbHVlKSAtPlxuXG4gICAgaXNDb21wbGV4OiBOT1xuXG4gICAgYXNzaWduczogKG5hbWUpIC0+XG4gICAgICAgIG5hbWUgaXMgQHZhbHVlXG5cbiAgICBjb21waWxlTm9kZTogKG8pIC0+XG4gICAgICAgIFtAbWFrZUNvZGUgQHZhbHVlXVxuXG4gICAgdG9TdHJpbmc6IC0+XG4gICAgICAgIFwiICN7aWYgQGlzU3RhdGVtZW50KCkgdGhlbiBzdXBlciBlbHNlIEBjb25zdHJ1Y3Rvci5uYW1lfTogI3tAdmFsdWV9XCJcblxuZXhwb3J0cy5OdW1iZXJMaXRlcmFsID0gY2xhc3MgTnVtYmVyTGl0ZXJhbCBleHRlbmRzIExpdGVyYWxcblxuZXhwb3J0cy5JbmZpbml0eUxpdGVyYWwgPSBjbGFzcyBJbmZpbml0eUxpdGVyYWwgZXh0ZW5kcyBOdW1iZXJMaXRlcmFsXG4gICAgY29tcGlsZU5vZGU6IC0+XG4gICAgICAgIFtAbWFrZUNvZGUgJzJlMzA4J11cblxuZXhwb3J0cy5OYU5MaXRlcmFsID0gY2xhc3MgTmFOTGl0ZXJhbCBleHRlbmRzIE51bWJlckxpdGVyYWxcbiAgICBjb25zdHJ1Y3RvcjogLT5cbiAgICAgICAgc3VwZXIgJ05hTidcblxuICAgIGNvbXBpbGVOb2RlOiAobykgLT5cbiAgICAgICAgY29kZSA9IFtAbWFrZUNvZGUgJzAvMCddXG4gICAgICAgIGlmIG8ubGV2ZWwgPj0gTEVWRUxfT1AgdGhlbiBAd3JhcEluQnJhY2VzIGNvZGUgZWxzZSBjb2RlXG5cbmV4cG9ydHMuU3RyaW5nTGl0ZXJhbCA9IGNsYXNzIFN0cmluZ0xpdGVyYWwgZXh0ZW5kcyBMaXRlcmFsXG5cbmV4cG9ydHMuUmVnZXhMaXRlcmFsID0gY2xhc3MgUmVnZXhMaXRlcmFsIGV4dGVuZHMgTGl0ZXJhbFxuXG5leHBvcnRzLlBhc3N0aHJvdWdoTGl0ZXJhbCA9IGNsYXNzIFBhc3N0aHJvdWdoTGl0ZXJhbCBleHRlbmRzIExpdGVyYWxcblxuZXhwb3J0cy5JZGVudGlmaWVyTGl0ZXJhbCA9IGNsYXNzIElkZW50aWZpZXJMaXRlcmFsIGV4dGVuZHMgTGl0ZXJhbFxuICAgIGlzQXNzaWduYWJsZTogWUVTXG5cbmV4cG9ydHMuUHJvcGVydHlOYW1lID0gY2xhc3MgUHJvcGVydHlOYW1lIGV4dGVuZHMgTGl0ZXJhbFxuICAgIGlzQXNzaWduYWJsZTogWUVTXG5cbmV4cG9ydHMuU3RhdGVtZW50TGl0ZXJhbCA9IGNsYXNzIFN0YXRlbWVudExpdGVyYWwgZXh0ZW5kcyBMaXRlcmFsXG4gICAgaXNTdGF0ZW1lbnQ6IFlFU1xuXG4gICAgbWFrZVJldHVybjogVEhJU1xuXG4gICAganVtcHM6IChvKSAtPlxuICAgICAgICByZXR1cm4gdGhpcyBpZiBAdmFsdWUgaXMgJ2JyZWFrJyBhbmQgbm90IChvPy5sb29wIG9yIG8/LmJsb2NrKVxuICAgICAgICByZXR1cm4gdGhpcyBpZiBAdmFsdWUgaXMgJ2NvbnRpbnVlJyBhbmQgbm90IG8/Lmxvb3BcblxuICAgIGNvbXBpbGVOb2RlOiAobykgLT5cbiAgICAgICAgW0BtYWtlQ29kZSBcIiN7QHRhYn0je0B2YWx1ZX07XCJdXG5cbmV4cG9ydHMuVGhpc0xpdGVyYWwgPSBjbGFzcyBUaGlzTGl0ZXJhbCBleHRlbmRzIExpdGVyYWxcbiAgICBjb25zdHJ1Y3RvcjogLT5cbiAgICAgICAgc3VwZXIgJ3RoaXMnXG5cbiAgICBjb21waWxlTm9kZTogKG8pIC0+XG4gICAgICAgIGNvZGUgPSBpZiBvLnNjb3BlLm1ldGhvZD8uYm91bmQgdGhlbiBvLnNjb3BlLm1ldGhvZC5jb250ZXh0IGVsc2UgQHZhbHVlXG4gICAgICAgIFtAbWFrZUNvZGUgY29kZV1cblxuZXhwb3J0cy5VbmRlZmluZWRMaXRlcmFsID0gY2xhc3MgVW5kZWZpbmVkTGl0ZXJhbCBleHRlbmRzIExpdGVyYWxcbiAgICBjb25zdHJ1Y3RvcjogLT5cbiAgICAgICAgc3VwZXIgJ3VuZGVmaW5lZCdcblxuICAgIGNvbXBpbGVOb2RlOiAobykgLT5cbiAgICAgICAgW0BtYWtlQ29kZSBpZiBvLmxldmVsID49IExFVkVMX0FDQ0VTUyB0aGVuICcodm9pZCAwKScgZWxzZSAndm9pZCAwJ11cblxuZXhwb3J0cy5OdWxsTGl0ZXJhbCA9IGNsYXNzIE51bGxMaXRlcmFsIGV4dGVuZHMgTGl0ZXJhbFxuICAgIGNvbnN0cnVjdG9yOiAtPlxuICAgICAgICBzdXBlciAnbnVsbCdcblxuZXhwb3J0cy5Cb29sZWFuTGl0ZXJhbCA9IGNsYXNzIEJvb2xlYW5MaXRlcmFsIGV4dGVuZHMgTGl0ZXJhbFxuXG4jIDAwMDAwMDAwICAgMDAwMDAwMDAgIDAwMDAwMDAwMCAgMDAwICAgMDAwICAwMDAwMDAwMCAgIDAwMCAgIDAwMCAgXG4jIDAwMCAgIDAwMCAgMDAwICAgICAgICAgIDAwMCAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMDAgIDAwMCAgXG4jIDAwMDAwMDAgICAgMDAwMDAwMCAgICAgIDAwMCAgICAgMDAwICAgMDAwICAwMDAwMDAwICAgIDAwMCAwIDAwMCAgXG4jIDAwMCAgIDAwMCAgMDAwICAgICAgICAgIDAwMCAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgMDAwMCAgXG4jIDAwMCAgIDAwMCAgMDAwMDAwMDAgICAgIDAwMCAgICAgIDAwMDAwMDAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgXG5cbiMgQSBgcmV0dXJuYCBpcyBhICpwdXJlU3RhdGVtZW50KiAtLSB3cmFwcGluZyBpdCBpbiBhIGNsb3N1cmUgd291bGRuJ3QgbWFrZSBzZW5zZS5cblxuZXhwb3J0cy5SZXR1cm4gPSBjbGFzcyBSZXR1cm4gZXh0ZW5kcyBCYXNlXG4gICAgY29uc3RydWN0b3I6IChAZXhwcmVzc2lvbikgLT5cblxuICAgIGNoaWxkcmVuOiBbJ2V4cHJlc3Npb24nXVxuXG4gICAgaXNTdGF0ZW1lbnQ6IFlFU1xuICAgIG1ha2VSZXR1cm46ICBUSElTXG4gICAganVtcHM6ICAgICAgIFRISVNcblxuICAgIGNvbXBpbGVUb0ZyYWdtZW50czogKG8sIGxldmVsKSAtPlxuICAgICAgICBleHByID0gQGV4cHJlc3Npb24/Lm1ha2VSZXR1cm4oKVxuICAgICAgICBpZiBleHByIGFuZCBleHByIG5vdCBpbnN0YW5jZW9mIFJldHVybiB0aGVuIGV4cHIuY29tcGlsZVRvRnJhZ21lbnRzIG8sIGxldmVsIGVsc2Ugc3VwZXIgbywgbGV2ZWxcblxuICAgIGNvbXBpbGVOb2RlOiAobykgLT5cbiAgICAgICAgYW5zd2VyID0gW11cbiAgICAgICAgIyBUT0RPOiBJZiB3ZSBjYWxsIGV4cHJlc3Npb24uY29tcGlsZSgpIGhlcmUgdHdpY2UsIHdlJ2xsIHNvbWV0aW1lcyBnZXQgYmFjayBkaWZmZXJlbnQgcmVzdWx0cyFcbiAgICAgICAgYW5zd2VyLnB1c2ggQG1ha2VDb2RlIEB0YWIgKyBcInJldHVybiN7aWYgQGV4cHJlc3Npb24gdGhlbiBcIiBcIiBlbHNlIFwiXCJ9XCJcbiAgICAgICAgaWYgQGV4cHJlc3Npb25cbiAgICAgICAgICAgIGFuc3dlciA9IGFuc3dlci5jb25jYXQgQGV4cHJlc3Npb24uY29tcGlsZVRvRnJhZ21lbnRzIG8sIExFVkVMX1BBUkVOXG4gICAgICAgIGFuc3dlci5wdXNoIEBtYWtlQ29kZSBcIjtcIlxuICAgICAgICByZXR1cm4gYW5zd2VyXG5cbiMgYHlpZWxkIHJldHVybmAgd29ya3MgZXhhY3RseSBsaWtlIGByZXR1cm5gLCBleGNlcHQgdGhhdCBpdCB0dXJucyB0aGUgZnVuY3Rpb24gaW50byBhIGdlbmVyYXRvci5cblxuZXhwb3J0cy5ZaWVsZFJldHVybiA9IGNsYXNzIFlpZWxkUmV0dXJuIGV4dGVuZHMgUmV0dXJuXG4gICAgY29tcGlsZU5vZGU6IChvKSAtPlxuICAgICAgICB1bmxlc3Mgby5zY29wZS5wYXJlbnQ/XG4gICAgICAgICAgICBAZXJyb3IgJ3lpZWxkIGNhbiBvbmx5IG9jY3VyIGluc2lkZSBmdW5jdGlvbnMnXG4gICAgICAgIHN1cGVyXG5cbiMgMDAwICAgMDAwICAgMDAwMDAwMCAgIDAwMCAgICAgIDAwMCAgIDAwMCAgMDAwMDAwMDAgIFxuIyAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICAgMDAwICAgMDAwICAwMDAgICAgICAgXG4jICAwMDAgMDAwICAgMDAwMDAwMDAwICAwMDAgICAgICAwMDAgICAwMDAgIDAwMDAwMDAgICBcbiMgICAgMDAwICAgICAwMDAgICAwMDAgIDAwMCAgICAgIDAwMCAgIDAwMCAgMDAwICAgICAgIFxuIyAgICAgMCAgICAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgIDAwMDAwMDAgICAwMDAwMDAwMCAgXG5cbiMgQSB2YWx1ZSwgdmFyaWFibGUgb3IgbGl0ZXJhbCBvciBwYXJlbnRoZXNpemVkLCBpbmRleGVkIG9yIGRvdHRlZCBpbnRvLCBvciB2YW5pbGxhLlxuXG5leHBvcnRzLlZhbHVlID0gY2xhc3MgVmFsdWUgZXh0ZW5kcyBCYXNlXG4gICAgXG4gICAgY29uc3RydWN0b3I6IChiYXNlLCBwcm9wcywgdGFnKSAtPlxuICAgICAgICByZXR1cm4gYmFzZSBpZiBub3QgcHJvcHMgYW5kIGJhc2UgaW5zdGFuY2VvZiBWYWx1ZVxuICAgICAgICBAYmFzZSAgICAgICA9IGJhc2VcbiAgICAgICAgQHByb3BlcnRpZXMgPSBwcm9wcyBvciBbXVxuICAgICAgICBAW3RhZ10gICAgICA9IHRydWUgaWYgdGFnXG4gICAgICAgIHJldHVybiB0aGlzXG5cbiAgICBjaGlsZHJlbjogWydiYXNlJywgJ3Byb3BlcnRpZXMnXVxuXG4gICAgIyBBZGQgYSBwcm9wZXJ0eSAob3IgKnByb3BlcnRpZXMqICkgYEFjY2Vzc2AgdG8gdGhlIGxpc3QuXG4gICAgYWRkOiAocHJvcHMpIC0+XG4gICAgICAgIEBwcm9wZXJ0aWVzID0gQHByb3BlcnRpZXMuY29uY2F0IHByb3BzXG4gICAgICAgIHRoaXNcblxuICAgIGhhc1Byb3BlcnRpZXM6IC0+XG4gICAgICAgICEhQHByb3BlcnRpZXMubGVuZ3RoXG5cbiAgICBiYXJlTGl0ZXJhbDogKHR5cGUpIC0+XG4gICAgICAgIG5vdCBAcHJvcGVydGllcy5sZW5ndGggYW5kIEBiYXNlIGluc3RhbmNlb2YgdHlwZVxuXG4gICAgIyBTb21lIGJvb2xlYW4gY2hlY2tzIGZvciB0aGUgYmVuZWZpdCBvZiBvdGhlciBub2Rlcy5cbiAgICBpc0FycmF5OiAgICAgIC0+IEBiYXJlTGl0ZXJhbChBcnIpXG4gICAgaXNSYW5nZTogICAgICAtPiBAYmFyZUxpdGVyYWwoUmFuZ2UpXG4gICAgaXNDb21wbGV4OiAgICAtPiBAaGFzUHJvcGVydGllcygpIG9yIEBiYXNlLmlzQ29tcGxleCgpXG4gICAgaXNBc3NpZ25hYmxlOiAtPiBAaGFzUHJvcGVydGllcygpIG9yIEBiYXNlLmlzQXNzaWduYWJsZSgpXG4gICAgaXNOdW1iZXI6ICAgICAtPiBAYmFyZUxpdGVyYWwoTnVtYmVyTGl0ZXJhbClcbiAgICBpc1N0cmluZzogICAgIC0+IEBiYXJlTGl0ZXJhbChTdHJpbmdMaXRlcmFsKVxuICAgIGlzUmVnZXg6ICAgICAgLT4gQGJhcmVMaXRlcmFsKFJlZ2V4TGl0ZXJhbClcbiAgICBpc1VuZGVmaW5lZDogIC0+IEBiYXJlTGl0ZXJhbChVbmRlZmluZWRMaXRlcmFsKVxuICAgIGlzTnVsbDogICAgICAgLT4gQGJhcmVMaXRlcmFsKE51bGxMaXRlcmFsKVxuICAgIGlzQm9vbGVhbjogICAgLT4gQGJhcmVMaXRlcmFsKEJvb2xlYW5MaXRlcmFsKVxuICAgIGlzQXRvbWljOiAgICAgLT5cbiAgICAgICAgZm9yIG5vZGUgaW4gQHByb3BlcnRpZXMuY29uY2F0IEBiYXNlXG4gICAgICAgICAgICByZXR1cm4gbm8gaWYgbm9kZS5zb2FrIG9yIG5vZGUgaW5zdGFuY2VvZiBDYWxsXG4gICAgICAgIHllc1xuXG4gICAgaXNOb3RDYWxsYWJsZTogLT4gQGlzTnVtYmVyKCkgb3IgQGlzU3RyaW5nKCkgb3IgQGlzUmVnZXgoKSBvclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBpc0FycmF5KCkgb3IgQGlzUmFuZ2UoKSBvciBAaXNTcGxpY2UoKSBvciBAaXNPYmplY3QoKSBvclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBpc1VuZGVmaW5lZCgpIG9yIEBpc051bGwoKSBvciBAaXNCb29sZWFuKClcblxuICAgIGlzU3RhdGVtZW50OiAobykgICAgLT4gbm90IEBwcm9wZXJ0aWVzLmxlbmd0aCBhbmQgQGJhc2UuaXNTdGF0ZW1lbnQgb1xuICAgIGFzc2lnbnM6ICAgICAobmFtZSkgLT4gbm90IEBwcm9wZXJ0aWVzLmxlbmd0aCBhbmQgQGJhc2UuYXNzaWducyBuYW1lXG4gICAganVtcHM6ICAgICAgIChvKSAgICAtPiBub3QgQHByb3BlcnRpZXMubGVuZ3RoIGFuZCBAYmFzZS5qdW1wcyBvXG5cbiAgICBpc09iamVjdDogKG9ubHlHZW5lcmF0ZWQpIC0+XG4gICAgICAgIHJldHVybiBubyBpZiBAcHJvcGVydGllcy5sZW5ndGhcbiAgICAgICAgKEBiYXNlIGluc3RhbmNlb2YgT2JqKSBhbmQgKG5vdCBvbmx5R2VuZXJhdGVkIG9yIEBiYXNlLmdlbmVyYXRlZClcblxuICAgIGlzU3BsaWNlOiAtPlxuICAgICAgICBbLi4uLCBsYXN0UHJvcF0gPSBAcHJvcGVydGllc1xuICAgICAgICBsYXN0UHJvcCBpbnN0YW5jZW9mIFNsaWNlXG5cbiAgICBsb29rc1N0YXRpYzogKGNsYXNzTmFtZSkgLT5cbiAgICAgICAgQGJhc2UudmFsdWUgaXMgY2xhc3NOYW1lIGFuZCBAcHJvcGVydGllcy5sZW5ndGggaXMgMSBhbmRcbiAgICAgICAgICAgIEBwcm9wZXJ0aWVzWzBdLm5hbWU/LnZhbHVlICE9ICdwcm90b3R5cGUnXG5cbiAgICAjIFRoZSB2YWx1ZSBjYW4gYmUgdW53cmFwcGVkIGFzIGl0cyBpbm5lciBub2RlLCBpZiB0aGVyZSBhcmUgbm8gYXR0YWNoZWQgcHJvcGVydGllcy5cbiAgICB1bndyYXA6IC0+XG4gICAgICAgIGlmIEBwcm9wZXJ0aWVzLmxlbmd0aCB0aGVuIHRoaXMgZWxzZSBAYmFzZVxuXG4gICAgIyBBIHJlZmVyZW5jZSBoYXMgYmFzZSBwYXJ0IChgdGhpc2AgdmFsdWUpIGFuZCBuYW1lIHBhcnQuXG4gICAgIyBXZSBjYWNoZSB0aGVtIHNlcGFyYXRlbHkgZm9yIGNvbXBpbGluZyBjb21wbGV4IGV4cHJlc3Npb25zLlxuICAgICMgYGEoKVtiKCldID89IGNgIC0+IGAoX2Jhc2UgPSBhKCkpW19uYW1lID0gYigpXSA/IF9iYXNlW19uYW1lXSA9IGNgXG4gICAgXG4gICAgY2FjaGVSZWZlcmVuY2U6IChvKSAtPlxuICAgICAgICBcbiAgICAgICAgWy4uLiwgbmFtZV0gPSBAcHJvcGVydGllc1xuICAgICAgICBpZiBAcHJvcGVydGllcy5sZW5ndGggPCAyIGFuZCBub3QgQGJhc2UuaXNDb21wbGV4KCkgYW5kIG5vdCBuYW1lPy5pc0NvbXBsZXgoKVxuICAgICAgICAgICAgcmV0dXJuIFt0aGlzLCB0aGlzXSAgIyBgYWAgYGEuYmBcbiAgICAgICAgYmFzZSA9IG5ldyBWYWx1ZSBAYmFzZSwgQHByb3BlcnRpZXNbLi4uLTFdXG4gICAgICAgIGlmIGJhc2UuaXNDb21wbGV4KCkgICMgYGEoKS5iYFxuICAgICAgICAgICAgYnJlZiA9IG5ldyBJZGVudGlmaWVyTGl0ZXJhbCBvLnNjb3BlLmZyZWVWYXJpYWJsZSAnYmFzZSdcbiAgICAgICAgICAgIGJhc2UgPSBuZXcgVmFsdWUgbmV3IFBhcmVucyBuZXcgQXNzaWduIGJyZWYsIGJhc2VcbiAgICAgICAgcmV0dXJuIFtiYXNlLCBicmVmXSB1bmxlc3MgbmFtZSAgIyBgYSgpYFxuICAgICAgICBpZiBuYW1lLmlzQ29tcGxleCgpICAjIGBhW2IoKV1gXG4gICAgICAgICAgICBucmVmID0gbmV3IElkZW50aWZpZXJMaXRlcmFsIG8uc2NvcGUuZnJlZVZhcmlhYmxlICduYW1lJ1xuICAgICAgICAgICAgbmFtZSA9IG5ldyBJbmRleCBuZXcgQXNzaWduIG5yZWYsIG5hbWUuaW5kZXhcbiAgICAgICAgICAgIG5yZWYgPSBuZXcgSW5kZXggbnJlZlxuICAgICAgICBbYmFzZS5hZGQobmFtZSksIG5ldyBWYWx1ZShicmVmIG9yIGJhc2UuYmFzZSwgW25yZWYgb3IgbmFtZV0pXVxuXG4gICAgIyBXZSBjb21waWxlIGEgdmFsdWUgdG8gSmF2YVNjcmlwdCBieSBjb21waWxpbmcgYW5kIGpvaW5pbmcgZWFjaCBwcm9wZXJ0eS5cbiAgICAjIFRoaW5ncyBnZXQgbXVjaCBtb3JlIGludGVyZXN0aW5nIGlmIHRoZSBjaGFpbiBvZiBwcm9wZXJ0aWVzIGhhcyAqc29haypcbiAgICAjIG9wZXJhdG9ycyBgPy5gIGludGVyc3BlcnNlZC4gVGhlbiB3ZSBoYXZlIHRvIHRha2UgY2FyZSBub3QgdG8gYWNjaWRlbnRhbGx5XG4gICAgIyBldmFsdWF0ZSBhbnl0aGluZyB0d2ljZSB3aGVuIGJ1aWxkaW5nIHRoZSBzb2FrIGNoYWluLlxuICAgIFxuICAgIGNvbXBpbGVOb2RlOiAobykgLT5cbiAgICAgICAgXG4gICAgICAgIEBiYXNlLmZyb250ID0gQGZyb250XG4gICAgICAgIHByb3BzID0gQHByb3BlcnRpZXNcbiAgICAgICAgZnJhZ21lbnRzID0gQGJhc2UuY29tcGlsZVRvRnJhZ21lbnRzIG8sIChpZiBwcm9wcy5sZW5ndGggdGhlbiBMRVZFTF9BQ0NFU1MgZWxzZSBudWxsKVxuICAgICAgICBpZiBwcm9wcy5sZW5ndGggYW5kIFNJTVBMRU5VTS50ZXN0IGZyYWdtZW50c1RvVGV4dCBmcmFnbWVudHNcbiAgICAgICAgICAgIGZyYWdtZW50cy5wdXNoIEBtYWtlQ29kZSAnLidcbiAgICAgICAgZm9yIHByb3AgaW4gcHJvcHNcbiAgICAgICAgICAgIGZyYWdtZW50cy5wdXNoIChwcm9wLmNvbXBpbGVUb0ZyYWdtZW50cyBvKS4uLlxuICAgICAgICBmcmFnbWVudHNcblxuICAgICMgVW5mb2xkIGEgc29hayBpbnRvIGFuIGBJZmA6IGBhPy5iYCAtPiBgYS5iIGlmIGE/YFxuICAgIFxuICAgIHVuZm9sZFNvYWs6IChvKSAtPlxuICAgICAgICBcbiAgICAgICAgQHVuZm9sZGVkU29hayA/PSBkbyA9PlxuICAgICAgICAgICAgaWYgaWZuID0gQGJhc2UudW5mb2xkU29hayBvXG4gICAgICAgICAgICAgICAgaWZuLmJvZHkucHJvcGVydGllcy5wdXNoIEBwcm9wZXJ0aWVzLi4uXG4gICAgICAgICAgICAgICAgcmV0dXJuIGlmblxuICAgICAgICAgICAgZm9yIHByb3AsIGkgaW4gQHByb3BlcnRpZXMgd2hlbiBwcm9wLnNvYWtcbiAgICAgICAgICAgICAgICBwcm9wLnNvYWsgPSBvZmZcbiAgICAgICAgICAgICAgICBmc3QgPSBuZXcgVmFsdWUgQGJhc2UsIEBwcm9wZXJ0aWVzWy4uLmldXG4gICAgICAgICAgICAgICAgc25kID0gbmV3IFZhbHVlIEBiYXNlLCBAcHJvcGVydGllc1tpLi5dXG4gICAgICAgICAgICAgICAgaWYgZnN0LmlzQ29tcGxleCgpXG4gICAgICAgICAgICAgICAgICAgIHJlZiA9IG5ldyBJZGVudGlmaWVyTGl0ZXJhbCBvLnNjb3BlLmZyZWVWYXJpYWJsZSAncmVmJ1xuICAgICAgICAgICAgICAgICAgICBmc3QgPSBuZXcgUGFyZW5zIG5ldyBBc3NpZ24gcmVmLCBmc3RcbiAgICAgICAgICAgICAgICAgICAgc25kLmJhc2UgPSByZWZcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IElmIG5ldyBFeGlzdGVuY2UoZnN0KSwgc25kLCBzb2FrOiBvblxuICAgICAgICAgICAgbm9cblxuIyAgMDAwMDAwMCAgIDAwMDAwMDAgICAwMCAgICAgMDAgIDAwICAgICAwMCAgMDAwMDAwMDAgIDAwMCAgIDAwMCAgMDAwMDAwMDAwICBcbiMgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAwICAwMDAgICAgIDAwMCAgICAgXG4jIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMDAwMDAwMCAgMDAwMDAwMDAwICAwMDAwMDAwICAgMDAwIDAgMDAwICAgICAwMDAgICAgIFxuIyAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgMCAwMDAgIDAwMCAwIDAwMCAgMDAwICAgICAgIDAwMCAgMDAwMCAgICAgMDAwICAgICBcbiMgIDAwMDAwMDAgICAwMDAwMDAwICAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMDAwMDAwICAwMDAgICAwMDAgICAgIDAwMCAgICAgXG5cbmV4cG9ydHMuQ29tbWVudCA9IGNsYXNzIENvbW1lbnQgZXh0ZW5kcyBCYXNlXG4gICAgXG4gICAgY29uc3RydWN0b3I6IChAY29tbWVudCkgLT5cblxuICAgIGlzU3RhdGVtZW50OiBZRVNcbiAgICBtYWtlUmV0dXJuOiAgVEhJU1xuXG4gICAgY29tcGlsZU5vZGU6IChvLCBsZXZlbCkgLT5cbiAgICAgICAgXG4gICAgICAgIGNvbW1lbnQgPSBAY29tbWVudC5yZXBsYWNlIC9eKFxccyopIyg/PVxccykvZ20sIFwiJDEgKlwiXG4gICAgICAgIGNvZGUgPSBcIi8qI3ttdWx0aWRlbnQgY29tbWVudCwgQHRhYn0je2lmICdcXG4nIGluIGNvbW1lbnQgdGhlbiBcIlxcbiN7QHRhYn1cIiBlbHNlICcnfSAqL1wiXG4gICAgICAgIGNvZGUgPSBvLmluZGVudCArIGNvZGUgaWYgKGxldmVsIG9yIG8ubGV2ZWwpIGlzIExFVkVMX1RPUFxuICAgICAgICBbQG1ha2VDb2RlKFwiXFxuXCIpLCBAbWFrZUNvZGUoY29kZSldXG5cbiMgIDAwMDAwMDAgICAwMDAwMDAwICAgMDAwICAgICAgMDAwICAgICAgXG4jIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgICAgIDAwMCAgICAgIFxuIyAwMDAgICAgICAgMDAwMDAwMDAwICAwMDAgICAgICAwMDAgICAgICBcbiMgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgICAgMDAwICAgICAgXG4jICAwMDAwMDAwICAwMDAgICAwMDAgIDAwMDAwMDAgIDAwMDAwMDAgIFxuXG4jIE5vZGUgZm9yIGEgZnVuY3Rpb24gaW52b2NhdGlvbi5cbiAgICBcbmV4cG9ydHMuQ2FsbCA9IGNsYXNzIENhbGwgZXh0ZW5kcyBCYXNlXG4gICAgY29uc3RydWN0b3I6IChAdmFyaWFibGUsIEBhcmdzID0gW10sIEBzb2FrKSAtPlxuICAgICAgICBAaXNOZXcgICAgICA9IGZhbHNlXG4gICAgICAgIGlmIEB2YXJpYWJsZSBpbnN0YW5jZW9mIFZhbHVlIGFuZCBAdmFyaWFibGUuaXNOb3RDYWxsYWJsZSgpXG4gICAgICAgICAgICBAdmFyaWFibGUuZXJyb3IgXCJsaXRlcmFsIGlzIG5vdCBhIGZ1bmN0aW9uXCJcblxuICAgIGNoaWxkcmVuOiBbJ3ZhcmlhYmxlJywgJ2FyZ3MnXVxuXG4gICAgIyBXaGVuIHNldHRpbmcgdGhlIGxvY2F0aW9uLCB3ZSBzb21ldGltZXMgbmVlZCB0byB1cGRhdGUgdGhlIHN0YXJ0IGxvY2F0aW9uIHRvXG4gICAgIyBhY2NvdW50IGZvciBhIG5ld2x5LWRpc2NvdmVyZWQgYG5ld2Agb3BlcmF0b3IgdG8gdGhlIGxlZnQgb2YgdXMuIFRoaXNcbiAgICAjIGV4cGFuZHMgdGhlIHJhbmdlIG9uIHRoZSBsZWZ0LCBidXQgbm90IHRoZSByaWdodC5cbiAgICBcbiAgICB1cGRhdGVMb2NhdGlvbkRhdGFJZk1pc3Npbmc6IChsb2NhdGlvbkRhdGEpIC0+XG4gICAgICAgIFxuICAgICAgICBpZiBAbG9jYXRpb25EYXRhIGFuZCBAbmVlZHNVcGRhdGVkU3RhcnRMb2NhdGlvblxuICAgICAgICAgICAgQGxvY2F0aW9uRGF0YS5maXJzdF9saW5lID0gbG9jYXRpb25EYXRhLmZpcnN0X2xpbmVcbiAgICAgICAgICAgIEBsb2NhdGlvbkRhdGEuZmlyc3RfY29sdW1uID0gbG9jYXRpb25EYXRhLmZpcnN0X2NvbHVtblxuICAgICAgICAgICAgYmFzZSA9IEB2YXJpYWJsZT8uYmFzZSBvciBAdmFyaWFibGVcbiAgICAgICAgICAgIGlmIGJhc2UubmVlZHNVcGRhdGVkU3RhcnRMb2NhdGlvblxuICAgICAgICAgICAgICAgIEB2YXJpYWJsZS5sb2NhdGlvbkRhdGEuZmlyc3RfbGluZSA9IGxvY2F0aW9uRGF0YS5maXJzdF9saW5lXG4gICAgICAgICAgICAgICAgQHZhcmlhYmxlLmxvY2F0aW9uRGF0YS5maXJzdF9jb2x1bW4gPSBsb2NhdGlvbkRhdGEuZmlyc3RfY29sdW1uXG4gICAgICAgICAgICAgICAgYmFzZS51cGRhdGVMb2NhdGlvbkRhdGFJZk1pc3NpbmcgbG9jYXRpb25EYXRhXG4gICAgICAgICAgICBkZWxldGUgQG5lZWRzVXBkYXRlZFN0YXJ0TG9jYXRpb25cbiAgICAgICAgc3VwZXJcblxuICAgICMgVGFnIHRoaXMgaW52b2NhdGlvbiBhcyBjcmVhdGluZyBhIG5ldyBpbnN0YW5jZS5cbiAgICBuZXdJbnN0YW5jZTogLT5cbiAgICAgICAgYmFzZSA9IEB2YXJpYWJsZT8uYmFzZSBvciBAdmFyaWFibGVcbiAgICAgICAgaWYgYmFzZSBpbnN0YW5jZW9mIENhbGwgYW5kIG5vdCBiYXNlLmlzTmV3XG4gICAgICAgICAgICBiYXNlLm5ld0luc3RhbmNlKClcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgQGlzTmV3ID0gdHJ1ZVxuICAgICAgICBAbmVlZHNVcGRhdGVkU3RhcnRMb2NhdGlvbiA9IHRydWVcbiAgICAgICAgdGhpc1xuXG4gICAgIyBTb2FrZWQgY2hhaW5lZCBpbnZvY2F0aW9ucyB1bmZvbGQgaW50byBpZi9lbHNlIHRlcm5hcnkgc3RydWN0dXJlcy5cbiAgICB1bmZvbGRTb2FrOiAobykgLT5cbiAgICAgICAgaWYgQHNvYWtcbiAgICAgICAgICAgIGlmIHRoaXMgaW5zdGFuY2VvZiBTdXBlckNhbGxcbiAgICAgICAgICAgICAgICBsZWZ0ID0gbmV3IExpdGVyYWwgQHN1cGVyUmVmZXJlbmNlIG9cbiAgICAgICAgICAgICAgICByaXRlID0gbmV3IFZhbHVlIGxlZnRcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICByZXR1cm4gaWZuIGlmIGlmbiA9IHVuZm9sZFNvYWsgbywgdGhpcywgJ3ZhcmlhYmxlJ1xuICAgICAgICAgICAgICAgIFtsZWZ0LCByaXRlXSA9IG5ldyBWYWx1ZShAdmFyaWFibGUpLmNhY2hlUmVmZXJlbmNlIG9cbiAgICAgICAgICAgIHJpdGUgPSBuZXcgQ2FsbCByaXRlLCBAYXJnc1xuICAgICAgICAgICAgcml0ZS5pc05ldyA9IEBpc05ld1xuICAgICAgICAgICAgbGVmdCA9IG5ldyBMaXRlcmFsIFwidHlwZW9mICN7IGxlZnQuY29tcGlsZSBvIH0gPT09IFxcXCJmdW5jdGlvblxcXCJcIlxuICAgICAgICAgICAgcmV0dXJuIG5ldyBJZiBsZWZ0LCBuZXcgVmFsdWUocml0ZSksIHNvYWs6IHllc1xuICAgICAgICBjYWxsID0gdGhpc1xuICAgICAgICBsaXN0ID0gW11cbiAgICAgICAgbG9vcFxuICAgICAgICAgICAgaWYgY2FsbC52YXJpYWJsZSBpbnN0YW5jZW9mIENhbGxcbiAgICAgICAgICAgICAgICBsaXN0LnB1c2ggY2FsbFxuICAgICAgICAgICAgICAgIGNhbGwgPSBjYWxsLnZhcmlhYmxlXG4gICAgICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICAgIGJyZWFrIHVubGVzcyBjYWxsLnZhcmlhYmxlIGluc3RhbmNlb2YgVmFsdWVcbiAgICAgICAgICAgIGxpc3QucHVzaCBjYWxsXG4gICAgICAgICAgICBicmVhayB1bmxlc3MgKGNhbGwgPSBjYWxsLnZhcmlhYmxlLmJhc2UpIGluc3RhbmNlb2YgQ2FsbFxuICAgICAgICBmb3IgY2FsbCBpbiBsaXN0LnJldmVyc2UoKVxuICAgICAgICAgICAgaWYgaWZuXG4gICAgICAgICAgICAgICAgaWYgY2FsbC52YXJpYWJsZSBpbnN0YW5jZW9mIENhbGxcbiAgICAgICAgICAgICAgICAgICAgY2FsbC52YXJpYWJsZSA9IGlmblxuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgY2FsbC52YXJpYWJsZS5iYXNlID0gaWZuXG4gICAgICAgICAgICBpZm4gPSB1bmZvbGRTb2FrIG8sIGNhbGwsICd2YXJpYWJsZSdcbiAgICAgICAgaWZuXG5cbiAgICBjb21waWxlTm9kZTogKG8pIC0+ICMgQ29tcGlsZSBhIHZhbmlsbGEgZnVuY3Rpb24gY2FsbC5cbiAgICAgICAgXG4gICAgICAgIEB2YXJpYWJsZT8uZnJvbnQgPSBAZnJvbnRcbiAgICAgICAgY29tcGlsZWRBcnJheSA9IFNwbGF0LmNvbXBpbGVTcGxhdHRlZEFycmF5IG8sIEBhcmdzLCB0cnVlXG4gICAgICAgIGlmIGNvbXBpbGVkQXJyYXkubGVuZ3RoXG4gICAgICAgICAgICByZXR1cm4gQGNvbXBpbGVTcGxhdCBvLCBjb21waWxlZEFycmF5XG4gICAgICAgIGNvbXBpbGVkQXJncyA9IFtdXG4gICAgICAgIGZvciBhcmcsIGFyZ0luZGV4IGluIEBhcmdzXG4gICAgICAgICAgICBpZiBhcmdJbmRleCB0aGVuIGNvbXBpbGVkQXJncy5wdXNoIEBtYWtlQ29kZSBcIiwgXCJcbiAgICAgICAgICAgIGNvbXBpbGVkQXJncy5wdXNoIChhcmcuY29tcGlsZVRvRnJhZ21lbnRzIG8sIExFVkVMX0xJU1QpLi4uXG5cbiAgICAgICAgZnJhZ21lbnRzID0gW11cbiAgICAgICAgaWYgdGhpcyBpbnN0YW5jZW9mIFN1cGVyQ2FsbFxuICAgICAgICAgICAgcHJlZmFjZSA9IEBzdXBlclJlZmVyZW5jZShvKSArIFwiLmNhbGwoI3tAc3VwZXJUaGlzKG8pfVwiXG4gICAgICAgICAgICBpZiBjb21waWxlZEFyZ3MubGVuZ3RoIHRoZW4gcHJlZmFjZSArPSBcIiwgXCJcbiAgICAgICAgICAgIGZyYWdtZW50cy5wdXNoIEBtYWtlQ29kZSBwcmVmYWNlXG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGlmIEBpc05ldyB0aGVuIGZyYWdtZW50cy5wdXNoIEBtYWtlQ29kZSAnbmV3ICdcbiAgICAgICAgICAgIGZyYWdtZW50cy5wdXNoIEB2YXJpYWJsZS5jb21waWxlVG9GcmFnbWVudHMobywgTEVWRUxfQUNDRVNTKS4uLlxuICAgICAgICAgICAgZnJhZ21lbnRzLnB1c2ggQG1ha2VDb2RlIFwiKFwiXG4gICAgICAgIGZyYWdtZW50cy5wdXNoIGNvbXBpbGVkQXJncy4uLlxuICAgICAgICBmcmFnbWVudHMucHVzaCBAbWFrZUNvZGUgXCIpXCJcbiAgICAgICAgZnJhZ21lbnRzXG5cbiAgICAjIElmIHlvdSBjYWxsIGEgZnVuY3Rpb24gd2l0aCBhIHNwbGF0LCBpdCdzIGNvbnZlcnRlZCBpbnRvIGEgSmF2YVNjcmlwdFxuICAgICMgYC5hcHBseSgpYCBjYWxsIHRvIGFsbG93IGFuIGFycmF5IG9mIGFyZ3VtZW50cyB0byBiZSBwYXNzZWQuXG4gICAgIyBJZiBpdCdzIGEgY29uc3RydWN0b3IsIHRoZW4gdGhpbmdzIGdldCByZWFsIHRyaWNreS4gV2UgaGF2ZSB0byBpbmplY3QgYW5cbiAgICAjIGlubmVyIGNvbnN0cnVjdG9yIGluIG9yZGVyIHRvIGJlIGFibGUgdG8gcGFzcyB0aGUgdmFyYXJncy5cbiAgICAjXG4gICAgIyBzcGxhdEFyZ3MgaXMgYW4gYXJyYXkgb2YgQ29kZUZyYWdtZW50cyB0byBwdXQgaW50byB0aGUgJ2FwcGx5Jy5cbiAgICBcbiAgICBjb21waWxlU3BsYXQ6IChvLCBzcGxhdEFyZ3MpIC0+XG4gICAgICAgIFxuICAgICAgICBpZiB0aGlzIGluc3RhbmNlb2YgU3VwZXJDYWxsXG4gICAgICAgICAgICByZXR1cm4gW10uY29uY2F0IEBtYWtlQ29kZShcIiN7IEBzdXBlclJlZmVyZW5jZSBvIH0uYXBwbHkoI3tAc3VwZXJUaGlzKG8pfSwgXCIpLFxuICAgICAgICAgICAgICAgIHNwbGF0QXJncywgQG1ha2VDb2RlKFwiKVwiKVxuXG4gICAgICAgIGlmIEBpc05ld1xuICAgICAgICAgICAgaWR0ID0gQHRhYiArIFRBQlxuICAgICAgICAgICAgcmV0dXJuIFtdLmNvbmNhdCBAbWFrZUNvZGUoXCJcIlwiXG4gICAgICAgICAgICAgICAgKGZ1bmN0aW9uKGZ1bmMsIGFyZ3MsIGN0b3IpIHtcbiAgICAgICAgICAgICAgICAje2lkdH1jdG9yLnByb3RvdHlwZSA9IGZ1bmMucHJvdG90eXBlO1xuICAgICAgICAgICAgICAgICN7aWR0fXZhciBjaGlsZCA9IG5ldyBjdG9yLCByZXN1bHQgPSBmdW5jLmFwcGx5KGNoaWxkLCBhcmdzKTtcbiAgICAgICAgICAgICAgICAje2lkdH1yZXR1cm4gT2JqZWN0KHJlc3VsdCkgPT09IHJlc3VsdCA/IHJlc3VsdCA6IGNoaWxkO1xuICAgICAgICAgICAgICAgICN7QHRhYn19KShcIlwiXCIpLFxuICAgICAgICAgICAgICAgIChAdmFyaWFibGUuY29tcGlsZVRvRnJhZ21lbnRzIG8sIExFVkVMX0xJU1QpLFxuICAgICAgICAgICAgICAgIEBtYWtlQ29kZShcIiwgXCIpLCBzcGxhdEFyZ3MsIEBtYWtlQ29kZShcIiwgZnVuY3Rpb24oKXt9KVwiKVxuXG4gICAgICAgIGFuc3dlciA9IFtdXG4gICAgICAgIGJhc2UgPSBuZXcgVmFsdWUgQHZhcmlhYmxlXG4gICAgICAgIGlmIChuYW1lID0gYmFzZS5wcm9wZXJ0aWVzLnBvcCgpKSBhbmQgYmFzZS5pc0NvbXBsZXgoKVxuICAgICAgICAgICAgcmVmID0gby5zY29wZS5mcmVlVmFyaWFibGUgJ3JlZidcbiAgICAgICAgICAgIGFuc3dlciA9IGFuc3dlci5jb25jYXQgQG1ha2VDb2RlKFwiKCN7cmVmfSA9IFwiKSxcbiAgICAgICAgICAgICAgICAoYmFzZS5jb21waWxlVG9GcmFnbWVudHMgbywgTEVWRUxfTElTVCksXG4gICAgICAgICAgICAgICAgQG1ha2VDb2RlKFwiKVwiKSxcbiAgICAgICAgICAgICAgICBuYW1lLmNvbXBpbGVUb0ZyYWdtZW50cyhvKVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICBmdW4gPSBiYXNlLmNvbXBpbGVUb0ZyYWdtZW50cyBvLCBMRVZFTF9BQ0NFU1NcbiAgICAgICAgICAgIGZ1biA9IEB3cmFwSW5CcmFjZXMgZnVuIGlmIFNJTVBMRU5VTS50ZXN0IGZyYWdtZW50c1RvVGV4dCBmdW5cbiAgICAgICAgICAgIGlmIG5hbWVcbiAgICAgICAgICAgICAgICByZWYgPSBmcmFnbWVudHNUb1RleHQgZnVuXG4gICAgICAgICAgICAgICAgZnVuLnB1c2ggKG5hbWUuY29tcGlsZVRvRnJhZ21lbnRzIG8pLi4uXG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgcmVmID0gJ251bGwnXG4gICAgICAgICAgICBhbnN3ZXIgPSBhbnN3ZXIuY29uY2F0IGZ1blxuICAgICAgICBhbnN3ZXIgPSBhbnN3ZXIuY29uY2F0IEBtYWtlQ29kZShcIi5hcHBseSgje3JlZn0sIFwiKSwgc3BsYXRBcmdzLCBAbWFrZUNvZGUoXCIpXCIpXG5cbiMgIDAwMDAwMDAgIDAwMCAgIDAwMCAgMDAwMDAwMDAgICAwMDAwMDAwMCAgMDAwMDAwMDAgICBcbiMgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAgICAgMDAwICAgMDAwICBcbiMgMDAwMDAwMCAgIDAwMCAgIDAwMCAgMDAwMDAwMDAgICAwMDAwMDAwICAgMDAwMDAwMCAgICBcbiMgICAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICAgICAwMDAgICAgICAgMDAwICAgMDAwICBcbiMgMDAwMDAwMCAgICAwMDAwMDAwICAgMDAwICAgICAgICAwMDAwMDAwMCAgMDAwICAgMDAwICBcblxuIyBUYWtlcyBjYXJlIG9mIGNvbnZlcnRpbmcgYHN1cGVyKClgIGNhbGxzIGludG8gY2FsbHMgYWdhaW5zdCB0aGUgcHJvdG90eXBlJ3MgZnVuY3Rpb24gb2YgdGhlIHNhbWUgbmFtZS5cblxuZXhwb3J0cy5TdXBlckNhbGwgPSBjbGFzcyBTdXBlckNhbGwgZXh0ZW5kcyBDYWxsXG4gICAgXG4gICAgY29uc3RydWN0b3I6IChhcmdzKSAtPlxuICAgICAgICBzdXBlciBudWxsLCBhcmdzID8gW25ldyBTcGxhdCBuZXcgSWRlbnRpZmllckxpdGVyYWwgJ2FyZ3VtZW50cyddXG4gICAgICAgICMgQWxsb3cgdG8gcmVjb2duaXplIGEgYmFyZSBgc3VwZXJgIGNhbGwgd2l0aG91dCBwYXJlbnRoZXNlcyBhbmQgYXJndW1lbnRzLlxuICAgICAgICBAaXNCYXJlID0gYXJncz9cblxuICAgICMgR3JhYiB0aGUgcmVmZXJlbmNlIHRvIHRoZSBzdXBlcmNsYXNzJ3MgaW1wbGVtZW50YXRpb24gb2YgdGhlIGN1cnJlbnQgbWV0aG9kLlxuICAgIFxuICAgIHN1cGVyUmVmZXJlbmNlOiAobykgLT5cbiAgICAgICAgXG4gICAgICAgIG1ldGhvZCA9IG8uc2NvcGUubmFtZWRNZXRob2QoKVxuICAgICAgICBpZiBtZXRob2Q/LmtsYXNzXG4gICAgICAgICAgICB7a2xhc3MsIG5hbWUsIHZhcmlhYmxlfSA9IG1ldGhvZFxuICAgICAgICAgICAgaWYga2xhc3MuaXNDb21wbGV4KClcbiAgICAgICAgICAgICAgICBicmVmID0gbmV3IElkZW50aWZpZXJMaXRlcmFsIG8uc2NvcGUucGFyZW50LmZyZWVWYXJpYWJsZSAnYmFzZSdcbiAgICAgICAgICAgICAgICBiYXNlID0gbmV3IFZhbHVlIG5ldyBQYXJlbnMgbmV3IEFzc2lnbiBicmVmLCBrbGFzc1xuICAgICAgICAgICAgICAgIHZhcmlhYmxlLmJhc2UgPSBiYXNlXG4gICAgICAgICAgICAgICAgdmFyaWFibGUucHJvcGVydGllcy5zcGxpY2UgMCwga2xhc3MucHJvcGVydGllcy5sZW5ndGhcbiAgICAgICAgICAgIGlmIG5hbWUuaXNDb21wbGV4KCkgb3IgKG5hbWUgaW5zdGFuY2VvZiBJbmRleCBhbmQgbmFtZS5pbmRleC5pc0Fzc2lnbmFibGUoKSlcbiAgICAgICAgICAgICAgICBucmVmID0gbmV3IElkZW50aWZpZXJMaXRlcmFsIG8uc2NvcGUucGFyZW50LmZyZWVWYXJpYWJsZSAnbmFtZSdcbiAgICAgICAgICAgICAgICBuYW1lID0gbmV3IEluZGV4IG5ldyBBc3NpZ24gbnJlZiwgbmFtZS5pbmRleFxuICAgICAgICAgICAgICAgIHZhcmlhYmxlLnByb3BlcnRpZXMucG9wKClcbiAgICAgICAgICAgICAgICB2YXJpYWJsZS5wcm9wZXJ0aWVzLnB1c2ggbmFtZVxuICAgICAgICAgICAgYWNjZXNzZXMgPSBbbmV3IEFjY2VzcyBuZXcgUHJvcGVydHlOYW1lICdfX3N1cGVyX18nXVxuICAgICAgICAgICAgYWNjZXNzZXMucHVzaCBuZXcgQWNjZXNzIG5ldyBQcm9wZXJ0eU5hbWUgJ2NvbnN0cnVjdG9yJyBpZiBtZXRob2Quc3RhdGljXG4gICAgICAgICAgICBhY2Nlc3Nlcy5wdXNoIGlmIG5yZWY/IHRoZW4gbmV3IEluZGV4IG5yZWYgZWxzZSBuYW1lXG4gICAgICAgICAgICAobmV3IFZhbHVlIGJyZWYgPyBrbGFzcywgYWNjZXNzZXMpLmNvbXBpbGUgb1xuICAgICAgICBlbHNlIGlmIG1ldGhvZD8uY3RvclxuICAgICAgICAgICAgIyBsb2cgXCJTdXBlckNhbGwuc3VwZXJSZWZlcmVuY2UgI3ttZXRob2QubmFtZX0gZGFkdW1tIVwiXG4gICAgICAgICAgICBcIiN7bWV0aG9kLm5hbWV9Ll9fc3VwZXJfXy5jb25zdHJ1Y3RvclwiXG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIEBlcnJvciAnY2Fubm90IGNhbGwgc3VwZXIgb3V0c2lkZSBvZiBhbiBpbnN0YW5jZSBtZXRob2QuJ1xuXG4gICAgIyBUaGUgYXBwcm9wcmlhdGUgYHRoaXNgIHZhbHVlIGZvciBhIGBzdXBlcmAgY2FsbC5cbiAgICAgICAgXG4gICAgc3VwZXJUaGlzOiAobykgLT5cbiAgICAgICAgbWV0aG9kID0gby5zY29wZS5tZXRob2RcbiAgICAgICAgKG1ldGhvZCBhbmQgbm90IG1ldGhvZC5rbGFzcyBhbmQgbWV0aG9kLmNvbnRleHQpIG9yIFwidGhpc1wiXG5cbiAgICBjb21waWxlU3BsYXQ6IChvLCBzcGxhdEFyZ3MpIC0+XG4gICAgICAgICMgbG9nICdjb21waWxlU3BsYXQnLCBvLmZlYXR1cmVcbiAgICAgICAgaWYgc3BsYXRBcmdzLmxlbmd0aCA9PSAxIGFuZCBzcGxhdEFyZ3NbMF0uY29kZSA9PSAnYXJndW1lbnRzJyBhbmQgQGNvbmZpZ1BhcmFtZXRlcj8gYW5kIG8uZmVhdHVyZVsnY29uZmlnLXBhcmFtZXRlcnMnXVxuICAgICAgICAgICAgIyBUT0RPOiBzaG91bGRuJ3QgYWxsIHJlZmVyZW5jZXMgdG8gYXJndW1lbnRzIGJlIGNvbnZlcnRlZD9cbiAgICAgICAgICAgIHJldHVybiBbXS5jb25jYXQgQG1ha2VDb2RlKFwiI3tAY29uZmlnUGFyYW1ldGVyQ29kZUJlZm9yZVN1cGVyKCl9I3sgQHN1cGVyUmVmZXJlbmNlIG8gfS5hcHBseSgje0BzdXBlclRoaXMobyl9LCBcIiksIHNwbGF0QXJncywgQG1ha2VDb2RlKFwiKVwiKVxuICAgICAgICAgXG4gICAgICAgIHN1cGVyXG4gICAgICAgIFxuICAgIGNvbmZpZ1BhcmFtZXRlckNvZGVCZWZvcmVTdXBlcjogLT5cbiAgICAgICAgXG4gICAgICAgIHJldHVybiAnJyBpZiBub3QgcGFyYW0gPSBAY29uZmlnUGFyYW1ldGVyXG5cbiAgICAgICAgYSA9IHBhcmFtLm9iamVjdHMubWFwIChvYmopIC0+IFxuICAgICAgICAgICAgbiA9IG9iai52YXJpYWJsZS5iYXNlLnZhbHVlXG4gICAgICAgICAgICB0ID0gb2JqLnZhbHVlLnZhcmlhYmxlLnRoaXMgYW5kICd0aGlzLicgb3IgJydcbiAgICAgICAgICAgIFwiI3tufToje3Qrbn1cIlxuICAgICAgICAgICAgXG4gICAgICAgIFwiYXJndW1lbnRzWzBdID0gXy5kZWZhdWx0cyh7I3thLmpvaW4gJywnfX0sIGFyZ3VtZW50c1swXSk7IFwiXG5cbiMgMDAwMDAwMDAgICAwMDAwMDAwMCAgIDAwMDAwMDAgICAwMDAwMDAwMCAgMDAwICAgMDAwICBcbiMgMDAwICAgMDAwICAwMDAgICAgICAgMDAwICAgICAgICAwMDAgICAgICAgIDAwMCAwMDAgICBcbiMgMDAwMDAwMCAgICAwMDAwMDAwICAgMDAwICAwMDAwICAwMDAwMDAwICAgICAwMDAwMCAgICBcbiMgMDAwICAgMDAwICAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgICAgICAgIDAwMCAwMDAgICBcbiMgMDAwICAgMDAwICAwMDAwMDAwMCAgIDAwMDAwMDAgICAwMDAwMDAwMCAgMDAwICAgMDAwICBcblxuIyBSZWdleGVzIHdpdGggaW50ZXJwb2xhdGlvbnMgYXJlIGluIGZhY3QganVzdCBhIHZhcmlhdGlvbiBvZiBhIGBDYWxsYCAoYVxuIyBgUmVnRXhwKClgIGNhbGwgdG8gYmUgcHJlY2lzZSkgd2l0aCBhIGBTdHJpbmdXaXRoSW50ZXJwb2xhdGlvbnNgIGluc2lkZS5cblxuZXhwb3J0cy5SZWdleFdpdGhJbnRlcnBvbGF0aW9ucyA9IGNsYXNzIFJlZ2V4V2l0aEludGVycG9sYXRpb25zIGV4dGVuZHMgQ2FsbFxuICAgIGNvbnN0cnVjdG9yOiAoYXJncyA9IFtdKSAtPlxuICAgICAgICBzdXBlciAobmV3IFZhbHVlIG5ldyBJZGVudGlmaWVyTGl0ZXJhbCAnUmVnRXhwJyksIGFyZ3MsIGZhbHNlXG5cbiMgVGFnZ2VkVGVtcGxhdGVDYWxsXG5cbmV4cG9ydHMuVGFnZ2VkVGVtcGxhdGVDYWxsID0gY2xhc3MgVGFnZ2VkVGVtcGxhdGVDYWxsIGV4dGVuZHMgQ2FsbFxuICAgIGNvbnN0cnVjdG9yOiAodmFyaWFibGUsIGFyZywgc29haykgLT5cbiAgICAgICAgYXJnID0gbmV3IFN0cmluZ1dpdGhJbnRlcnBvbGF0aW9ucyBCbG9jay53cmFwKFsgbmV3IFZhbHVlIGFyZyBdKSBpZiBhcmcgaW5zdGFuY2VvZiBTdHJpbmdMaXRlcmFsXG4gICAgICAgIHN1cGVyIHZhcmlhYmxlLCBbIGFyZyBdLCBzb2FrXG5cbiAgICBjb21waWxlTm9kZTogKG8pIC0+XG4gICAgICAgICMgVGVsbCBgU3RyaW5nV2l0aEludGVycG9sYXRpb25zYCB3aGV0aGVyIHRvIGNvbXBpbGUgYXMgRVMyMDE1IG9yIG5vdDsgd2lsbCBiZSByZW1vdmVkIGluIEtvZmZlZSAyLlxuICAgICAgICBvLmluVGFnZ2VkVGVtcGxhdGVDYWxsID0geWVzXG4gICAgICAgIEB2YXJpYWJsZS5jb21waWxlVG9GcmFnbWVudHMobywgTEVWRUxfQUNDRVNTKS5jb25jYXQgQGFyZ3NbMF0uY29tcGlsZVRvRnJhZ21lbnRzKG8sIExFVkVMX0xJU1QpXG5cbiMgMDAwMDAwMDAgIDAwMCAgIDAwMCAgMDAwMDAwMDAwICAwMDAwMDAwMCAgMDAwICAgMDAwICAwMDAwMDAwICAgICAwMDAwMDAwICBcbiMgMDAwICAgICAgICAwMDAgMDAwICAgICAgMDAwICAgICAwMDAgICAgICAgMDAwMCAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgICBcbiMgMDAwMDAwMCAgICAgMDAwMDAgICAgICAgMDAwICAgICAwMDAwMDAwICAgMDAwIDAgMDAwICAwMDAgICAwMDAgIDAwMDAwMDAgICBcbiMgMDAwICAgICAgICAwMDAgMDAwICAgICAgMDAwICAgICAwMDAgICAgICAgMDAwICAwMDAwICAwMDAgICAwMDAgICAgICAgMDAwICBcbiMgMDAwMDAwMDAgIDAwMCAgIDAwMCAgICAgMDAwICAgICAwMDAwMDAwMCAgMDAwICAgMDAwICAwMDAwMDAwICAgIDAwMDAwMDAgICBcblxuIyBOb2RlIHRvIGV4dGVuZCBhbiBvYmplY3QncyBwcm90b3R5cGUgd2l0aCBhbiBhbmNlc3RvciBvYmplY3QuXG4jIEFmdGVyIGBnb29nLmluaGVyaXRzYCBmcm9tIHRoZVxuIyBbQ2xvc3VyZSBMaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZ29vZ2xlL2Nsb3N1cmUtbGlicmFyeS9ibG9iL21hc3Rlci9jbG9zdXJlL2dvb2cvYmFzZS5qcykuXG5cbmV4cG9ydHMuRXh0ZW5kcyA9IGNsYXNzIEV4dGVuZHMgZXh0ZW5kcyBCYXNlXG4gICAgXG4gICAgY29uc3RydWN0b3I6IChAY2hpbGQsIEBwYXJlbnQpIC0+XG5cbiAgICBjaGlsZHJlbjogWydjaGlsZCcsICdwYXJlbnQnXVxuXG4gICAgIyBIb29rcyBvbmUgY29uc3RydWN0b3IgaW50byBhbm90aGVyJ3MgcHJvdG90eXBlIGNoYWluLlxuICAgIGNvbXBpbGVUb0ZyYWdtZW50czogKG8pIC0+XG4gICAgICAgIG5ldyBDYWxsKG5ldyBWYWx1ZShuZXcgTGl0ZXJhbCB1dGlsaXR5ICdleHRlbmQnLCBvKSwgW0BjaGlsZCwgQHBhcmVudF0pLmNvbXBpbGVUb0ZyYWdtZW50cyBvXG5cbiMgIDAwMDAwMDAgICAgMDAwMDAwMCAgIDAwMDAwMDAgIDAwMDAwMDAwICAgMDAwMDAwMCAgIDAwMDAwMDAgIFxuIyAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgICAgICAgMDAwICAgICAgIDAwMCAgICAgICAwMDAgICAgICAgXG4jIDAwMDAwMDAwMCAgMDAwICAgICAgIDAwMCAgICAgICAwMDAwMDAwICAgMDAwMDAwMCAgIDAwMDAwMDAgICBcbiMgMDAwICAgMDAwICAwMDAgICAgICAgMDAwICAgICAgIDAwMCAgICAgICAgICAgIDAwMCAgICAgICAwMDAgIFxuIyAwMDAgICAwMDAgICAwMDAwMDAwICAgMDAwMDAwMCAgMDAwMDAwMDAgIDAwMDAwMDAgICAwMDAwMDAwICAgXG5cbiMgQSBgLmAgYWNjZXNzIGludG8gYSBwcm9wZXJ0eSBvZiBhIHZhbHVlLCBvciB0aGUgYDo6YCBzaG9ydGhhbmQgZm9yXG4jIGFuIGFjY2VzcyBpbnRvIHRoZSBvYmplY3QncyBwcm90b3R5cGUuXG5cbmV4cG9ydHMuQWNjZXNzID0gY2xhc3MgQWNjZXNzIGV4dGVuZHMgQmFzZVxuICAgIGNvbnN0cnVjdG9yOiAoQG5hbWUsIHRhZykgLT5cbiAgICAgICAgQHNvYWsgPSB0YWcgaXMgJ3NvYWsnXG5cbiAgICBjaGlsZHJlbjogWyduYW1lJ11cblxuICAgIGNvbXBpbGVUb0ZyYWdtZW50czogKG8pIC0+XG4gICAgICAgIG5hbWUgPSBAbmFtZS5jb21waWxlVG9GcmFnbWVudHMgb1xuICAgICAgICBub2RlID0gQG5hbWUudW53cmFwKClcbiAgICAgICAgaWYgbm9kZSBpbnN0YW5jZW9mIFByb3BlcnR5TmFtZVxuICAgICAgICAgICAgaWYgbm9kZS52YWx1ZSBpbiBKU19GT1JCSURERU5cbiAgICAgICAgICAgICAgICBbQG1ha2VDb2RlKCdbXCInKSwgbmFtZS4uLiwgQG1ha2VDb2RlKCdcIl0nKV1cbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBbQG1ha2VDb2RlKCcuJyksIG5hbWUuLi5dXG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIFtAbWFrZUNvZGUoJ1snKSwgbmFtZS4uLiwgQG1ha2VDb2RlKCddJyldXG5cbiAgICBpc0NvbXBsZXg6IE5PXG5cbiMgMDAwICAwMDAgICAwMDAgIDAwMDAwMDAgICAgMDAwMDAwMDAgIDAwMCAgIDAwMCAgXG4jIDAwMCAgMDAwMCAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgICAgMDAwIDAwMCAgIFxuIyAwMDAgIDAwMCAwIDAwMCAgMDAwICAgMDAwICAwMDAwMDAwICAgICAwMDAwMCAgICBcbiMgMDAwICAwMDAgIDAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICAgICAwMDAgMDAwICAgXG4jIDAwMCAgMDAwICAgMDAwICAwMDAwMDAwICAgIDAwMDAwMDAwICAwMDAgICAwMDAgIFxuXG4jIEEgYFsgLi4uIF1gIGluZGV4ZWQgYWNjZXNzIGludG8gYW4gYXJyYXkgb3Igb2JqZWN0LlxuXG5leHBvcnRzLkluZGV4ID0gY2xhc3MgSW5kZXggZXh0ZW5kcyBCYXNlXG4gICAgY29uc3RydWN0b3I6IChAaW5kZXgpIC0+XG5cbiAgICBjaGlsZHJlbjogWydpbmRleCddXG5cbiAgICBjb21waWxlVG9GcmFnbWVudHM6IChvKSAtPlxuICAgICAgICBbXS5jb25jYXQgQG1ha2VDb2RlKFwiW1wiKSwgQGluZGV4LmNvbXBpbGVUb0ZyYWdtZW50cyhvLCBMRVZFTF9QQVJFTiksIEBtYWtlQ29kZShcIl1cIilcblxuICAgIGlzQ29tcGxleDogLT5cbiAgICAgICAgQGluZGV4LmlzQ29tcGxleCgpXG5cbiMgMDAwMDAwMDAgICAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgIDAwMDAwMDAgICAwMDAwMDAwMCAgXG4jIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAwICAwMDAgIDAwMCAgICAgICAgMDAwICAgICAgIFxuIyAwMDAwMDAwICAgIDAwMDAwMDAwMCAgMDAwIDAgMDAwICAwMDAgIDAwMDAgIDAwMDAwMDAgICBcbiMgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgMDAwMCAgMDAwICAgMDAwICAwMDAgICAgICAgXG4jIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgICAwMDAwMDAwICAgMDAwMDAwMDAgIFxuXG4jIFJhbmdlcyBjYW4gYmUgdXNlZCB0byBleHRyYWN0IHBvcnRpb25zIChzbGljZXMpIG9mIGFycmF5cyxcbiMgdG8gc3BlY2lmeSBhIHJhbmdlIGZvciBjb21wcmVoZW5zaW9ucywgb3IgYXMgYSB2YWx1ZSwgdG8gYmUgZXhwYW5kZWQgaW50byB0aGVcbiMgY29ycmVzcG9uZGluZyBhcnJheSBvZiBpbnRlZ2VycyBhdCBydW50aW1lLlxuXG5leHBvcnRzLlJhbmdlID0gY2xhc3MgUmFuZ2UgZXh0ZW5kcyBCYXNlXG5cbiAgICBjaGlsZHJlbjogWydmcm9tJywgJ3RvJ11cblxuICAgIGNvbnN0cnVjdG9yOiAoQGZyb20sIEB0bywgdGFnKSAtPlxuICAgICAgICBAZXhjbHVzaXZlID0gdGFnIGlzICdleGNsdXNpdmUnXG4gICAgICAgIEBlcXVhbHMgPSBpZiBAZXhjbHVzaXZlIHRoZW4gJycgZWxzZSAnPSdcblxuICAgICMgQ29tcGlsZXMgdGhlIHJhbmdlJ3Mgc291cmNlIHZhcmlhYmxlcyAtLSB3aGVyZSBpdCBzdGFydHMgYW5kIHdoZXJlIGl0IGVuZHMuXG4gICAgIyBCdXQgb25seSBpZiB0aGV5IG5lZWQgdG8gYmUgY2FjaGVkIHRvIGF2b2lkIGRvdWJsZSBldmFsdWF0aW9uLlxuICAgIFxuICAgIGNvbXBpbGVWYXJpYWJsZXM6IChvKSAtPlxuICAgICAgICBvID0gbWVyZ2UgbywgdG9wOiB0cnVlXG4gICAgICAgIGlzQ29tcGxleCA9IGRlbCBvLCAnaXNDb21wbGV4J1xuICAgICAgICBbQGZyb21DLCBAZnJvbVZhcl0gPSBAY2FjaGVUb0NvZGVGcmFnbWVudHMgQGZyb20uY2FjaGUgbywgTEVWRUxfTElTVCwgaXNDb21wbGV4XG4gICAgICAgIFtAdG9DLCBAdG9WYXJdICAgICA9IEBjYWNoZVRvQ29kZUZyYWdtZW50cyBAdG8uY2FjaGUgbywgTEVWRUxfTElTVCwgaXNDb21wbGV4XG4gICAgICAgIFtAc3RlcCwgQHN0ZXBWYXJdICA9IEBjYWNoZVRvQ29kZUZyYWdtZW50cyBzdGVwLmNhY2hlIG8sIExFVkVMX0xJU1QsIGlzQ29tcGxleCBpZiBzdGVwID0gZGVsIG8sICdzdGVwJ1xuICAgICAgICBAZnJvbU51bSA9IGlmIEBmcm9tLmlzTnVtYmVyKCkgdGhlbiBOdW1iZXIgQGZyb21WYXIgZWxzZSBudWxsXG4gICAgICAgIEB0b051bSAgID0gaWYgQHRvLmlzTnVtYmVyKCkgICB0aGVuIE51bWJlciBAdG9WYXIgICBlbHNlIG51bGxcbiAgICAgICAgQHN0ZXBOdW0gPSBpZiBzdGVwPy5pc051bWJlcigpIHRoZW4gTnVtYmVyIEBzdGVwVmFyIGVsc2UgbnVsbFxuXG4gICAgIyBXaGVuIGNvbXBpbGVkIG5vcm1hbGx5LCB0aGUgcmFuZ2UgcmV0dXJucyB0aGUgY29udGVudHMgb2YgdGhlICpmb3IgbG9vcCpcbiAgICAjIG5lZWRlZCB0byBpdGVyYXRlIG92ZXIgdGhlIHZhbHVlcyBpbiB0aGUgcmFuZ2UuIFVzZWQgYnkgY29tcHJlaGVuc2lvbnMuXG4gICAgXG4gICAgY29tcGlsZU5vZGU6IChvKSAtPlxuICAgICAgICBAY29tcGlsZVZhcmlhYmxlcyBvIHVubGVzcyBAZnJvbVZhclxuICAgICAgICByZXR1cm4gQGNvbXBpbGVBcnJheShvKSB1bmxlc3Mgby5pbmRleFxuXG4gICAgICAgICMgU2V0IHVwIGVuZHBvaW50cy5cbiAgICAgICAga25vd24gICAgPSBAZnJvbU51bT8gYW5kIEB0b051bT9cbiAgICAgICAgaWR4ICAgICAgPSBkZWwgbywgJ2luZGV4J1xuICAgICAgICBpZHhOYW1lICA9IGRlbCBvLCAnbmFtZSdcbiAgICAgICAgbmFtZWRJbmRleCA9IGlkeE5hbWUgYW5kIGlkeE5hbWUgIT0gaWR4XG4gICAgICAgIHZhclBhcnQgID0gXCIje2lkeH0gPSAje0Bmcm9tQ31cIlxuICAgICAgICB2YXJQYXJ0ICs9IFwiLCAje0B0b0N9XCIgaWYgQHRvQyAhPSBAdG9WYXJcbiAgICAgICAgdmFyUGFydCArPSBcIiwgI3tAc3RlcH1cIiBpZiBAc3RlcCAhPSBAc3RlcFZhclxuICAgICAgICBbbHQsIGd0XSA9IFtcIiN7aWR4fSA8I3tAZXF1YWxzfVwiLCBcIiN7aWR4fSA+I3tAZXF1YWxzfVwiXVxuXG4gICAgICAgICMgR2VuZXJhdGUgdGhlIGNvbmRpdGlvbi5cbiAgICAgICAgY29uZFBhcnQgPSBpZiBAc3RlcE51bT9cbiAgICAgICAgICAgIGlmIEBzdGVwTnVtID4gMCB0aGVuIFwiI3tsdH0gI3tAdG9WYXJ9XCIgZWxzZSBcIiN7Z3R9ICN7QHRvVmFyfVwiXG4gICAgICAgIGVsc2UgaWYga25vd25cbiAgICAgICAgICAgIFtmcm9tLCB0b10gPSBbQGZyb21OdW0sIEB0b051bV1cbiAgICAgICAgICAgIGlmIGZyb20gPD0gdG8gdGhlbiBcIiN7bHR9ICN7dG99XCIgZWxzZSBcIiN7Z3R9ICN7dG99XCJcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgY29uZCA9IGlmIEBzdGVwVmFyIHRoZW4gXCIje0BzdGVwVmFyfSA+IDBcIiBlbHNlIFwiI3tAZnJvbVZhcn0gPD0gI3tAdG9WYXJ9XCJcbiAgICAgICAgICAgIFwiI3tjb25kfSA/ICN7bHR9ICN7QHRvVmFyfSA6ICN7Z3R9ICN7QHRvVmFyfVwiXG5cbiAgICAgICAgIyBHZW5lcmF0ZSB0aGUgc3RlcC5cbiAgICAgICAgc3RlcFBhcnQgPSBpZiBAc3RlcFZhclxuICAgICAgICAgICAgXCIje2lkeH0gKz0gI3tAc3RlcFZhcn1cIlxuICAgICAgICBlbHNlIGlmIGtub3duXG4gICAgICAgICAgICBpZiBuYW1lZEluZGV4XG4gICAgICAgICAgICAgICAgaWYgZnJvbSA8PSB0byB0aGVuIFwiKysje2lkeH1cIiBlbHNlIFwiLS0je2lkeH1cIlxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIGlmIGZyb20gPD0gdG8gdGhlbiBcIiN7aWR4fSsrXCIgZWxzZSBcIiN7aWR4fS0tXCJcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgaWYgbmFtZWRJbmRleFxuICAgICAgICAgICAgICAgIFwiI3tjb25kfSA/ICsrI3tpZHh9IDogLS0je2lkeH1cIlxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIFwiI3tjb25kfSA/ICN7aWR4fSsrIDogI3tpZHh9LS1cIlxuXG4gICAgICAgIHZhclBhcnQgID0gXCIje2lkeE5hbWV9ID0gI3t2YXJQYXJ0fVwiIGlmIG5hbWVkSW5kZXhcbiAgICAgICAgc3RlcFBhcnQgPSBcIiN7aWR4TmFtZX0gPSAje3N0ZXBQYXJ0fVwiIGlmIG5hbWVkSW5kZXhcblxuICAgICAgICAjIFRoZSBmaW5hbCBsb29wIGJvZHkuXG4gICAgICAgIFtAbWFrZUNvZGUgXCIje3ZhclBhcnR9OyAje2NvbmRQYXJ0fTsgI3tzdGVwUGFydH1cIl1cblxuXG4gICAgIyBXaGVuIHVzZWQgYXMgYSB2YWx1ZSwgZXhwYW5kIHRoZSByYW5nZSBpbnRvIHRoZSBlcXVpdmFsZW50IGFycmF5LlxuICAgIGNvbXBpbGVBcnJheTogKG8pIC0+XG4gICAgICAgIGtub3duID0gQGZyb21OdW0/IGFuZCBAdG9OdW0/XG4gICAgICAgIGlmIGtub3duIGFuZCBNYXRoLmFicyhAZnJvbU51bSAtIEB0b051bSkgPD0gMjBcbiAgICAgICAgICAgIHJhbmdlID0gW0Bmcm9tTnVtLi5AdG9OdW1dXG4gICAgICAgICAgICByYW5nZS5wb3AoKSBpZiBAZXhjbHVzaXZlXG4gICAgICAgICAgICByZXR1cm4gW0BtYWtlQ29kZSBcIlsjeyByYW5nZS5qb2luKCcsICcpIH1dXCJdXG4gICAgICAgIGlkdCAgICA9IEB0YWIgKyBUQUJcbiAgICAgICAgaSAgICAgID0gby5zY29wZS5mcmVlVmFyaWFibGUgJ2knLCBzaW5nbGU6IHRydWVcbiAgICAgICAgcmVzdWx0ID0gby5zY29wZS5mcmVlVmFyaWFibGUgJ3Jlc3VsdHMnXG4gICAgICAgIHByZSAgICA9IFwiXFxuI3tpZHR9I3tyZXN1bHR9ID0gW107XCJcbiAgICAgICAgaWYga25vd25cbiAgICAgICAgICAgIG8uaW5kZXggPSBpXG4gICAgICAgICAgICBib2R5ID0gZnJhZ21lbnRzVG9UZXh0IEBjb21waWxlTm9kZSBvXG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHZhcnMgPSBcIiN7aX0gPSAje0Bmcm9tQ31cIiArIGlmIEB0b0MgIT0gQHRvVmFyIHRoZW4gXCIsICN7QHRvQ31cIiBlbHNlICcnXG4gICAgICAgICAgICBjb25kID0gXCIje0Bmcm9tVmFyfSA8PSAje0B0b1Zhcn1cIlxuICAgICAgICAgICAgYm9keSA9IFwidmFyICN7dmFyc307ICN7Y29uZH0gPyAje2l9IDwje0BlcXVhbHN9ICN7QHRvVmFyfSA6ICN7aX0gPiN7QGVxdWFsc30gI3tAdG9WYXJ9OyAje2NvbmR9ID8gI3tpfSsrIDogI3tpfS0tXCJcbiAgICAgICAgcG9zdCAgICAgPSBcInsgI3tyZXN1bHR9LnB1c2goI3tpfSk7IH1cXG4je2lkdH1yZXR1cm4gI3tyZXN1bHR9O1xcbiN7by5pbmRlbnR9XCJcbiAgICAgICAgaGFzQXJncyA9IChub2RlKSAtPiBub2RlPy5jb250YWlucyBpc0xpdGVyYWxBcmd1bWVudHNcbiAgICAgICAgYXJncyAgICA9ICcsIGFyZ3VtZW50cycgaWYgaGFzQXJncyhAZnJvbSkgb3IgaGFzQXJncyhAdG8pXG4gICAgICAgIFtAbWFrZUNvZGUgXCIoZnVuY3Rpb24oKSB7I3twcmV9XFxuI3tpZHR9Zm9yICgje2JvZHl9KSN7cG9zdH19KS5hcHBseSh0aGlzI3thcmdzID8gJyd9KVwiXVxuXG4jICAwMDAwMDAwICAwMDAgICAgICAwMDAgICAwMDAwMDAwICAwMDAwMDAwMCAgXG4jIDAwMCAgICAgICAwMDAgICAgICAwMDAgIDAwMCAgICAgICAwMDAgICAgICAgXG4jIDAwMDAwMDAgICAwMDAgICAgICAwMDAgIDAwMCAgICAgICAwMDAwMDAwICAgXG4jICAgICAgMDAwICAwMDAgICAgICAwMDAgIDAwMCAgICAgICAwMDAgICAgICAgXG4jIDAwMDAwMDAgICAwMDAwMDAwICAwMDAgICAwMDAwMDAwICAwMDAwMDAwMCAgXG5cbiMgQW4gYXJyYXkgc2xpY2UgbGl0ZXJhbC4gVW5saWtlIEphdmFTY3JpcHQncyBgQXJyYXkjc2xpY2VgLCB0aGUgc2Vjb25kIHBhcmFtZXRlclxuIyBzcGVjaWZpZXMgdGhlIGluZGV4IG9mIHRoZSBlbmQgb2YgdGhlIHNsaWNlLCBqdXN0IGFzIHRoZSBmaXJzdCBwYXJhbWV0ZXJcbiMgaXMgdGhlIGluZGV4IG9mIHRoZSBiZWdpbm5pbmcuXG5cbmV4cG9ydHMuU2xpY2UgPSBjbGFzcyBTbGljZSBleHRlbmRzIEJhc2VcblxuICAgIGNoaWxkcmVuOiBbJ3JhbmdlJ11cblxuICAgIGNvbnN0cnVjdG9yOiAoQHJhbmdlKSAtPlxuICAgICAgICBzdXBlcigpXG5cbiAgICAjIFdlIGhhdmUgdG8gYmUgY2FyZWZ1bCB3aGVuIHRyeWluZyB0byBzbGljZSB0aHJvdWdoIHRoZSBlbmQgb2YgdGhlIGFycmF5LFxuICAgICMgYDllOWAgaXMgdXNlZCBiZWNhdXNlIG5vdCBhbGwgaW1wbGVtZW50YXRpb25zIHJlc3BlY3QgYHVuZGVmaW5lZGAgb3IgYDEvMGAuXG4gICAgIyBgOWU5YCBzaG91bGQgYmUgc2FmZSBiZWNhdXNlIGA5ZTlgID4gYDIqKjMyYCwgdGhlIG1heCBhcnJheSBsZW5ndGguXG4gICAgY29tcGlsZU5vZGU6IChvKSAtPlxuICAgICAgICB7dG8sIGZyb219ID0gQHJhbmdlXG4gICAgICAgIGZyb21Db21waWxlZCA9IGZyb20gYW5kIGZyb20uY29tcGlsZVRvRnJhZ21lbnRzKG8sIExFVkVMX1BBUkVOKSBvciBbQG1ha2VDb2RlICcwJ11cbiAgICAgICAgIyBUT0RPOiBqd2FsdG9uIC0gbW92ZSB0aGlzIGludG8gdGhlICdpZic/XG4gICAgICAgIGlmIHRvXG4gICAgICAgICAgICBjb21waWxlZCAgICAgICAgID0gdG8uY29tcGlsZVRvRnJhZ21lbnRzIG8sIExFVkVMX1BBUkVOXG4gICAgICAgICAgICBjb21waWxlZFRleHQgPSBmcmFnbWVudHNUb1RleHQgY29tcGlsZWRcbiAgICAgICAgICAgIGlmIG5vdCAobm90IEByYW5nZS5leGNsdXNpdmUgYW5kICtjb21waWxlZFRleHQgaXMgLTEpXG4gICAgICAgICAgICAgICAgdG9TdHIgPSAnLCAnICsgaWYgQHJhbmdlLmV4Y2x1c2l2ZVxuICAgICAgICAgICAgICAgICAgICBjb21waWxlZFRleHRcbiAgICAgICAgICAgICAgICBlbHNlIGlmIHRvLmlzTnVtYmVyKClcbiAgICAgICAgICAgICAgICAgICAgXCIjeytjb21waWxlZFRleHQgKyAxfVwiXG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBjb21waWxlZCA9IHRvLmNvbXBpbGVUb0ZyYWdtZW50cyBvLCBMRVZFTF9BQ0NFU1NcbiAgICAgICAgICAgICAgICAgICAgXCIrI3tmcmFnbWVudHNUb1RleHQgY29tcGlsZWR9ICsgMSB8fCA5ZTlcIlxuICAgICAgICBbQG1ha2VDb2RlIFwiLnNsaWNlKCN7IGZyYWdtZW50c1RvVGV4dCBmcm9tQ29tcGlsZWQgfSN7IHRvU3RyIG9yICcnIH0pXCJdXG5cbiMgIDAwMDAwMDAgICAwMDAwMDAwICAgICAgICAgIDAwMCAgMDAwMDAwMDAgICAwMDAwMDAwICAwMDAwMDAwMDAgIFxuIyAwMDAgICAwMDAgIDAwMCAgIDAwMCAgICAgICAgMDAwICAwMDAgICAgICAgMDAwICAgICAgICAgIDAwMCAgICAgXG4jIDAwMCAgIDAwMCAgMDAwMDAwMCAgICAgICAgICAwMDAgIDAwMDAwMDAgICAwMDAgICAgICAgICAgMDAwICAgICBcbiMgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgICAgICAgICAwMDAgICAgIFxuIyAgMDAwMDAwMCAgIDAwMDAwMDAgICAgIDAwMDAwMDAgICAwMDAwMDAwMCAgIDAwMDAwMDAgICAgIDAwMCAgICAgXG5cbmV4cG9ydHMuT2JqID0gY2xhc3MgT2JqIGV4dGVuZHMgQmFzZVxuICAgIFxuICAgIGNvbnN0cnVjdG9yOiAocHJvcHMsIEBnZW5lcmF0ZWQgPSBmYWxzZSkgLT5cbiAgICAgICAgQG9iamVjdHMgPSBAcHJvcGVydGllcyA9IHByb3BzIG9yIFtdXG5cbiAgICBjaGlsZHJlbjogWydwcm9wZXJ0aWVzJ11cblxuICAgIGNvbXBpbGVOb2RlOiAobykgLT5cbiAgICAgICAgcHJvcHMgPSBAcHJvcGVydGllc1xuICAgICAgICBpZiBAZ2VuZXJhdGVkXG4gICAgICAgICAgICBmb3Igbm9kZSBpbiBwcm9wcyB3aGVuIG5vZGUgaW5zdGFuY2VvZiBWYWx1ZVxuICAgICAgICAgICAgICAgIG5vZGUuZXJyb3IgJ2Nhbm5vdCBoYXZlIGFuIGltcGxpY2l0IHZhbHVlIGluIGFuIGltcGxpY2l0IG9iamVjdCdcbiAgICAgICAgYnJlYWsgZm9yIHByb3AsIGR5bmFtaWNJbmRleCBpbiBwcm9wcyB3aGVuIChwcm9wLnZhcmlhYmxlIG9yIHByb3ApLmJhc2UgaW5zdGFuY2VvZiBQYXJlbnNcbiAgICAgICAgaGFzRHluYW1pYyAgPSBkeW5hbWljSW5kZXggPCBwcm9wcy5sZW5ndGhcbiAgICAgICAgaWR0ICAgICAgICAgPSBvLmluZGVudCArPSBUQUJcbiAgICAgICAgbGFzdE5vbmNvbSAgPSBAbGFzdE5vbkNvbW1lbnQgQHByb3BlcnRpZXNcbiAgICAgICAgYW5zd2VyID0gW11cbiAgICAgICAgaWYgaGFzRHluYW1pY1xuICAgICAgICAgICAgb3JlZiA9IG8uc2NvcGUuZnJlZVZhcmlhYmxlICdvYmonXG4gICAgICAgICAgICBhbnN3ZXIucHVzaCBAbWFrZUNvZGUgXCIoXFxuI3tpZHR9I3tvcmVmfSA9IFwiXG4gICAgICAgIGFuc3dlci5wdXNoIEBtYWtlQ29kZSBcInsje2lmIHByb3BzLmxlbmd0aCBpcyAwIG9yIGR5bmFtaWNJbmRleCBpcyAwIHRoZW4gJ30nIGVsc2UgJ1xcbid9XCJcbiAgICAgICAgZm9yIHByb3AsIGkgaW4gcHJvcHNcbiAgICAgICAgICAgIGlmIGkgaXMgZHluYW1pY0luZGV4XG4gICAgICAgICAgICAgICAgYW5zd2VyLnB1c2ggQG1ha2VDb2RlIFwiXFxuI3tpZHR9fVwiIHVubGVzcyBpIGlzIDBcbiAgICAgICAgICAgICAgICBhbnN3ZXIucHVzaCBAbWFrZUNvZGUgJyxcXG4nXG4gICAgICAgICAgICBqb2luID0gaWYgaSBpcyBwcm9wcy5sZW5ndGggLSAxIG9yIGkgaXMgZHluYW1pY0luZGV4IC0gMVxuICAgICAgICAgICAgICAgICcnXG4gICAgICAgICAgICBlbHNlIGlmIHByb3AgaXMgbGFzdE5vbmNvbSBvciBwcm9wIGluc3RhbmNlb2YgQ29tbWVudFxuICAgICAgICAgICAgICAgICdcXG4nXG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgJyxcXG4nXG4gICAgICAgICAgICBpbmRlbnQgPSBpZiBwcm9wIGluc3RhbmNlb2YgQ29tbWVudCB0aGVuICcnIGVsc2UgaWR0XG4gICAgICAgICAgICBpbmRlbnQgKz0gVEFCIGlmIGhhc0R5bmFtaWMgYW5kIGkgPCBkeW5hbWljSW5kZXhcbiAgICAgICAgICAgIGlmIHByb3AgaW5zdGFuY2VvZiBBc3NpZ25cbiAgICAgICAgICAgICAgICBpZiBwcm9wLmNvbnRleHQgIT0gJ29iamVjdCdcbiAgICAgICAgICAgICAgICAgICAgcHJvcC5vcGVyYXRvclRva2VuLmVycm9yIFwidW5leHBlY3RlZCAje3Byb3Aub3BlcmF0b3JUb2tlbi52YWx1ZX1cIlxuICAgICAgICAgICAgICAgIGlmIHByb3AudmFyaWFibGUgaW5zdGFuY2VvZiBWYWx1ZSBhbmQgcHJvcC52YXJpYWJsZS5oYXNQcm9wZXJ0aWVzKClcbiAgICAgICAgICAgICAgICAgICAgcHJvcC52YXJpYWJsZS5lcnJvciAnaW52YWxpZCBvYmplY3Qga2V5J1xuICAgICAgICAgICAgaWYgcHJvcCBpbnN0YW5jZW9mIFZhbHVlIGFuZCBwcm9wLnRoaXNcbiAgICAgICAgICAgICAgICBwcm9wID0gbmV3IEFzc2lnbiBwcm9wLnByb3BlcnRpZXNbMF0ubmFtZSwgcHJvcCwgJ29iamVjdCdcbiAgICAgICAgICAgIGlmIHByb3Agbm90IGluc3RhbmNlb2YgQ29tbWVudFxuICAgICAgICAgICAgICAgIGlmIGkgPCBkeW5hbWljSW5kZXhcbiAgICAgICAgICAgICAgICAgICAgaWYgcHJvcCBub3QgaW5zdGFuY2VvZiBBc3NpZ25cbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3AgPSBuZXcgQXNzaWduIHByb3AsIHByb3AsICdvYmplY3QnXG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBpZiBwcm9wIGluc3RhbmNlb2YgQXNzaWduXG4gICAgICAgICAgICAgICAgICAgICAgICBrZXkgPSBwcm9wLnZhcmlhYmxlXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHByb3AudmFsdWVcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgW2tleSwgdmFsdWVdID0gcHJvcC5iYXNlLmNhY2hlIG9cbiAgICAgICAgICAgICAgICAgICAgICAgIGtleSA9IG5ldyBQcm9wZXJ0eU5hbWUga2V5LnZhbHVlIGlmIGtleSBpbnN0YW5jZW9mIElkZW50aWZpZXJMaXRlcmFsXG4gICAgICAgICAgICAgICAgICAgIHByb3AgPSBuZXcgQXNzaWduIChuZXcgVmFsdWUgKG5ldyBJZGVudGlmaWVyTGl0ZXJhbCBvcmVmKSwgW25ldyBBY2Nlc3Mga2V5XSksIHZhbHVlXG4gICAgICAgICAgICBpZiBpbmRlbnQgdGhlbiBhbnN3ZXIucHVzaCBAbWFrZUNvZGUgaW5kZW50XG4gICAgICAgICAgICBhbnN3ZXIucHVzaCBwcm9wLmNvbXBpbGVUb0ZyYWdtZW50cyhvLCBMRVZFTF9UT1ApLi4uXG4gICAgICAgICAgICBpZiBqb2luIHRoZW4gYW5zd2VyLnB1c2ggQG1ha2VDb2RlIGpvaW5cbiAgICAgICAgaWYgaGFzRHluYW1pY1xuICAgICAgICAgICAgYW5zd2VyLnB1c2ggQG1ha2VDb2RlIFwiLFxcbiN7aWR0fSN7b3JlZn1cXG4je0B0YWJ9KVwiXG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGFuc3dlci5wdXNoIEBtYWtlQ29kZSBcIlxcbiN7QHRhYn19XCIgdW5sZXNzIHByb3BzLmxlbmd0aCBpcyAwXG4gICAgICAgIGlmIEBmcm9udCBhbmQgbm90IGhhc0R5bmFtaWMgdGhlbiBAd3JhcEluQnJhY2VzIGFuc3dlciBlbHNlIGFuc3dlclxuXG4gICAgYXNzaWduczogKG5hbWUpIC0+XG4gICAgICAgIGZvciBwcm9wIGluIEBwcm9wZXJ0aWVzIHdoZW4gcHJvcC5hc3NpZ25zIG5hbWUgdGhlbiByZXR1cm4geWVzXG4gICAgICAgIG5vXG5cbiMgIDAwMDAwMDAgICAwMDAwMDAwMCAgIDAwMDAwMDAwICAgIDAwMDAwMDAgICAwMDAgICAwMDAgIFxuIyAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgICAwMDAgMDAwICAgXG4jIDAwMDAwMDAwMCAgMDAwMDAwMCAgICAwMDAwMDAwICAgIDAwMDAwMDAwMCAgICAwMDAwMCAgICBcbiMgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAgICAwMDAgICAgIFxuIyAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgICAgIDAwMCAgICAgXG5cbmV4cG9ydHMuQXJyID0gY2xhc3MgQXJyIGV4dGVuZHMgQmFzZVxuICAgIFxuICAgIGNvbnN0cnVjdG9yOiAob2JqcykgLT5cbiAgICAgICAgQG9iamVjdHMgPSBvYmpzIG9yIFtdXG5cbiAgICBjaGlsZHJlbjogWydvYmplY3RzJ11cblxuICAgIGNvbXBpbGVOb2RlOiAobykgLT5cbiAgICAgICAgcmV0dXJuIFtAbWFrZUNvZGUgJ1tdJ10gdW5sZXNzIEBvYmplY3RzLmxlbmd0aFxuICAgICAgICBvLmluZGVudCArPSBUQUJcbiAgICAgICAgYW5zd2VyID0gU3BsYXQuY29tcGlsZVNwbGF0dGVkQXJyYXkgbywgQG9iamVjdHNcbiAgICAgICAgcmV0dXJuIGFuc3dlciBpZiBhbnN3ZXIubGVuZ3RoXG5cbiAgICAgICAgYW5zd2VyID0gW11cbiAgICAgICAgY29tcGlsZWRPYmpzID0gKG9iai5jb21waWxlVG9GcmFnbWVudHMgbywgTEVWRUxfTElTVCBmb3Igb2JqIGluIEBvYmplY3RzKVxuICAgICAgICBmb3IgZnJhZ21lbnRzLCBpbmRleCBpbiBjb21waWxlZE9ianNcbiAgICAgICAgICAgIGlmIGluZGV4XG4gICAgICAgICAgICAgICAgYW5zd2VyLnB1c2ggQG1ha2VDb2RlIFwiLCBcIlxuICAgICAgICAgICAgYW5zd2VyLnB1c2ggZnJhZ21lbnRzLi4uXG4gICAgICAgIGlmIGZyYWdtZW50c1RvVGV4dChhbnN3ZXIpLmluZGV4T2YoJ1xcbicpID49IDBcbiAgICAgICAgICAgIGFuc3dlci51bnNoaWZ0IEBtYWtlQ29kZSBcIltcXG4je28uaW5kZW50fVwiXG4gICAgICAgICAgICBhbnN3ZXIucHVzaCBAbWFrZUNvZGUgXCJcXG4je0B0YWJ9XVwiXG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGFuc3dlci51bnNoaWZ0IEBtYWtlQ29kZSBcIltcIlxuICAgICAgICAgICAgYW5zd2VyLnB1c2ggQG1ha2VDb2RlIFwiXVwiXG4gICAgICAgIGFuc3dlclxuXG4gICAgYXNzaWduczogKG5hbWUpIC0+XG4gICAgICAgIGZvciBvYmogaW4gQG9iamVjdHMgd2hlbiBvYmouYXNzaWducyBuYW1lIHRoZW4gcmV0dXJuIHllc1xuICAgICAgICBub1xuXG4jICAwMDAwMDAwICAwMDAgICAgICAgMDAwMDAwMCAgICAwMDAwMDAwICAgMDAwMDAwMCAgXG4jIDAwMCAgICAgICAwMDAgICAgICAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgICAgICAgXG4jIDAwMCAgICAgICAwMDAgICAgICAwMDAwMDAwMDAgIDAwMDAwMDAgICAwMDAwMDAwICAgXG4jIDAwMCAgICAgICAwMDAgICAgICAwMDAgICAwMDAgICAgICAgMDAwICAgICAgIDAwMCAgXG4jICAwMDAwMDAwICAwMDAwMDAwICAwMDAgICAwMDAgIDAwMDAwMDAgICAwMDAwMDAwICAgXG5cbiMgVGhlIGNsYXNzIGRlZmluaXRpb24uIEluaXRpYWxpemUgYSBDbGFzcyB3aXRoIGl0cyBuYW1lLCBhbiBvcHRpb25hbCBzdXBlcmNsYXNzLCBhbmQgYSBsaXN0IG9mIHByb3RvdHlwZSBwcm9wZXJ0eSBhc3NpZ25tZW50cy5cblxuZXhwb3J0cy5DbGFzcyA9IGNsYXNzIENsYXNzIGV4dGVuZHMgQmFzZVxuICAgIFxuICAgIGNvbnN0cnVjdG9yOiAoQHZhcmlhYmxlLCBAcGFyZW50LCBAYm9keSA9IG5ldyBCbG9jaykgLT5cbiAgICAgICAgQGJvdW5kRnVuY3MgPSBbXVxuICAgICAgICBAYm9keS5jbGFzc0JvZHkgPSB5ZXNcblxuICAgIGNoaWxkcmVuOiBbJ3ZhcmlhYmxlJywgJ3BhcmVudCcsICdib2R5J11cblxuICAgIGRlZmF1bHRDbGFzc1ZhcmlhYmxlTmFtZTogJ19DbGFzcydcblxuICAgICMgRmlndXJlIG91dCB0aGUgYXBwcm9wcmlhdGUgbmFtZSBmb3IgdGhlIGNvbnN0cnVjdG9yIGZ1bmN0aW9uIG9mIHRoaXMgY2xhc3MuXG4gICAgICAgIFxuICAgIGRldGVybWluZU5hbWU6IC0+XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gQGRlZmF1bHRDbGFzc1ZhcmlhYmxlTmFtZSB1bmxlc3MgQHZhcmlhYmxlXG4gICAgICAgIFsuLi4sIHRhaWxdID0gQHZhcmlhYmxlLnByb3BlcnRpZXNcbiAgICAgICAgbm9kZSA9IGlmIHRhaWxcbiAgICAgICAgICAgIHRhaWwgaW5zdGFuY2VvZiBBY2Nlc3MgYW5kIHRhaWwubmFtZVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICBAdmFyaWFibGUuYmFzZVxuICAgICAgICB1bmxlc3Mgbm9kZSBpbnN0YW5jZW9mIElkZW50aWZpZXJMaXRlcmFsIG9yIG5vZGUgaW5zdGFuY2VvZiBQcm9wZXJ0eU5hbWVcbiAgICAgICAgICAgIHJldHVybiBAZGVmYXVsdENsYXNzVmFyaWFibGVOYW1lXG4gICAgICAgIG5hbWUgPSBub2RlLnZhbHVlXG4gICAgICAgIHVubGVzcyB0YWlsXG4gICAgICAgICAgICBtZXNzYWdlID0gaXNVbmFzc2lnbmFibGUgbmFtZVxuICAgICAgICAgICAgQHZhcmlhYmxlLmVycm9yIG1lc3NhZ2UgaWYgbWVzc2FnZVxuICAgICAgICBpZiBuYW1lIGluIEpTX0ZPUkJJRERFTiB0aGVuIFwiXyN7bmFtZX1cIiBlbHNlIG5hbWVcblxuICAgICMgRm9yIGFsbCBgdGhpc2AtcmVmZXJlbmNlcyBhbmQgYm91bmQgZnVuY3Rpb25zIGluIHRoZSBjbGFzcyBkZWZpbml0aW9uLCBgdGhpc2AgaXMgdGhlIENsYXNzIGJlaW5nIGNvbnN0cnVjdGVkLlxuICAgICAgICBcbiAgICBzZXRDb250ZXh0OiAobmFtZSkgLT5cbiAgICAgICAgXG4gICAgICAgIEBib2R5LnRyYXZlcnNlQ2hpbGRyZW4gZmFsc2UsIChub2RlKSAtPlxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlIGlmIG5vZGUuY2xhc3NCb2R5XG4gICAgICAgICAgICBpZiBub2RlIGluc3RhbmNlb2YgVGhpc0xpdGVyYWxcbiAgICAgICAgICAgICAgICBub2RlLnZhbHVlICAgICAgPSBuYW1lXG4gICAgICAgICAgICBlbHNlIGlmIG5vZGUgaW5zdGFuY2VvZiBDb2RlXG4gICAgICAgICAgICAgICAgbm9kZS5jb250ZXh0ICAgID0gbmFtZSBpZiBub2RlLmJvdW5kXG5cbiAgICAjIEVuc3VyZSB0aGF0IGFsbCBmdW5jdGlvbnMgYm91bmQgdG8gdGhlIGluc3RhbmNlIGFyZSBwcm94aWVkIGluIHRoZSBjb25zdHJ1Y3Rvci5cbiAgICBcbiAgICBhZGRCb3VuZEZ1bmN0aW9uczogKG8pIC0+XG4gICAgICAgIFxuICAgICAgICBmb3IgYnZhciBpbiBAYm91bmRGdW5jc1xuICAgICAgICAgICAgbGhzID0gKG5ldyBWYWx1ZSAobmV3IFRoaXNMaXRlcmFsKSwgW25ldyBBY2Nlc3MgYnZhcl0pLmNvbXBpbGUgb1xuICAgICAgICAgICAgQGN0b3IuYm9keS51bnNoaWZ0IG5ldyBMaXRlcmFsIFwiI3tsaHN9ID0gI3t1dGlsaXR5ICdiaW5kJywgb30oI3tsaHN9LCB0aGlzKVwiXG4gICAgICAgIHJldHVyblxuXG4gICAgIyBNZXJnZSB0aGUgcHJvcGVydGllcyBmcm9tIGEgdG9wLWxldmVsIG9iamVjdCBhcyBwcm90b3R5cGFsIHByb3BlcnRpZXMgb24gdGhlIGNsYXNzLlxuICAgIFxuICAgIGFkZFByb3BlcnRpZXM6IChub2RlLCBuYW1lLCBvKSAtPlxuICAgICAgICBcbiAgICAgICAgcHJvcHMgPSBub2RlLmJhc2UucHJvcGVydGllc1suLl1cbiAgICAgICAgZXhwcnMgPSB3aGlsZSBhc3NpZ24gPSBwcm9wcy5zaGlmdCgpXG4gICAgICAgICAgICBpZiBhc3NpZ24gaW5zdGFuY2VvZiBBc3NpZ25cbiAgICAgICAgICAgICAgICBiYXNlID0gYXNzaWduLnZhcmlhYmxlLmJhc2VcbiAgICAgICAgICAgICAgICBkZWxldGUgYXNzaWduLmNvbnRleHRcbiAgICAgICAgICAgICAgICBmdW5jID0gYXNzaWduLnZhbHVlXG4gICAgICAgICAgICAgICAgaWYgYmFzZS52YWx1ZSBpcyAnY29uc3RydWN0b3InXG4gICAgICAgICAgICAgICAgICAgIGlmIEBjdG9yXG4gICAgICAgICAgICAgICAgICAgICAgICBhc3NpZ24uZXJyb3IgJ2Nhbm5vdCBkZWZpbmUgbW9yZSB0aGFuIG9uZSBjb25zdHJ1Y3RvciBpbiBhIGNsYXNzJ1xuICAgICAgICAgICAgICAgICAgICBpZiBmdW5jLmJvdW5kXG4gICAgICAgICAgICAgICAgICAgICAgICBhc3NpZ24uZXJyb3IgJ2Nhbm5vdCBkZWZpbmUgYSBjb25zdHJ1Y3RvciBhcyBhIGJvdW5kIGZ1bmN0aW9uJ1xuICAgICAgICAgICAgICAgICAgICBpZiBmdW5jIGluc3RhbmNlb2YgQ29kZVxuICAgICAgICAgICAgICAgICAgICAgICAgYXNzaWduID0gQGN0b3IgPSBmdW5jXG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIEBleHRlcm5hbEN0b3IgPSBvLmNsYXNzU2NvcGUuZnJlZVZhcmlhYmxlICdjdG9yJ1xuICAgICAgICAgICAgICAgICAgICAgICAgYXNzaWduID0gbmV3IEFzc2lnbiBuZXcgSWRlbnRpZmllckxpdGVyYWwoQGV4dGVybmFsQ3RvciksIGZ1bmNcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGlmIGFzc2lnbi52YXJpYWJsZS50aGlzXG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jLnN0YXRpYyA9IHllc1xuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICBhY2MgPSBpZiBiYXNlLmlzQ29tcGxleCgpIHRoZW4gbmV3IEluZGV4IGJhc2UgZWxzZSBuZXcgQWNjZXNzIGJhc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIGFzc2lnbi52YXJpYWJsZSA9IG5ldyBWYWx1ZShuZXcgSWRlbnRpZmllckxpdGVyYWwobmFtZSksIFsobmV3IEFjY2VzcyBuZXcgUHJvcGVydHlOYW1lICdwcm90b3R5cGUnKSwgYWNjXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIGZ1bmMgaW5zdGFuY2VvZiBDb2RlIGFuZCBmdW5jLmJvdW5kXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQGJvdW5kRnVuY3MucHVzaCBiYXNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuYy5ib3VuZCA9IG5vXG4gICAgICAgICAgICBhc3NpZ25cblxuICAgICAgICBjb21wYWN0IGV4cHJzXG5cbiAgICAjIFdhbGsgdGhlIGJvZHkgb2YgdGhlIGNsYXNzLCBsb29raW5nIGZvciBwcm90b3R5cGUgcHJvcGVydGllcyB0byBiZSBjb252ZXJ0ZWQgYW5kIHRhZ2dpbmcgc3RhdGljIGFzc2lnbm1lbnRzLlxuICAgICAgICBcbiAgICB3YWxrQm9keTogKG5hbWUsIG8pIC0+XG4gICAgICAgICNsb2cgJ3dhbGtCb2R5Jywgby5mZWF0dXJlXG4gICAgICAgIEB0cmF2ZXJzZUNoaWxkcmVuIGZhbHNlLCAoY2hpbGQpID0+XG4gICAgICAgICAgICBjb250ID0gdHJ1ZVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlIGlmIGNoaWxkIGluc3RhbmNlb2YgQ2xhc3NcbiAgICAgICAgICAgIGlmIGNoaWxkIGluc3RhbmNlb2YgQmxvY2tcbiAgICAgICAgICAgICAgICBmb3Igbm9kZSwgaSBpbiBleHBzID0gY2hpbGQuZXhwcmVzc2lvbnNcbiAgICAgICAgICAgICAgICAgICAgaWYgbm9kZSBpbnN0YW5jZW9mIEFzc2lnbiBhbmQgbm9kZS52YXJpYWJsZS5sb29rc1N0YXRpYyBuYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlLnZhbHVlLnN0YXRpYyA9IHllc1xuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIG5vZGUgaW5zdGFuY2VvZiBWYWx1ZSBhbmQgbm9kZS5pc09iamVjdCh0cnVlKVxuICAgICAgICAgICAgICAgICAgICAgICAgY29udCA9IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICBleHBzW2ldID0gQGFkZFByb3BlcnRpZXMgbm9kZSwgbmFtZSwgb1xuICAgICAgICAgICAgICAgIGNoaWxkLmV4cHJlc3Npb25zID0gZXhwcyA9IGZsYXR0ZW4gZXhwc1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmIGNoaWxkLmNsYXNzQm9keSBhbmQgby5mZWF0dXJlWydjb25maWctcGFyYW1ldGVycyddXG4gICAgICAgICAgICAgICAgICAgIEBwcmVwYXJlU3VwZXJDYWxsRm9yQ29uZmlnUGFyYW1zIG5hbWUsIG8sIGNoaWxkXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICBjb250IGFuZCBjaGlsZCBub3QgaW5zdGFuY2VvZiBDbGFzc1xuXG4gICAgcHJlcGFyZVN1cGVyQ2FsbEZvckNvbmZpZ1BhcmFtczogKG5hbWUsIG8sIGNsYXNzQm9keSkgLT5cbiAgICAgICAgXG4gICAgICAgIGZvciBleHByIGluIGNsYXNzQm9keS5leHByZXNzaW9uc1xuICAgICAgICAgICAgaWYgZXhwciBpbnN0YW5jZW9mIENvZGVcbiAgICAgICAgICAgICAgICBjb250aW51ZSBpZiBub3QgZXhwci5wYXJhbXNbMF0/Lm5hbWVcbiAgICAgICAgICAgICAgICBwYXJhbTAgPSBleHByLnBhcmFtc1swXS5uYW1lXG4gICAgICAgICAgICAgICAgaWYgbm90IHBhcmFtMC5nZW5lcmF0ZWQgdGhlbiByZXR1cm4gI2xvZyAnQ09OU1RSVUNUT1IgUEFSQU0wIE5PVCBHRU5FUkFURUQ/J1xuICAgICAgICAgICAgICAgIGlmIG5vdCBwYXJhbTAgaW5zdGFuY2VvZiBPYmogdGhlbiByZXR1cm4gbG9nICdDT05TVFJVQ1RPUiBQQVJBTTAgTk9UIEFOIE9CSj8nXG4gICAgICAgICAgICAgICAgaWYgbm90IGV4cHIuYm9keSBpbnN0YW5jZW9mIEJsb2NrIHRoZW4gcmV0dXJuIGxvZyAnQ09OU1RSVUNUT1IgQk9EWSBOT1QgQU4gQkxPQ0s/J1xuICAgICAgICAgICAgICAgIGZvciBib2R5RXhwciBpbiBleHByLmJvZHkuZXhwcmVzc2lvbnNcbiAgICAgICAgICAgICAgICAgICAgaWYgYm9keUV4cHIgaW5zdGFuY2VvZiBTdXBlckNhbGxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvZHlFeHByLmNvbmZpZ1BhcmFtZXRlciA9IHBhcmFtMFxuICAgICAgICAgICAgXG4gICAgIyBgdXNlIHN0cmljdGAgKGFuZCBvdGhlciBkaXJlY3RpdmVzKSBtdXN0IGJlIHRoZSBmaXJzdCBleHByZXNzaW9uIHN0YXRlbWVudChzKVxuICAgICMgb2YgYSBmdW5jdGlvbiBib2R5LiBUaGlzIG1ldGhvZCBlbnN1cmVzIHRoZSBwcm9sb2d1ZSBpcyBjb3JyZWN0bHkgcG9zaXRpb25lZFxuICAgICMgYWJvdmUgdGhlIGBjb25zdHJ1Y3RvcmAuXG4gICAgXG4gICAgaG9pc3REaXJlY3RpdmVQcm9sb2d1ZTogLT5cbiAgICAgICAgXG4gICAgICAgIGluZGV4ID0gMFxuICAgICAgICB7ZXhwcmVzc2lvbnN9ID0gQGJvZHlcbiAgICAgICAgKytpbmRleCB3aGlsZSAobm9kZSA9IGV4cHJlc3Npb25zW2luZGV4XSkgYW5kIG5vZGUgaW5zdGFuY2VvZiBDb21tZW50IG9yXG4gICAgICAgICAgICBub2RlIGluc3RhbmNlb2YgVmFsdWUgYW5kIG5vZGUuaXNTdHJpbmcoKVxuICAgICAgICBAZGlyZWN0aXZlcyA9IGV4cHJlc3Npb25zLnNwbGljZSAwLCBpbmRleFxuXG4gICAgIyBNYWtlIHN1cmUgdGhhdCBhIGNvbnN0cnVjdG9yIGlzIGRlZmluZWQgZm9yIHRoZSBjbGFzcywgYW5kIHByb3Blcmx5IGNvbmZpZ3VyZWQuXG4gICAgICAgIFxuICAgIGVuc3VyZUNvbnN0cnVjdG9yOiAobmFtZSkgLT5cbiAgICAgICAgXG4gICAgICAgIGlmIG5vdCBAY3RvclxuICAgICAgICAgICAgQGN0b3IgPSBuZXcgQ29kZVxuICAgICAgICAgICAgaWYgQGV4dGVybmFsQ3RvclxuICAgICAgICAgICAgICAgIEBjdG9yLmJvZHkucHVzaCBuZXcgTGl0ZXJhbCBcIiN7QGV4dGVybmFsQ3Rvcn0uYXBwbHkodGhpcywgYXJndW1lbnRzKVwiXG4gICAgICAgICAgICBlbHNlIGlmIEBwYXJlbnRcbiAgICAgICAgICAgICAgICBAY3Rvci5ib2R5LnB1c2ggbmV3IExpdGVyYWwgXCIje25hbWV9Ll9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpXCJcbiAgICAgICAgICAgIEBjdG9yLmJvZHkubWFrZVJldHVybigpXG4gICAgICAgICAgICBAYm9keS5leHByZXNzaW9ucy51bnNoaWZ0IEBjdG9yXG4gICAgICAgIEBjdG9yLmN0b3IgPSBAY3Rvci5uYW1lID0gbmFtZVxuICAgICAgICBAY3Rvci5rbGFzcyA9IG51bGxcbiAgICAgICAgQGN0b3Iubm9SZXR1cm4gPSB5ZXNcblxuICAgICMgSW5zdGVhZCBvZiBnZW5lcmF0aW5nIHRoZSBKYXZhU2NyaXB0IHN0cmluZyBkaXJlY3RseSwgd2UgYnVpbGQgdXAgdGhlXG4gICAgIyBlcXVpdmFsZW50IHN5bnRheCB0cmVlIGFuZCBjb21waWxlIHRoYXQsIGluIHBpZWNlcy4gWW91IGNhbiBzZWUgdGhlXG4gICAgIyBjb25zdHJ1Y3RvciwgcHJvcGVydHkgYXNzaWdubWVudHMsIGFuZCBpbmhlcml0YW5jZSBnZXR0aW5nIGJ1aWx0IG91dCBiZWxvdy5cbiAgICBcbiAgICBjb21waWxlTm9kZTogKG8pIC0+XG4gICAgICAgIFxuICAgICAgICBpZiBqdW1wTm9kZSA9IEBib2R5Lmp1bXBzKClcbiAgICAgICAgICAgIGp1bXBOb2RlLmVycm9yICdDbGFzcyBib2RpZXMgY2Fubm90IGNvbnRhaW4gcHVyZSBzdGF0ZW1lbnRzJ1xuICAgICAgICBpZiBhcmd1bWVudHNOb2RlID0gQGJvZHkuY29udGFpbnMgaXNMaXRlcmFsQXJndW1lbnRzXG4gICAgICAgICAgICBhcmd1bWVudHNOb2RlLmVycm9yIFwiQ2xhc3MgYm9kaWVzIHNob3VsZG4ndCByZWZlcmVuY2UgYXJndW1lbnRzXCJcblxuICAgICAgICBuYW1lICA9IEBkZXRlcm1pbmVOYW1lKClcbiAgICAgICAgbG5hbWUgPSBuZXcgSWRlbnRpZmllckxpdGVyYWwgbmFtZVxuICAgICAgICBmdW5jICA9IG5ldyBDb2RlIFtdLCBCbG9jay53cmFwIFtAYm9keV1cbiAgICAgICAgYXJncyAgPSBbXVxuICAgICAgICBvLmNsYXNzU2NvcGUgPSBmdW5jLm1ha2VTY29wZSBvLnNjb3BlXG5cbiAgICAgICAgQGhvaXN0RGlyZWN0aXZlUHJvbG9ndWUoKVxuICAgICAgICBAc2V0Q29udGV4dCBuYW1lXG4gICAgICAgIEB3YWxrQm9keSBuYW1lLCBvXG4gICAgICAgIEBlbnN1cmVDb25zdHJ1Y3RvciBuYW1lXG4gICAgICAgIEBhZGRCb3VuZEZ1bmN0aW9ucyBvXG4gICAgICAgIEBib2R5LnNwYWNlZCA9IHllc1xuICAgICAgICBAYm9keS5leHByZXNzaW9ucy5wdXNoIGxuYW1lXG5cbiAgICAgICAgaWYgQHBhcmVudFxuICAgICAgICAgICAgc3VwZXJDbGFzcyA9IG5ldyBJZGVudGlmaWVyTGl0ZXJhbCBvLmNsYXNzU2NvcGUuZnJlZVZhcmlhYmxlICdzdXBlckNsYXNzJywgcmVzZXJ2ZTogbm9cbiAgICAgICAgICAgIEBib2R5LmV4cHJlc3Npb25zLnVuc2hpZnQgbmV3IEV4dGVuZHMgbG5hbWUsIHN1cGVyQ2xhc3NcbiAgICAgICAgICAgIGZ1bmMucGFyYW1zLnB1c2ggbmV3IFBhcmFtIHN1cGVyQ2xhc3NcbiAgICAgICAgICAgIGFyZ3MucHVzaCBAcGFyZW50XG5cbiAgICAgICAgQGJvZHkuZXhwcmVzc2lvbnMudW5zaGlmdCBAZGlyZWN0aXZlcy4uLlxuXG4gICAgICAgIGtsYXNzID0gbmV3IFBhcmVucyBuZXcgQ2FsbCBmdW5jLCBhcmdzXG4gICAgICAgIGtsYXNzID0gbmV3IEFzc2lnbiBAdmFyaWFibGUsIGtsYXNzLCBudWxsLCB7IEBtb2R1bGVEZWNsYXJhdGlvbiB9IGlmIEB2YXJpYWJsZVxuICAgICAgICBrbGFzcy5jb21waWxlVG9GcmFnbWVudHMgb1xuXG4jIDAwICAgICAwMCAgIDAwMDAwMDAgICAwMDAwMDAwICAgIDAwMCAgIDAwMCAgMDAwICAgICAgMDAwMDAwMDAgIFxuIyAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgIDAwMCAgICAgICBcbiMgMDAwMDAwMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAgICAwMDAwMDAwICAgXG4jIDAwMCAwIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICAgMDAwICAgICAgIFxuIyAwMDAgICAwMDAgICAwMDAwMDAwICAgMDAwMDAwMCAgICAgMDAwMDAwMCAgIDAwMDAwMDAgIDAwMDAwMDAwICBcblxuZXhwb3J0cy5Nb2R1bGVEZWNsYXJhdGlvbiA9IGNsYXNzIE1vZHVsZURlY2xhcmF0aW9uIGV4dGVuZHMgQmFzZVxuICAgIFxuICAgIGNvbnN0cnVjdG9yOiAoQGNsYXVzZSwgQHNvdXJjZSkgLT5cbiAgICAgICAgQGNoZWNrU291cmNlKClcblxuICAgIGNoaWxkcmVuOiBbJ2NsYXVzZScsICdzb3VyY2UnXVxuXG4gICAgaXNTdGF0ZW1lbnQ6IFlFU1xuICAgIGp1bXBzOiAgICAgICAgICAgVEhJU1xuICAgIG1ha2VSZXR1cm46ICBUSElTXG5cbiAgICBjaGVja1NvdXJjZTogLT5cbiAgICAgICAgaWYgQHNvdXJjZT8gYW5kIEBzb3VyY2UgaW5zdGFuY2VvZiBTdHJpbmdXaXRoSW50ZXJwb2xhdGlvbnNcbiAgICAgICAgICAgIEBzb3VyY2UuZXJyb3IgJ3RoZSBuYW1lIG9mIHRoZSBtb2R1bGUgdG8gYmUgaW1wb3J0ZWQgZnJvbSBtdXN0IGJlIGFuIHVuaW50ZXJwb2xhdGVkIHN0cmluZydcblxuICAgIGNoZWNrU2NvcGU6IChvLCBtb2R1bGVEZWNsYXJhdGlvblR5cGUpIC0+XG4gICAgICAgIGlmIG8uaW5kZW50Lmxlbmd0aCAhPSAwXG4gICAgICAgICAgICBAZXJyb3IgXCIje21vZHVsZURlY2xhcmF0aW9uVHlwZX0gc3RhdGVtZW50cyBtdXN0IGJlIGF0IHRvcC1sZXZlbCBzY29wZVwiXG5cbiMgMDAwICAwMCAgICAgMDAgIDAwMDAwMDAwICAgIDAwMDAwMDAgICAwMDAwMDAwMCAgIDAwMDAwMDAwMCAgXG4jIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAgICAwMDAgICAgIFxuIyAwMDAgIDAwMDAwMDAwMCAgMDAwMDAwMDAgICAwMDAgICAwMDAgIDAwMDAwMDAgICAgICAgMDAwICAgICBcbiMgMDAwICAwMDAgMCAwMDAgIDAwMCAgICAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgICAgIDAwMCAgICAgXG4jIDAwMCAgMDAwICAgMDAwICAwMDAgICAgICAgICAwMDAwMDAwICAgMDAwICAgMDAwICAgICAwMDAgICAgIFxuXG5leHBvcnRzLkltcG9ydERlY2xhcmF0aW9uID0gY2xhc3MgSW1wb3J0RGVjbGFyYXRpb24gZXh0ZW5kcyBNb2R1bGVEZWNsYXJhdGlvblxuICAgIFxuICAgIGNvbXBpbGVOb2RlOiAobykgLT5cbiAgICAgICAgQGNoZWNrU2NvcGUgbywgJ2ltcG9ydCdcbiAgICAgICAgby5pbXBvcnRlZFN5bWJvbHMgPSBbXVxuXG4gICAgICAgIGNvZGUgPSBbXVxuICAgICAgICBjb2RlLnB1c2ggQG1ha2VDb2RlIFwiI3tAdGFifWltcG9ydCBcIlxuICAgICAgICBjb2RlLnB1c2ggQGNsYXVzZS5jb21waWxlTm9kZShvKS4uLiBpZiBAY2xhdXNlP1xuXG4gICAgICAgIGlmIEBzb3VyY2U/LnZhbHVlP1xuICAgICAgICAgICAgY29kZS5wdXNoIEBtYWtlQ29kZSAnIGZyb20gJyB1bmxlc3MgQGNsYXVzZSBpcyBudWxsXG4gICAgICAgICAgICBjb2RlLnB1c2ggQG1ha2VDb2RlIEBzb3VyY2UudmFsdWVcblxuICAgICAgICBjb2RlLnB1c2ggQG1ha2VDb2RlICc7J1xuICAgICAgICBjb2RlXG5cbmV4cG9ydHMuSW1wb3J0Q2xhdXNlID0gY2xhc3MgSW1wb3J0Q2xhdXNlIGV4dGVuZHMgQmFzZVxuICAgIFxuICAgIGNvbnN0cnVjdG9yOiAoQGRlZmF1bHRCaW5kaW5nLCBAbmFtZWRJbXBvcnRzKSAtPlxuXG4gICAgY2hpbGRyZW46IFsnZGVmYXVsdEJpbmRpbmcnLCAnbmFtZWRJbXBvcnRzJ11cblxuICAgIGNvbXBpbGVOb2RlOiAobykgLT5cbiAgICAgICAgY29kZSA9IFtdXG5cbiAgICAgICAgaWYgQGRlZmF1bHRCaW5kaW5nP1xuICAgICAgICAgICAgY29kZS5wdXNoIEBkZWZhdWx0QmluZGluZy5jb21waWxlTm9kZShvKS4uLlxuICAgICAgICAgICAgY29kZS5wdXNoIEBtYWtlQ29kZSAnLCAnIGlmIEBuYW1lZEltcG9ydHM/XG5cbiAgICAgICAgaWYgQG5hbWVkSW1wb3J0cz9cbiAgICAgICAgICAgIGNvZGUucHVzaCBAbmFtZWRJbXBvcnRzLmNvbXBpbGVOb2RlKG8pLi4uXG5cbiAgICAgICAgY29kZVxuXG4jIDAwMDAwMDAwICAwMDAgICAwMDAgIDAwMDAwMDAwICAgIDAwMDAwMDAgICAwMDAwMDAwMCAgIDAwMDAwMDAwMCAgXG4jIDAwMCAgICAgICAgMDAwIDAwMCAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgICAgIDAwMCAgICAgXG4jIDAwMDAwMDAgICAgIDAwMDAwICAgIDAwMDAwMDAwICAgMDAwICAgMDAwICAwMDAwMDAwICAgICAgIDAwMCAgICAgXG4jIDAwMCAgICAgICAgMDAwIDAwMCAgIDAwMCAgICAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgICAgIDAwMCAgICAgXG4jIDAwMDAwMDAwICAwMDAgICAwMDAgIDAwMCAgICAgICAgIDAwMDAwMDAgICAwMDAgICAwMDAgICAgIDAwMCAgICAgXG5cbmV4cG9ydHMuRXhwb3J0RGVjbGFyYXRpb24gPSBjbGFzcyBFeHBvcnREZWNsYXJhdGlvbiBleHRlbmRzIE1vZHVsZURlY2xhcmF0aW9uXG4gICAgXG4gICAgY29tcGlsZU5vZGU6IChvKSAtPlxuICAgICAgICBAY2hlY2tTY29wZSBvLCAnZXhwb3J0J1xuXG4gICAgICAgIGNvZGUgPSBbXVxuICAgICAgICBjb2RlLnB1c2ggQG1ha2VDb2RlIFwiI3tAdGFifWV4cG9ydCBcIlxuICAgICAgICBjb2RlLnB1c2ggQG1ha2VDb2RlICdkZWZhdWx0ICcgaWYgQCBpbnN0YW5jZW9mIEV4cG9ydERlZmF1bHREZWNsYXJhdGlvblxuXG4gICAgICAgIGlmIEAgbm90IGluc3RhbmNlb2YgRXhwb3J0RGVmYXVsdERlY2xhcmF0aW9uIGFuZFxuICAgICAgICAgICAgIChAY2xhdXNlIGluc3RhbmNlb2YgQXNzaWduIG9yIEBjbGF1c2UgaW5zdGFuY2VvZiBDbGFzcylcbiAgICAgICAgICAgICMgUHJldmVudCBleHBvcnRpbmcgYW4gYW5vbnltb3VzIGNsYXNzOyBhbGwgZXhwb3J0ZWQgbWVtYmVycyBtdXN0IGJlIG5hbWVkXG4gICAgICAgICAgICBpZiBAY2xhdXNlIGluc3RhbmNlb2YgQ2xhc3MgYW5kIG5vdCBAY2xhdXNlLnZhcmlhYmxlXG4gICAgICAgICAgICAgICAgQGNsYXVzZS5lcnJvciAnYW5vbnltb3VzIGNsYXNzZXMgY2Fubm90IGJlIGV4cG9ydGVkJ1xuXG4gICAgICAgICAgICAjIFdoZW4gdGhlIEVTMjAxNSBgY2xhc3NgIGtleXdvcmQgaXMgc3VwcG9ydGVkLCBkb27igJl0IGFkZCBhIGB2YXJgIGhlcmVcbiAgICAgICAgICAgIGNvZGUucHVzaCBAbWFrZUNvZGUgJ3ZhciAnXG4gICAgICAgICAgICBAY2xhdXNlLm1vZHVsZURlY2xhcmF0aW9uID0gJ2V4cG9ydCdcblxuICAgICAgICBpZiBAY2xhdXNlLmJvZHk/IGFuZCBAY2xhdXNlLmJvZHkgaW5zdGFuY2VvZiBCbG9ja1xuICAgICAgICAgICAgY29kZSA9IGNvZGUuY29uY2F0IEBjbGF1c2UuY29tcGlsZVRvRnJhZ21lbnRzIG8sIExFVkVMX1RPUFxuICAgICAgICBlbHNlXG4gICAgICAgICAgICBjb2RlID0gY29kZS5jb25jYXQgQGNsYXVzZS5jb21waWxlTm9kZSBvXG5cbiAgICAgICAgY29kZS5wdXNoIEBtYWtlQ29kZSBcIiBmcm9tICN7QHNvdXJjZS52YWx1ZX1cIiBpZiBAc291cmNlPy52YWx1ZT9cbiAgICAgICAgY29kZS5wdXNoIEBtYWtlQ29kZSAnOydcbiAgICAgICAgY29kZVxuXG5leHBvcnRzLkV4cG9ydE5hbWVkRGVjbGFyYXRpb24gPSBjbGFzcyBFeHBvcnROYW1lZERlY2xhcmF0aW9uIGV4dGVuZHMgRXhwb3J0RGVjbGFyYXRpb25cblxuZXhwb3J0cy5FeHBvcnREZWZhdWx0RGVjbGFyYXRpb24gPSBjbGFzcyBFeHBvcnREZWZhdWx0RGVjbGFyYXRpb24gZXh0ZW5kcyBFeHBvcnREZWNsYXJhdGlvblxuXG5leHBvcnRzLkV4cG9ydEFsbERlY2xhcmF0aW9uID0gY2xhc3MgRXhwb3J0QWxsRGVjbGFyYXRpb24gZXh0ZW5kcyBFeHBvcnREZWNsYXJhdGlvblxuXG5leHBvcnRzLk1vZHVsZVNwZWNpZmllckxpc3QgPSBjbGFzcyBNb2R1bGVTcGVjaWZpZXJMaXN0IGV4dGVuZHMgQmFzZVxuICAgIFxuICAgIGNvbnN0cnVjdG9yOiAoQHNwZWNpZmllcnMpIC0+XG5cbiAgICBjaGlsZHJlbjogWydzcGVjaWZpZXJzJ11cblxuICAgIGNvbXBpbGVOb2RlOiAobykgLT5cbiAgICAgICAgY29kZSA9IFtdXG4gICAgICAgIG8uaW5kZW50ICs9IFRBQlxuICAgICAgICBjb21waWxlZExpc3QgPSAoc3BlY2lmaWVyLmNvbXBpbGVUb0ZyYWdtZW50cyBvLCBMRVZFTF9MSVNUIGZvciBzcGVjaWZpZXIgaW4gQHNwZWNpZmllcnMpXG5cbiAgICAgICAgaWYgQHNwZWNpZmllcnMubGVuZ3RoICE9IDBcbiAgICAgICAgICAgIGNvZGUucHVzaCBAbWFrZUNvZGUgXCJ7XFxuI3tvLmluZGVudH1cIlxuICAgICAgICAgICAgZm9yIGZyYWdtZW50cywgaW5kZXggaW4gY29tcGlsZWRMaXN0XG4gICAgICAgICAgICAgICAgY29kZS5wdXNoIEBtYWtlQ29kZShcIixcXG4je28uaW5kZW50fVwiKSBpZiBpbmRleFxuICAgICAgICAgICAgICAgIGNvZGUucHVzaCBmcmFnbWVudHMuLi5cbiAgICAgICAgICAgIGNvZGUucHVzaCBAbWFrZUNvZGUgXCJcXG59XCJcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgY29kZS5wdXNoIEBtYWtlQ29kZSAne30nXG4gICAgICAgIGNvZGVcblxuZXhwb3J0cy5JbXBvcnRTcGVjaWZpZXJMaXN0ID0gY2xhc3MgSW1wb3J0U3BlY2lmaWVyTGlzdCBleHRlbmRzIE1vZHVsZVNwZWNpZmllckxpc3RcblxuZXhwb3J0cy5FeHBvcnRTcGVjaWZpZXJMaXN0ID0gY2xhc3MgRXhwb3J0U3BlY2lmaWVyTGlzdCBleHRlbmRzIE1vZHVsZVNwZWNpZmllckxpc3RcblxuZXhwb3J0cy5Nb2R1bGVTcGVjaWZpZXIgPSBjbGFzcyBNb2R1bGVTcGVjaWZpZXIgZXh0ZW5kcyBCYXNlXG4gICAgY29uc3RydWN0b3I6IChAb3JpZ2luYWwsIEBhbGlhcywgQG1vZHVsZURlY2xhcmF0aW9uVHlwZSkgLT5cbiAgICAgICAgIyBUaGUgbmFtZSBvZiB0aGUgdmFyaWFibGUgZW50ZXJpbmcgdGhlIGxvY2FsIHNjb3BlXG4gICAgICAgIEBpZGVudGlmaWVyID0gaWYgQGFsaWFzPyB0aGVuIEBhbGlhcy52YWx1ZSBlbHNlIEBvcmlnaW5hbC52YWx1ZVxuXG4gICAgY2hpbGRyZW46IFsnb3JpZ2luYWwnLCAnYWxpYXMnXVxuXG4gICAgY29tcGlsZU5vZGU6IChvKSAtPlxuICAgICAgICBvLnNjb3BlLmZpbmQgQGlkZW50aWZpZXIsIEBtb2R1bGVEZWNsYXJhdGlvblR5cGVcbiAgICAgICAgY29kZSA9IFtdXG4gICAgICAgIGNvZGUucHVzaCBAbWFrZUNvZGUgQG9yaWdpbmFsLnZhbHVlXG4gICAgICAgIGNvZGUucHVzaCBAbWFrZUNvZGUgXCIgYXMgI3tAYWxpYXMudmFsdWV9XCIgaWYgQGFsaWFzP1xuICAgICAgICBjb2RlXG5cbmV4cG9ydHMuSW1wb3J0U3BlY2lmaWVyID0gY2xhc3MgSW1wb3J0U3BlY2lmaWVyIGV4dGVuZHMgTW9kdWxlU3BlY2lmaWVyXG4gICAgY29uc3RydWN0b3I6IChpbXBvcnRlZCwgbG9jYWwpIC0+XG4gICAgICAgIHN1cGVyIGltcG9ydGVkLCBsb2NhbCwgJ2ltcG9ydCdcblxuICAgIGNvbXBpbGVOb2RlOiAobykgLT5cbiAgICAgICAgIyBQZXIgdGhlIHNwZWMsIHN5bWJvbHMgY2Fu4oCZdCBiZSBpbXBvcnRlZCBtdWx0aXBsZSB0aW1lc1xuICAgICAgICAjIChlLmcuIGBpbXBvcnQgeyBmb28sIGZvbyB9IGZyb20gJ2xpYidgIGlzIGludmFsaWQpXG4gICAgICAgIGlmIEBpZGVudGlmaWVyIGluIG8uaW1wb3J0ZWRTeW1ib2xzIG9yIG8uc2NvcGUuY2hlY2soQGlkZW50aWZpZXIpXG4gICAgICAgICAgICBAZXJyb3IgXCInI3tAaWRlbnRpZmllcn0nIGhhcyBhbHJlYWR5IGJlZW4gZGVjbGFyZWRcIlxuICAgICAgICBlbHNlXG4gICAgICAgICAgICBvLmltcG9ydGVkU3ltYm9scy5wdXNoIEBpZGVudGlmaWVyXG4gICAgICAgIHN1cGVyIG9cblxuZXhwb3J0cy5JbXBvcnREZWZhdWx0U3BlY2lmaWVyID0gY2xhc3MgSW1wb3J0RGVmYXVsdFNwZWNpZmllciBleHRlbmRzIEltcG9ydFNwZWNpZmllclxuXG5leHBvcnRzLkltcG9ydE5hbWVzcGFjZVNwZWNpZmllciA9IGNsYXNzIEltcG9ydE5hbWVzcGFjZVNwZWNpZmllciBleHRlbmRzIEltcG9ydFNwZWNpZmllclxuXG5leHBvcnRzLkV4cG9ydFNwZWNpZmllciA9IGNsYXNzIEV4cG9ydFNwZWNpZmllciBleHRlbmRzIE1vZHVsZVNwZWNpZmllclxuICAgIGNvbnN0cnVjdG9yOiAobG9jYWwsIGV4cG9ydGVkKSAtPlxuICAgICAgICBzdXBlciBsb2NhbCwgZXhwb3J0ZWQsICdleHBvcnQnXG5cbiMgIDAwMDAwMDAgICAgMDAwMDAwMCAgIDAwMDAwMDAgIDAwMCAgIDAwMDAwMDAgICAwMDAgICAwMDAgIFxuIyAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgICAgICAgMDAwICAwMDAgICAgICAgIDAwMDAgIDAwMCAgXG4jIDAwMDAwMDAwMCAgMDAwMDAwMCAgIDAwMDAwMDAgICAwMDAgIDAwMCAgMDAwMCAgMDAwIDAgMDAwICBcbiMgMDAwICAgMDAwICAgICAgIDAwMCAgICAgICAwMDAgIDAwMCAgMDAwICAgMDAwICAwMDAgIDAwMDAgIFxuIyAwMDAgICAwMDAgIDAwMDAwMDAgICAwMDAwMDAwICAgMDAwICAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgXG5cbiMgVGhlICoqQXNzaWduKiogaXMgdXNlZCB0byBhc3NpZ24gYSBsb2NhbCB2YXJpYWJsZSB0byB2YWx1ZSwgb3IgdG8gc2V0IHRoZVxuIyBwcm9wZXJ0eSBvZiBhbiBvYmplY3QgLS0gaW5jbHVkaW5nIHdpdGhpbiBvYmplY3QgbGl0ZXJhbHMuXG5cbmV4cG9ydHMuQXNzaWduID0gY2xhc3MgQXNzaWduIGV4dGVuZHMgQmFzZVxuICAgIFxuICAgIGNvbnN0cnVjdG9yOiAoQHZhcmlhYmxlLCBAdmFsdWUsIEBjb250ZXh0LCBvcHRpb25zID0ge30pIC0+XG4gICAgICAgIHtAcGFyYW0sIEBzdWJwYXR0ZXJuLCBAb3BlcmF0b3JUb2tlbiwgQG1vZHVsZURlY2xhcmF0aW9ufSA9IG9wdGlvbnNcblxuICAgIGNoaWxkcmVuOiBbJ3ZhcmlhYmxlJywgJ3ZhbHVlJ11cblxuICAgIGlzU3RhdGVtZW50OiAobykgLT5cbiAgICAgICAgbz8ubGV2ZWwgaXMgTEVWRUxfVE9QIGFuZCBAY29udGV4dD8gYW5kIChAbW9kdWxlRGVjbGFyYXRpb24gb3IgXCI/XCIgaW4gQGNvbnRleHQpXG5cbiAgICBjaGVja0Fzc2lnbmFiaWxpdHk6IChvLCB2YXJCYXNlKSAtPlxuICAgICAgICBpZiBPYmplY3Q6Omhhc093blByb3BlcnR5LmNhbGwoby5zY29wZS5wb3NpdGlvbnMsIHZhckJhc2UudmFsdWUpIGFuZFxuICAgICAgICAgICAgIG8uc2NvcGUudmFyaWFibGVzW28uc2NvcGUucG9zaXRpb25zW3ZhckJhc2UudmFsdWVdXS50eXBlIGlzICdpbXBvcnQnXG4gICAgICAgICAgICB2YXJCYXNlLmVycm9yIFwiJyN7dmFyQmFzZS52YWx1ZX0nIGlzIHJlYWQtb25seVwiXG5cbiAgICBhc3NpZ25zOiAobmFtZSkgLT5cbiAgICAgICAgQFtpZiBAY29udGV4dCBpcyAnb2JqZWN0JyB0aGVuICd2YWx1ZScgZWxzZSAndmFyaWFibGUnXS5hc3NpZ25zIG5hbWVcblxuICAgIHVuZm9sZFNvYWs6IChvKSAtPlxuICAgICAgICB1bmZvbGRTb2FrIG8sIHRoaXMsICd2YXJpYWJsZSdcblxuICAgICMgQ29tcGlsZSBhbiBhc3NpZ25tZW50LCBkZWxlZ2F0aW5nIHRvIGBjb21waWxlUGF0dGVybk1hdGNoYCBvclxuICAgICMgYGNvbXBpbGVTcGxpY2VgIGlmIGFwcHJvcHJpYXRlLiBLZWVwIHRyYWNrIG9mIHRoZSBuYW1lIG9mIHRoZSBiYXNlIG9iamVjdFxuICAgICMgd2UndmUgYmVlbiBhc3NpZ25lZCB0bywgZm9yIGNvcnJlY3QgaW50ZXJuYWwgcmVmZXJlbmNlcy4gSWYgdGhlIHZhcmlhYmxlXG4gICAgIyBoYXMgbm90IGJlZW4gc2VlbiB5ZXQgd2l0aGluIHRoZSBjdXJyZW50IHNjb3BlLCBkZWNsYXJlIGl0LlxuICAgIFxuICAgIGNvbXBpbGVOb2RlOiAobykgLT5cbiAgICAgICAgXG4gICAgICAgIGlmIGlzVmFsdWUgPSBAdmFyaWFibGUgaW5zdGFuY2VvZiBWYWx1ZVxuICAgICAgICAgICAgcmV0dXJuIEBjb21waWxlUGF0dGVybk1hdGNoIG8gaWYgQHZhcmlhYmxlLmlzQXJyYXkoKSBvciBAdmFyaWFibGUuaXNPYmplY3QoKVxuICAgICAgICAgICAgcmV0dXJuIEBjb21waWxlU3BsaWNlICAgICAgIG8gaWYgQHZhcmlhYmxlLmlzU3BsaWNlKClcbiAgICAgICAgICAgIHJldHVybiBAY29tcGlsZUNvbmRpdGlvbmFsICBvIGlmIEBjb250ZXh0IGluIFsnfHw9JywgJyYmPScsICc/PSddXG4gICAgICAgICAgICByZXR1cm4gQGNvbXBpbGVTcGVjaWFsTWF0aCAgbyBpZiBAY29udGV4dCBpbiBbJyoqPScsICcvLz0nLCAnJSU9J11cbiAgICAgICAgaWYgQHZhbHVlIGluc3RhbmNlb2YgQ29kZVxuICAgICAgICAgICAgaWYgQHZhbHVlLnN0YXRpY1xuICAgICAgICAgICAgICAgIEB2YWx1ZS5rbGFzcyA9IEB2YXJpYWJsZS5iYXNlXG4gICAgICAgICAgICAgICAgQHZhbHVlLm5hbWUgID0gQHZhcmlhYmxlLnByb3BlcnRpZXNbMF1cbiAgICAgICAgICAgICAgICBAdmFsdWUudmFyaWFibGUgPSBAdmFyaWFibGVcbiAgICAgICAgICAgIGVsc2UgaWYgQHZhcmlhYmxlLnByb3BlcnRpZXM/Lmxlbmd0aCA+PSAyXG4gICAgICAgICAgICAgICAgW3Byb3BlcnRpZXMuLi4sIHByb3RvdHlwZSwgbmFtZV0gPSBAdmFyaWFibGUucHJvcGVydGllc1xuICAgICAgICAgICAgICAgIGlmIHByb3RvdHlwZS5uYW1lPy52YWx1ZSBpcyAncHJvdG90eXBlJ1xuICAgICAgICAgICAgICAgICAgICBAdmFsdWUua2xhc3MgPSBuZXcgVmFsdWUgQHZhcmlhYmxlLmJhc2UsIHByb3BlcnRpZXNcbiAgICAgICAgICAgICAgICAgICAgQHZhbHVlLm5hbWUgID0gbmFtZVxuICAgICAgICAgICAgICAgICAgICBAdmFsdWUudmFyaWFibGUgPSBAdmFyaWFibGVcbiAgICAgICAgdW5sZXNzIEBjb250ZXh0XG4gICAgICAgICAgICB2YXJCYXNlID0gQHZhcmlhYmxlLnVud3JhcEFsbCgpXG4gICAgICAgICAgICB1bmxlc3MgdmFyQmFzZS5pc0Fzc2lnbmFibGUoKVxuICAgICAgICAgICAgICAgIEB2YXJpYWJsZS5lcnJvciBcIicje0B2YXJpYWJsZS5jb21waWxlIG99JyBjYW4ndCBiZSBhc3NpZ25lZFwiXG4gICAgICAgICAgICB1bmxlc3MgdmFyQmFzZS5oYXNQcm9wZXJ0aWVzPygpXG4gICAgICAgICAgICAgICAgIyBgbW9kdWxlRGVjbGFyYXRpb25gIGNhbiBiZSBgJ2ltcG9ydCdgIG9yIGAnZXhwb3J0J2BcbiAgICAgICAgICAgICAgICBpZiBAbW9kdWxlRGVjbGFyYXRpb25cbiAgICAgICAgICAgICAgICAgICAgQGNoZWNrQXNzaWduYWJpbGl0eSBvLCB2YXJCYXNlXG4gICAgICAgICAgICAgICAgICAgIG8uc2NvcGUuYWRkIHZhckJhc2UudmFsdWUsIEBtb2R1bGVEZWNsYXJhdGlvblxuICAgICAgICAgICAgICAgIGVsc2UgaWYgQHBhcmFtXG4gICAgICAgICAgICAgICAgICAgIG8uc2NvcGUuYWRkIHZhckJhc2UudmFsdWUsICd2YXInXG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBAY2hlY2tBc3NpZ25hYmlsaXR5IG8sIHZhckJhc2VcbiAgICAgICAgICAgICAgICAgICAgby5zY29wZS5maW5kIHZhckJhc2UudmFsdWVcblxuICAgICAgICB2YWwgPSBAdmFsdWUuY29tcGlsZVRvRnJhZ21lbnRzIG8sIExFVkVMX0xJU1RcbiAgICAgICAgQHZhcmlhYmxlLmZyb250ID0gdHJ1ZSBpZiBpc1ZhbHVlIGFuZCBAdmFyaWFibGUuYmFzZSBpbnN0YW5jZW9mIE9ialxuICAgICAgICBjb21waWxlZE5hbWUgPSBAdmFyaWFibGUuY29tcGlsZVRvRnJhZ21lbnRzIG8sIExFVkVMX0xJU1RcblxuICAgICAgICBpZiBAY29udGV4dCBpcyAnb2JqZWN0J1xuICAgICAgICAgICAgaWYgZnJhZ21lbnRzVG9UZXh0KGNvbXBpbGVkTmFtZSkgaW4gSlNfRk9SQklEREVOXG4gICAgICAgICAgICAgICAgY29tcGlsZWROYW1lLnVuc2hpZnQgQG1ha2VDb2RlICdcIidcbiAgICAgICAgICAgICAgICBjb21waWxlZE5hbWUucHVzaCBAbWFrZUNvZGUgJ1wiJ1xuICAgICAgICAgICAgcmV0dXJuIGNvbXBpbGVkTmFtZS5jb25jYXQgQG1ha2VDb2RlKFwiOiBcIiksIHZhbFxuXG4gICAgICAgIGFuc3dlciA9IGNvbXBpbGVkTmFtZS5jb25jYXQgQG1ha2VDb2RlKFwiICN7IEBjb250ZXh0IG9yICc9JyB9IFwiKSwgdmFsXG4gICAgICAgIGlmIG8ubGV2ZWwgPD0gTEVWRUxfTElTVCB0aGVuIGFuc3dlciBlbHNlIEB3cmFwSW5CcmFjZXMgYW5zd2VyXG5cbiAgICAjIEJyaWVmIGltcGxlbWVudGF0aW9uIG9mIHJlY3Vyc2l2ZSBwYXR0ZXJuIG1hdGNoaW5nLCB3aGVuIGFzc2lnbmluZyBhcnJheSBvclxuICAgICMgb2JqZWN0IGxpdGVyYWxzIHRvIGEgdmFsdWUuIFBlZWtzIGF0IHRoZWlyIHByb3BlcnRpZXMgdG8gYXNzaWduIGlubmVyIG5hbWVzLlxuICAgIFxuICAgICMgMDAwMDAwMDAgICAgMDAwMDAwMCAgIDAwMDAwMDAwMCAgMDAwMDAwMDAwICAwMDAwMDAwMCAgMDAwMDAwMDAgICAwMDAgICAwMDAgIFxuICAgICMgMDAwICAgMDAwICAwMDAgICAwMDAgICAgIDAwMCAgICAgICAgMDAwICAgICAwMDAgICAgICAgMDAwICAgMDAwICAwMDAwICAwMDAgIFxuICAgICMgMDAwMDAwMDAgICAwMDAwMDAwMDAgICAgIDAwMCAgICAgICAgMDAwICAgICAwMDAwMDAwICAgMDAwMDAwMCAgICAwMDAgMCAwMDAgIFxuICAgICMgMDAwICAgICAgICAwMDAgICAwMDAgICAgIDAwMCAgICAgICAgMDAwICAgICAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgIDAwMDAgIFxuICAgICMgMDAwICAgICAgICAwMDAgICAwMDAgICAgIDAwMCAgICAgICAgMDAwICAgICAwMDAwMDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIFxuICAgIFxuICAgIGNvbXBpbGVQYXR0ZXJuTWF0Y2g6IChvKSAtPlxuICAgICAgICBcbiAgICAgICAgdG9wICAgICAgID0gby5sZXZlbCBpcyBMRVZFTF9UT1BcbiAgICAgICAge3ZhbHVlfSAgID0gdGhpc1xuICAgICAgICB7b2JqZWN0c30gPSBAdmFyaWFibGUuYmFzZVxuICAgICAgICBcbiAgICAgICAgdW5sZXNzIG9sZW4gPSBvYmplY3RzLmxlbmd0aFxuICAgICAgICAgICAgY29kZSA9IHZhbHVlLmNvbXBpbGVUb0ZyYWdtZW50cyBvXG4gICAgICAgICAgICByZXR1cm4gaWYgby5sZXZlbCA+PSBMRVZFTF9PUCB0aGVuIEB3cmFwSW5CcmFjZXMgY29kZSBlbHNlIGNvZGVcbiAgICAgICAgICAgIFxuICAgICAgICBbb2JqXSA9IG9iamVjdHNcbiAgICAgICAgXG4gICAgICAgIGlmIG9sZW4gaXMgMSBhbmQgb2JqIGluc3RhbmNlb2YgRXhwYW5zaW9uXG4gICAgICAgICAgICBvYmouZXJyb3IgJ0Rlc3RydWN0dXJpbmcgYXNzaWdubWVudCBoYXMgbm8gdGFyZ2V0J1xuICAgICAgICAgICAgXG4gICAgICAgIGlzT2JqZWN0ID0gQHZhcmlhYmxlLmlzT2JqZWN0KClcbiAgICAgICAgXG4gICAgICAgIGlmIHRvcCBhbmQgb2xlbiBpcyAxIGFuZCBvYmogbm90IGluc3RhbmNlb2YgU3BsYXRcbiAgICAgICAgICAgICMgUGljayB0aGUgcHJvcGVydHkgc3RyYWlnaHQgb2ZmIHRoZSB2YWx1ZSB3aGVuIHRoZXJl4oCZcyBqdXN0IG9uZSB0byBwaWNrXG4gICAgICAgICAgICAjIChubyBuZWVkIHRvIGNhY2hlIHRoZSB2YWx1ZSBpbnRvIGEgdmFyaWFibGUpLlxuICAgICAgICAgICAgZGVmYXVsdFZhbHVlID0gbnVsbFxuICAgICAgICAgICAgaWYgb2JqIGluc3RhbmNlb2YgQXNzaWduIGFuZCBvYmouY29udGV4dCBpcyAnb2JqZWN0J1xuICAgICAgICAgICAgICAgICMgQSByZWd1bGFyIG9iamVjdCBwYXR0ZXJuLW1hdGNoLlxuICAgICAgICAgICAgICAgIHt2YXJpYWJsZToge2Jhc2U6IGlkeH0sIHZhbHVlOiBvYmp9ID0gb2JqXG4gICAgICAgICAgICAgICAgaWYgb2JqIGluc3RhbmNlb2YgQXNzaWduXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHRWYWx1ZSA9IG9iai52YWx1ZVxuICAgICAgICAgICAgICAgICAgICBvYmogPSBvYmoudmFyaWFibGVcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBpZiBvYmogaW5zdGFuY2VvZiBBc3NpZ25cbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFZhbHVlID0gb2JqLnZhbHVlXG4gICAgICAgICAgICAgICAgICAgIG9iaiA9IG9iai52YXJpYWJsZVxuICAgICAgICAgICAgICAgIGlkeCA9IGlmIGlzT2JqZWN0ICMgQSBzaG9ydGhhbmQgYHthLCBiLCBAY30gPSB2YWxgIHBhdHRlcm4tbWF0Y2guXG4gICAgICAgICAgICAgICAgICAgIGlmIG9iai50aGlzXG4gICAgICAgICAgICAgICAgICAgICAgICBvYmoucHJvcGVydGllc1swXS5uYW1lXG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBQcm9wZXJ0eU5hbWUgb2JqLnVud3JhcCgpLnZhbHVlXG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAjIEEgcmVndWxhciBhcnJheSBwYXR0ZXJuLW1hdGNoLlxuICAgICAgICAgICAgICAgICAgICBuZXcgTnVtYmVyTGl0ZXJhbCAwXG4gICAgICAgICAgICBhY2MgPSBpZHgudW53cmFwKCkgaW5zdGFuY2VvZiBQcm9wZXJ0eU5hbWVcbiAgICAgICAgICAgIHZhbHVlID0gbmV3IFZhbHVlIHZhbHVlXG4gICAgICAgICAgICB2YWx1ZS5wcm9wZXJ0aWVzLnB1c2ggbmV3IChpZiBhY2MgdGhlbiBBY2Nlc3MgZWxzZSBJbmRleCkgaWR4XG4gICAgICAgICAgICBtZXNzYWdlID0gaXNVbmFzc2lnbmFibGUgb2JqLnVud3JhcCgpLnZhbHVlXG4gICAgICAgICAgICBvYmouZXJyb3IgbWVzc2FnZSBpZiBtZXNzYWdlXG4gICAgICAgICAgICB2YWx1ZSA9IG5ldyBPcCAnPycsIHZhbHVlLCBkZWZhdWx0VmFsdWUgaWYgZGVmYXVsdFZhbHVlXG4gICAgICAgICAgICByZXR1cm4gbmV3IEFzc2lnbihvYmosIHZhbHVlLCBudWxsLCBwYXJhbTogQHBhcmFtKS5jb21waWxlVG9GcmFnbWVudHMgbywgTEVWRUxfVE9QXG4gICAgICAgICAgICBcbiAgICAgICAgdnZhciAgICAgPSB2YWx1ZS5jb21waWxlVG9GcmFnbWVudHMgbywgTEVWRUxfTElTVFxuICAgICAgICB2dmFyVGV4dCA9IGZyYWdtZW50c1RvVGV4dCB2dmFyXG4gICAgICAgIGFzc2lnbnMgID0gW11cbiAgICAgICAgZXhwYW5kZWRJZHggPSBmYWxzZVxuICAgICAgICAjIE1ha2UgdnZhciBpbnRvIGEgc2ltcGxlIHZhcmlhYmxlIGlmIGl0IGlzbid0IGFscmVhZHkuXG4gICAgICAgIGlmIHZhbHVlLnVud3JhcCgpIG5vdCBpbnN0YW5jZW9mIElkZW50aWZpZXJMaXRlcmFsIG9yIEB2YXJpYWJsZS5hc3NpZ25zKHZ2YXJUZXh0KVxuICAgICAgICAgICAgYXNzaWducy5wdXNoIFtAbWFrZUNvZGUoXCIjeyByZWYgPSBvLnNjb3BlLmZyZWVWYXJpYWJsZSAncmVmJyB9ID0gXCIpLCB2dmFyLi4uXVxuICAgICAgICAgICAgdnZhciA9IFtAbWFrZUNvZGUgcmVmXVxuICAgICAgICAgICAgdnZhclRleHQgPSByZWZcbiAgICAgICAgICAgIFxuICAgICAgICBmb3Igb2JqLCBpIGluIG9iamVjdHNcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWR4ID0gaVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiBub3QgZXhwYW5kZWRJZHggYW5kIG9iaiBpbnN0YW5jZW9mIFNwbGF0XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgbmFtZSA9IG9iai5uYW1lLnVud3JhcCgpLnZhbHVlXG4gICAgICAgICAgICAgICAgb2JqID0gb2JqLnVud3JhcCgpXG4gICAgICAgICAgICAgICAgdmFsID0gXCIje29sZW59IDw9ICN7dnZhclRleHR9Lmxlbmd0aCA/ICN7IHV0aWxpdHkgJ3NsaWNlJywgbyB9LmNhbGwoI3t2dmFyVGV4dH0sICN7aX1cIlxuICAgICAgICAgICAgICAgIGlmIHJlc3QgPSBvbGVuIC0gaSAtIDFcbiAgICAgICAgICAgICAgICAgICAgaXZhciA9IG8uc2NvcGUuZnJlZVZhcmlhYmxlICdpJywgc2luZ2xlOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgIHZhbCArPSBcIiwgI3tpdmFyfSA9ICN7dnZhclRleHR9Lmxlbmd0aCAtICN7cmVzdH0pIDogKCN7aXZhcn0gPSAje2l9LCBbXSlcIlxuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgdmFsICs9IFwiKSA6IFtdXCJcbiAgICAgICAgICAgICAgICB2YWwgICAgID0gbmV3IExpdGVyYWwgdmFsXG4gICAgICAgICAgICAgICAgZXhwYW5kZWRJZHggPSBcIiN7aXZhcn0rK1wiXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICBlbHNlIGlmIG5vdCBleHBhbmRlZElkeCBhbmQgb2JqIGluc3RhbmNlb2YgRXhwYW5zaW9uXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgcmVzdCA9IG9sZW4gLSBpIC0gMVxuICAgICAgICAgICAgICAgICAgICBpZiByZXN0IGlzIDFcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4cGFuZGVkSWR4ID0gXCIje3Z2YXJUZXh0fS5sZW5ndGggLSAxXCJcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgaXZhciA9IG8uc2NvcGUuZnJlZVZhcmlhYmxlICdpJywgc2luZ2xlOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWwgPSBuZXcgTGl0ZXJhbCBcIiN7aXZhcn0gPSAje3Z2YXJUZXh0fS5sZW5ndGggLSAje3Jlc3R9XCJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4cGFuZGVkSWR4ID0gXCIje2l2YXJ9KytcIlxuICAgICAgICAgICAgICAgICAgICAgICAgYXNzaWducy5wdXNoIHZhbC5jb21waWxlVG9GcmFnbWVudHMgbywgTEVWRUxfTElTVFxuICAgICAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgaWYgb2JqIGluc3RhbmNlb2YgU3BsYXQgb3Igb2JqIGluc3RhbmNlb2YgRXhwYW5zaW9uXG4gICAgICAgICAgICAgICAgICAgIG9iai5lcnJvciBcIm11bHRpcGxlIHNwbGF0cy9leHBhbnNpb25zIGFyZSBkaXNhbGxvd2VkIGluIGFuIGFzc2lnbm1lbnRcIlxuICAgICAgICAgICAgICAgIGRlZmF1bHRWYWx1ZSA9IG51bGxcbiAgICAgICAgICAgICAgICBpZiBvYmogaW5zdGFuY2VvZiBBc3NpZ24gYW5kIG9iai5jb250ZXh0IGlzICdvYmplY3QnICMgQSByZWd1bGFyIG9iamVjdCBwYXR0ZXJuLW1hdGNoLlxuICAgICAgICAgICAgICAgICAgICB7dmFyaWFibGU6IHtiYXNlOiBpZHh9LCB2YWx1ZTogb2JqfSA9IG9ialxuICAgICAgICAgICAgICAgICAgICBpZiBvYmogaW5zdGFuY2VvZiBBc3NpZ25cbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRWYWx1ZSA9IG9iai52YWx1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgb2JqID0gb2JqLnZhcmlhYmxlXG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBpZiBvYmogaW5zdGFuY2VvZiBBc3NpZ25cbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRWYWx1ZSA9IG9iai52YWx1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgb2JqID0gb2JqLnZhcmlhYmxlXG4gICAgICAgICAgICAgICAgICAgIGlkeCA9IGlmIGlzT2JqZWN0ICMgQSBzaG9ydGhhbmQgYHthLCBiLCBAY30gPSB2YWxgIHBhdHRlcm4tbWF0Y2guXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiBvYmoudGhpcyBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmoucHJvcGVydGllc1swXS5uYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFByb3BlcnR5TmFtZSBvYmoudW53cmFwKCkudmFsdWVcbiAgICAgICAgICAgICAgICAgICAgZWxzZSAjIEEgcmVndWxhciBhcnJheSBwYXR0ZXJuLW1hdGNoLlxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IExpdGVyYWwgZXhwYW5kZWRJZHggb3IgaWR4XG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBuYW1lID0gb2JqLnVud3JhcCgpLnZhbHVlXG4gICAgICAgICAgICAgICAgYWNjID0gaWR4LnVud3JhcCgpIGluc3RhbmNlb2YgUHJvcGVydHlOYW1lXG4gICAgICAgICAgICAgICAgdmFsID0gbmV3IFZhbHVlIG5ldyBMaXRlcmFsKHZ2YXJUZXh0KSwgW25ldyAoaWYgYWNjIHRoZW4gQWNjZXNzIGVsc2UgSW5kZXgpIGlkeF1cbiAgICAgICAgICAgICAgICB2YWwgPSBuZXcgT3AgJz8nLCB2YWwsIGRlZmF1bHRWYWx1ZSBpZiBkZWZhdWx0VmFsdWVcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIG5hbWU/XG4gICAgICAgICAgICAgICAgbWVzc2FnZSA9IGlzVW5hc3NpZ25hYmxlIG5hbWVcbiAgICAgICAgICAgICAgICBvYmouZXJyb3IgbWVzc2FnZSBpZiBtZXNzYWdlXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGFzc2lnbnMucHVzaCBuZXcgQXNzaWduKG9iaiwgdmFsLCBudWxsLCBwYXJhbTogQHBhcmFtLCBzdWJwYXR0ZXJuOiB5ZXMpLmNvbXBpbGVUb0ZyYWdtZW50cyBvLCBMRVZFTF9MSVNUXG4gICAgICAgICAgICBcbiAgICAgICAgYXNzaWducy5wdXNoIHZ2YXIgdW5sZXNzIHRvcCBvciBAc3VicGF0dGVyblxuICAgICAgICBmcmFnbWVudHMgPSBAam9pbkZyYWdtZW50QXJyYXlzIGFzc2lnbnMsICcsICdcbiAgICAgICAgaWYgby5sZXZlbCA8IExFVkVMX0xJU1QgdGhlbiBmcmFnbWVudHMgZWxzZSBAd3JhcEluQnJhY2VzIGZyYWdtZW50c1xuXG4gICAgIyBXaGVuIGNvbXBpbGluZyBhIGNvbmRpdGlvbmFsIGFzc2lnbm1lbnQsIHRha2UgY2FyZSB0byBlbnN1cmUgdGhhdCB0aGVcbiAgICAjIG9wZXJhbmRzIGFyZSBvbmx5IGV2YWx1YXRlZCBvbmNlLCBldmVuIHRob3VnaCB3ZSBoYXZlIHRvIHJlZmVyZW5jZSB0aGVtIG1vcmUgdGhhbiBvbmNlLlxuICAgIFxuICAgIGNvbXBpbGVDb25kaXRpb25hbDogKG8pIC0+XG4gICAgICAgIFxuICAgICAgICBbbGVmdCwgcmlnaHRdID0gQHZhcmlhYmxlLmNhY2hlUmVmZXJlbmNlIG9cbiAgICAgICAgIyBEaXNhbGxvdyBjb25kaXRpb25hbCBhc3NpZ25tZW50IG9mIHVuZGVmaW5lZCB2YXJpYWJsZXMuXG4gICAgICAgIGlmIG5vdCBsZWZ0LnByb3BlcnRpZXMubGVuZ3RoIGFuZCBsZWZ0LmJhc2UgaW5zdGFuY2VvZiBMaXRlcmFsIGFuZFxuICAgICAgICAgICAgICAgICAgICAgbGVmdC5iYXNlIG5vdCBpbnN0YW5jZW9mIFRoaXNMaXRlcmFsIGFuZCBub3Qgby5zY29wZS5jaGVjayBsZWZ0LmJhc2UudmFsdWVcbiAgICAgICAgICAgIEB2YXJpYWJsZS5lcnJvciBcInRoZSB2YXJpYWJsZSBcXFwiI3tsZWZ0LmJhc2UudmFsdWV9XFxcIiBjYW4ndCBiZSBhc3NpZ25lZCB3aXRoICN7QGNvbnRleHR9IGJlY2F1c2UgaXQgaGFzIG5vdCBiZWVuIGRlY2xhcmVkIGJlZm9yZVwiXG4gICAgICAgIGlmIFwiP1wiIGluIEBjb250ZXh0XG4gICAgICAgICAgICBvLmlzRXhpc3RlbnRpYWxFcXVhbHMgPSB0cnVlXG4gICAgICAgICAgICBuZXcgSWYobmV3IEV4aXN0ZW5jZShsZWZ0KSwgcmlnaHQsIHR5cGU6ICdpZicpLmFkZEVsc2UobmV3IEFzc2lnbihyaWdodCwgQHZhbHVlLCAnPScpKS5jb21waWxlVG9GcmFnbWVudHMgb1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBmcmFnbWVudHMgPSBuZXcgT3AoQGNvbnRleHRbLi4uLTFdLCBsZWZ0LCBuZXcgQXNzaWduKHJpZ2h0LCBAdmFsdWUsICc9JykpLmNvbXBpbGVUb0ZyYWdtZW50cyBvXG4gICAgICAgICAgICBpZiBvLmxldmVsIDw9IExFVkVMX0xJU1QgdGhlbiBmcmFnbWVudHMgZWxzZSBAd3JhcEluQnJhY2VzIGZyYWdtZW50c1xuXG4gICAgIyBDb252ZXJ0IHNwZWNpYWwgbWF0aCBhc3NpZ25tZW50IG9wZXJhdG9ycyBsaWtlIGBhICoqPSBiYCB0byB0aGUgZXF1aXZhbGVudFxuICAgICMgZXh0ZW5kZWQgZm9ybSBgYSA9IGEgKiogYmAgYW5kIHRoZW4gY29tcGlsZXMgdGhhdC5cbiAgICBcbiAgICBjb21waWxlU3BlY2lhbE1hdGg6IChvKSAtPlxuICAgICAgICBcbiAgICAgICAgW2xlZnQsIHJpZ2h0XSA9IEB2YXJpYWJsZS5jYWNoZVJlZmVyZW5jZSBvXG4gICAgICAgIG5ldyBBc3NpZ24obGVmdCwgbmV3IE9wKEBjb250ZXh0Wy4uLi0xXSwgcmlnaHQsIEB2YWx1ZSkpLmNvbXBpbGVUb0ZyYWdtZW50cyBvXG5cbiAgICAjIENvbXBpbGUgdGhlIGFzc2lnbm1lbnQgZnJvbSBhbiBhcnJheSBzcGxpY2UgbGl0ZXJhbCwgdXNpbmcgSmF2YVNjcmlwdCdzIGBBcnJheSNzcGxpY2VgIG1ldGhvZC5cbiAgICBcbiAgICBjb21waWxlU3BsaWNlOiAobykgLT5cbiAgICAgICAgXG4gICAgICAgIHtyYW5nZToge2Zyb20sIHRvLCBleGNsdXNpdmV9fSA9IEB2YXJpYWJsZS5wcm9wZXJ0aWVzLnBvcCgpXG4gICAgICAgIG5hbWUgPSBAdmFyaWFibGUuY29tcGlsZSBvXG4gICAgICAgIGlmIGZyb21cbiAgICAgICAgICAgIFtmcm9tRGVjbCwgZnJvbVJlZl0gPSBAY2FjaGVUb0NvZGVGcmFnbWVudHMgZnJvbS5jYWNoZSBvLCBMRVZFTF9PUFxuICAgICAgICBlbHNlXG4gICAgICAgICAgICBmcm9tRGVjbCA9IGZyb21SZWYgPSAnMCdcbiAgICAgICAgaWYgdG9cbiAgICAgICAgICAgIGlmIGZyb20/LmlzTnVtYmVyKCkgYW5kIHRvLmlzTnVtYmVyKClcbiAgICAgICAgICAgICAgICB0byA9IHRvLmNvbXBpbGUobykgLSBmcm9tUmVmXG4gICAgICAgICAgICAgICAgdG8gKz0gMSB1bmxlc3MgZXhjbHVzaXZlXG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgdG8gPSB0by5jb21waWxlKG8sIExFVkVMX0FDQ0VTUykgKyAnIC0gJyArIGZyb21SZWZcbiAgICAgICAgICAgICAgICB0byArPSAnICsgMScgdW5sZXNzIGV4Y2x1c2l2ZVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICB0byA9IFwiOWU5XCJcbiAgICAgICAgW3ZhbERlZiwgdmFsUmVmXSA9IEB2YWx1ZS5jYWNoZSBvLCBMRVZFTF9MSVNUXG4gICAgICAgIGFuc3dlciA9IFtdLmNvbmNhdCBAbWFrZUNvZGUoXCJbXS5zcGxpY2UuYXBwbHkoI3tuYW1lfSwgWyN7ZnJvbURlY2x9LCAje3RvfV0uY29uY2F0KFwiKSwgdmFsRGVmLCBAbWFrZUNvZGUoXCIpKSwgXCIpLCB2YWxSZWZcbiAgICAgICAgaWYgby5sZXZlbCA+IExFVkVMX1RPUCB0aGVuIEB3cmFwSW5CcmFjZXMgYW5zd2VyIGVsc2UgYW5zd2VyXG5cbiMgIDAwMDAwMDAgICAwMDAwMDAwICAgMDAwMDAwMCAgICAwMDAwMDAwMCAgXG4jIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICAgIFxuIyAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMDAwMDAgICBcbiMgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAgICAgXG4jICAwMDAwMDAwICAgMDAwMDAwMCAgIDAwMDAwMDAgICAgMDAwMDAwMDAgIFxuXG4jIEEgZnVuY3Rpb24gZGVmaW5pdGlvbi4gVGhpcyBpcyB0aGUgb25seSBub2RlIHRoYXQgY3JlYXRlcyBhIG5ldyBTY29wZS5cbiMgV2hlbiBmb3IgdGhlIHB1cnBvc2VzIG9mIHdhbGtpbmcgdGhlIGNvbnRlbnRzIG9mIGEgZnVuY3Rpb24gYm9keSwgdGhlIENvZGVcbiMgaGFzIG5vICpjaGlsZHJlbiogLS0gdGhleSdyZSB3aXRoaW4gdGhlIGlubmVyIHNjb3BlLlxuXG5leHBvcnRzLkNvZGUgPSBjbGFzcyBDb2RlIGV4dGVuZHMgQmFzZVxuICAgIGNvbnN0cnVjdG9yOiAocGFyYW1zLCBib2R5LCB0YWcpIC0+XG4gICAgICAgIEBwYXJhbXMgPSBwYXJhbXMgb3IgW11cbiAgICAgICAgQGJvZHkgICA9IGJvZHkgb3IgbmV3IEJsb2NrXG4gICAgICAgIEBib3VuZCAgPSB0YWcgaXMgJ2JvdW5kZnVuYydcbiAgICAgICAgQGlzR2VuZXJhdG9yID0gISFAYm9keS5jb250YWlucyAobm9kZSkgLT5cbiAgICAgICAgICAgIChub2RlIGluc3RhbmNlb2YgT3AgYW5kIG5vZGUuaXNZaWVsZCgpKSBvciBub2RlIGluc3RhbmNlb2YgWWllbGRSZXR1cm5cblxuICAgIGNoaWxkcmVuOiBbJ3BhcmFtcycsICdib2R5J11cblxuICAgIGlzU3RhdGVtZW50OiAtPiAhIUBjdG9yXG5cbiAgICBqdW1wczogTk9cblxuICAgIG1ha2VTY29wZTogKHBhcmVudFNjb3BlKSAtPiBuZXcgU2NvcGUgcGFyZW50U2NvcGUsIEBib2R5LCB0aGlzXG5cbiAgICAjIENvbXBpbGF0aW9uIGNyZWF0ZXMgYSBuZXcgc2NvcGUgdW5sZXNzIGV4cGxpY2l0bHkgYXNrZWQgdG8gc2hhcmUgd2l0aCB0aGVcbiAgICAjIG91dGVyIHNjb3BlLiBIYW5kbGVzIHNwbGF0IHBhcmFtZXRlcnMgaW4gdGhlIHBhcmFtZXRlciBsaXN0IGJ5IHBlZWtpbmcgYXRcbiAgICAjIHRoZSBKYXZhU2NyaXB0IGBhcmd1bWVudHNgIG9iamVjdC4gSWYgdGhlIGZ1bmN0aW9uIGlzIGJvdW5kIHdpdGggdGhlIGA9PmBcbiAgICAjIGFycm93LCBnZW5lcmF0ZXMgYSB3cmFwcGVyIHRoYXQgc2F2ZXMgdGhlIGN1cnJlbnQgdmFsdWUgb2YgYHRoaXNgIHRocm91Z2hcbiAgICAjIGEgY2xvc3VyZS5cbiAgICBcbiAgICBjb21waWxlTm9kZTogKG8pIC0+XG5cbiAgICAgICAgaWYgQGJvdW5kIGFuZCBvLnNjb3BlLm1ldGhvZD8uYm91bmRcbiAgICAgICAgICAgIEBjb250ZXh0ID0gby5zY29wZS5tZXRob2QuY29udGV4dFxuXG4gICAgICAgIGlmIEBib3VuZCBhbmQgbm90IEBjb250ZXh0ICMgSGFuZGxlIGJvdW5kIGZ1bmN0aW9ucyBlYXJseS5cbiAgICAgICAgICAgIEBjb250ZXh0ID0gJ190aGlzJ1xuICAgICAgICAgICAgd3JhcHBlciA9IG5ldyBDb2RlIFtuZXcgUGFyYW0gbmV3IElkZW50aWZpZXJMaXRlcmFsIEBjb250ZXh0XSwgbmV3IEJsb2NrIFt0aGlzXVxuICAgICAgICAgICAgYm91bmRmdW5jID0gbmV3IENhbGwod3JhcHBlciwgW25ldyBUaGlzTGl0ZXJhbF0pXG4gICAgICAgICAgICBib3VuZGZ1bmMudXBkYXRlTG9jYXRpb25EYXRhSWZNaXNzaW5nIEBsb2NhdGlvbkRhdGFcbiAgICAgICAgICAgIHJldHVybiBib3VuZGZ1bmMuY29tcGlsZU5vZGUobylcblxuICAgICAgICBvLnNjb3BlICAgICAgICAgPSBkZWwobywgJ2NsYXNzU2NvcGUnKSBvciBAbWFrZVNjb3BlIG8uc2NvcGVcbiAgICAgICAgby5zY29wZS5zaGFyZWQgID0gZGVsKG8sICdzaGFyZWRTY29wZScpXG4gICAgICAgIG8uaW5kZW50ICAgICAgICs9IFRBQlxuICAgICAgICBkZWxldGUgby5iYXJlXG4gICAgICAgIGRlbGV0ZSBvLmlzRXhpc3RlbnRpYWxFcXVhbHNcbiAgICAgICAgcGFyYW1zID0gW11cbiAgICAgICAgZXhwcnMgID0gW11cbiAgICAgICAgZm9yIHBhcmFtIGluIEBwYXJhbXMgd2hlbiBwYXJhbSBub3QgaW5zdGFuY2VvZiBFeHBhbnNpb25cbiAgICAgICAgICAgIG8uc2NvcGUucGFyYW1ldGVyIHBhcmFtLmFzUmVmZXJlbmNlIG9cbiAgICAgICAgZm9yIHBhcmFtIGluIEBwYXJhbXMgd2hlbiBwYXJhbS5zcGxhdCBvciBwYXJhbSBpbnN0YW5jZW9mIEV4cGFuc2lvblxuICAgICAgICAgICAgZm9yIHAgaW4gQHBhcmFtcyB3aGVuIHAgbm90IGluc3RhbmNlb2YgRXhwYW5zaW9uIGFuZCBwLm5hbWUudmFsdWVcbiAgICAgICAgICAgICAgICBvLnNjb3BlLmFkZCBwLm5hbWUudmFsdWUsICd2YXInLCB5ZXNcbiAgICAgICAgICAgIHNwbGF0cyA9IG5ldyBBc3NpZ24gbmV3IFZhbHVlKG5ldyBBcnIocC5hc1JlZmVyZW5jZSBvIGZvciBwIGluIEBwYXJhbXMpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgVmFsdWUgbmV3IElkZW50aWZpZXJMaXRlcmFsICdhcmd1bWVudHMnXG4gICAgICAgICAgICBicmVha1xuICAgICAgICBmb3IgcGFyYW0gaW4gQHBhcmFtc1xuICAgICAgICAgICAgaWYgcGFyYW0uaXNDb21wbGV4KClcbiAgICAgICAgICAgICAgICB2YWwgPSByZWYgPSBwYXJhbS5hc1JlZmVyZW5jZSBvXG4gICAgICAgICAgICAgICAgdmFsID0gbmV3IE9wICc/JywgcmVmLCBwYXJhbS52YWx1ZSBpZiBwYXJhbS52YWx1ZVxuICAgICAgICAgICAgICAgIGV4cHJzLnB1c2ggbmV3IEFzc2lnbiBuZXcgVmFsdWUocGFyYW0ubmFtZSksIHZhbCwgJz0nLCBwYXJhbTogeWVzXG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgcmVmID0gcGFyYW1cbiAgICAgICAgICAgICAgICBpZiBwYXJhbS52YWx1ZVxuICAgICAgICAgICAgICAgICAgICBsaXQgPSBuZXcgTGl0ZXJhbCByZWYubmFtZS52YWx1ZSArICcgPT0gbnVsbCdcbiAgICAgICAgICAgICAgICAgICAgdmFsID0gbmV3IEFzc2lnbiBuZXcgVmFsdWUocGFyYW0ubmFtZSksIHBhcmFtLnZhbHVlLCAnPSdcbiAgICAgICAgICAgICAgICAgICAgZXhwcnMucHVzaCBuZXcgSWYgbGl0LCB2YWxcbiAgICAgICAgICAgIHBhcmFtcy5wdXNoIHJlZiB1bmxlc3Mgc3BsYXRzXG4gICAgICAgIHdhc0VtcHR5ID0gQGJvZHkuaXNFbXB0eSgpXG4gICAgICAgIGV4cHJzLnVuc2hpZnQgc3BsYXRzIGlmIHNwbGF0c1xuICAgICAgICBAYm9keS5leHByZXNzaW9ucy51bnNoaWZ0IGV4cHJzLi4uIGlmIGV4cHJzLmxlbmd0aFxuICAgICAgICBmb3IgcCwgaSBpbiBwYXJhbXNcbiAgICAgICAgICAgIHBhcmFtc1tpXSA9IHAuY29tcGlsZVRvRnJhZ21lbnRzIG9cbiAgICAgICAgICAgIG8uc2NvcGUucGFyYW1ldGVyIGZyYWdtZW50c1RvVGV4dCBwYXJhbXNbaV1cbiAgICAgICAgdW5pcXMgPSBbXVxuICAgICAgICBcbiAgICAgICAgQGVhY2hQYXJhbU5hbWUgKG5hbWUsIG5vZGUpIC0+XG4gICAgICAgICAgICBub2RlLmVycm9yIFwibXVsdGlwbGUgcGFyYW1ldGVycyBuYW1lZCAje25hbWV9XCIgaWYgbmFtZSBpbiB1bmlxc1xuICAgICAgICAgICAgdW5pcXMucHVzaCBuYW1lXG4gICAgICAgICAgICBcbiAgICAgICAgQGJvZHkubWFrZVJldHVybigpIHVubGVzcyB3YXNFbXB0eSBvciBAbm9SZXR1cm5cbiAgICAgICAgY29kZSA9ICdmdW5jdGlvbidcbiAgICAgICAgY29kZSArPSAnKicgaWYgQGlzR2VuZXJhdG9yXG4gICAgICAgIGNvZGUgKz0gJyAnICsgQG5hbWUgaWYgQGN0b3JcbiAgICAgICAgY29kZSArPSAnKCdcbiAgICAgICAgXG4gICAgICAgIGFuc3dlciA9IFtAbWFrZUNvZGUoY29kZSldXG4gICAgICAgIFxuICAgICAgICBmb3IgcCwgaSBpbiBwYXJhbXNcbiAgICAgICAgICAgIGlmIGkgdGhlbiBhbnN3ZXIucHVzaCBAbWFrZUNvZGUgXCIsIFwiXG4gICAgICAgICAgICBhbnN3ZXIucHVzaCBwLi4uXG4gICAgICAgIGFuc3dlci5wdXNoIEBtYWtlQ29kZSAnKSB7J1xuICAgICAgICBhbnN3ZXIgPSBhbnN3ZXIuY29uY2F0KEBtYWtlQ29kZShcIlxcblwiKSwgQGJvZHkuY29tcGlsZVdpdGhEZWNsYXJhdGlvbnMobyksIEBtYWtlQ29kZShcIlxcbiN7QHRhYn1cIikpIHVubGVzcyBAYm9keS5pc0VtcHR5KClcbiAgICAgICAgYW5zd2VyLnB1c2ggQG1ha2VDb2RlICd9J1xuXG4gICAgICAgIHJldHVybiBbQG1ha2VDb2RlKEB0YWIpLCBhbnN3ZXIuLi5dIGlmIEBjdG9yXG4gICAgICAgIGlmIEBmcm9udCBvciAoby5sZXZlbCA+PSBMRVZFTF9BQ0NFU1MpIHRoZW4gQHdyYXBJbkJyYWNlcyBhbnN3ZXIgZWxzZSBhbnN3ZXJcblxuICAgIGVhY2hQYXJhbU5hbWU6IChpdGVyYXRvcikgLT5cbiAgICAgICAgcGFyYW0uZWFjaE5hbWUgaXRlcmF0b3IgZm9yIHBhcmFtIGluIEBwYXJhbXNcblxuICAgICMgU2hvcnQtY2lyY3VpdCBgdHJhdmVyc2VDaGlsZHJlbmAgbWV0aG9kIHRvIHByZXZlbnQgaXQgZnJvbSBjcm9zc2luZyBzY29wZSBib3VuZGFyaWVzXG4gICAgIyB1bmxlc3MgYGNyb3NzU2NvcGVgIGlzIGB0cnVlYC5cbiAgICBcbiAgICB0cmF2ZXJzZUNoaWxkcmVuOiAoY3Jvc3NTY29wZSwgZnVuYykgLT5cbiAgICAgICAgXG4gICAgICAgIHN1cGVyKGNyb3NzU2NvcGUsIGZ1bmMpIGlmIGNyb3NzU2NvcGVcblxuIyAwMDAwMDAwMCAgICAwMDAwMDAwICAgMDAwMDAwMDAgICAgMDAwMDAwMCAgIDAwICAgICAwMCAgXG4jIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICBcbiMgMDAwMDAwMDAgICAwMDAwMDAwMDAgIDAwMDAwMDAgICAgMDAwMDAwMDAwICAwMDAwMDAwMDAgIFxuIyAwMDAgICAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAwIDAwMCAgXG4jIDAwMCAgICAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICBcblxuIyBBIHBhcmFtZXRlciBpbiBhIGZ1bmN0aW9uIGRlZmluaXRpb24uIEJleW9uZCBhIHR5cGljYWwgSmF2YVNjcmlwdCBwYXJhbWV0ZXIsXG4jIHRoZXNlIHBhcmFtZXRlcnMgY2FuIGFsc28gYXR0YWNoIHRoZW1zZWx2ZXMgdG8gdGhlIGNvbnRleHQgb2YgdGhlIGZ1bmN0aW9uLFxuIyBhcyB3ZWxsIGFzIGJlIGEgc3BsYXQsIGdhdGhlcmluZyB1cCBhIGdyb3VwIG9mIHBhcmFtZXRlcnMgaW50byBhbiBhcnJheS5cblxuZXhwb3J0cy5QYXJhbSA9IGNsYXNzIFBhcmFtIGV4dGVuZHMgQmFzZVxuICAgIFxuICAgIGNvbnN0cnVjdG9yOiAoQG5hbWUsIEB2YWx1ZSwgQHNwbGF0KSAtPlxuICAgICAgICBtZXNzYWdlID0gaXNVbmFzc2lnbmFibGUgQG5hbWUudW53cmFwQWxsKCkudmFsdWVcbiAgICAgICAgQG5hbWUuZXJyb3IgbWVzc2FnZSBpZiBtZXNzYWdlXG4gICAgICAgICMgdGhlIGZvbGxvd2luZyBlcnJvciBkb2Vucyd0IHRocm93IGFueW1vcmUgaW4ga29mZmVlIChjb25maWcgcGFyYW1ldGVycylcbiAgICAgICAgIyBpZiBAbmFtZSBpbnN0YW5jZW9mIE9iaiBhbmQgQG5hbWUuZ2VuZXJhdGVkXG4gICAgICAgICAgICAjIHRva2VuID0gQG5hbWUub2JqZWN0c1swXS5vcGVyYXRvclRva2VuXG4gICAgICAgICAgICAjIHRva2VuLmVycm9yIFwidW5leHBlY3RlZCAje3Rva2VuLnZhbHVlfVwiXG5cbiAgICBjaGlsZHJlbjogWyduYW1lJywgJ3ZhbHVlJ11cblxuICAgIGNvbXBpbGVUb0ZyYWdtZW50czogKG8pIC0+XG4gICAgICAgIFxuICAgICAgICBAbmFtZS5jb21waWxlVG9GcmFnbWVudHMgbywgTEVWRUxfTElTVFxuXG4gICAgYXNSZWZlcmVuY2U6IChvKSAtPlxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIEByZWZlcmVuY2UgaWYgQHJlZmVyZW5jZVxuICAgICAgICBub2RlID0gQG5hbWVcbiAgICAgICAgaWYgbm9kZS50aGlzXG4gICAgICAgICAgICBuYW1lID0gbm9kZS5wcm9wZXJ0aWVzWzBdLm5hbWUudmFsdWVcbiAgICAgICAgICAgIG5hbWUgPSBcIl8je25hbWV9XCIgaWYgbmFtZSBpbiBKU19GT1JCSURERU5cbiAgICAgICAgICAgIG5vZGUgPSBuZXcgSWRlbnRpZmllckxpdGVyYWwgby5zY29wZS5mcmVlVmFyaWFibGUgbmFtZVxuICAgICAgICBlbHNlIGlmIG5vZGUuaXNDb21wbGV4KClcbiAgICAgICAgICAgIG5vZGUgPSBuZXcgSWRlbnRpZmllckxpdGVyYWwgby5zY29wZS5mcmVlVmFyaWFibGUgJ2FyZydcbiAgICAgICAgbm9kZSA9IG5ldyBWYWx1ZSBub2RlXG4gICAgICAgIG5vZGUgPSBuZXcgU3BsYXQgbm9kZSBpZiBAc3BsYXRcbiAgICAgICAgbm9kZS51cGRhdGVMb2NhdGlvbkRhdGFJZk1pc3NpbmcgQGxvY2F0aW9uRGF0YVxuICAgICAgICBAcmVmZXJlbmNlID0gbm9kZVxuXG4gICAgaXNDb21wbGV4OiAtPlxuICAgICAgICBcbiAgICAgICAgQG5hbWUuaXNDb21wbGV4KClcblxuICAgICMgSXRlcmF0ZXMgdGhlIG5hbWUgb3IgbmFtZXMgb2YgYSBgUGFyYW1gLlxuICAgICMgSW4gYSBzZW5zZSwgYSBkZXN0cnVjdHVyZWQgcGFyYW1ldGVyIHJlcHJlc2VudHMgbXVsdGlwbGUgSlMgcGFyYW1ldGVycy4gVGhpc1xuICAgICMgbWV0aG9kIGFsbG93cyB0byBpdGVyYXRlIHRoZW0gYWxsLlxuICAgICMgVGhlIGBpdGVyYXRvcmAgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgYXMgYGl0ZXJhdG9yKG5hbWUsIG5vZGUpYCB3aGVyZVxuICAgICMgYG5hbWVgIGlzIHRoZSBuYW1lIG9mIHRoZSBwYXJhbWV0ZXIgYW5kIGBub2RlYCBpcyB0aGUgQVNUIG5vZGUgY29ycmVzcG9uZGluZyB0byB0aGF0IG5hbWUuXG4gICAgXG4gICAgZWFjaE5hbWU6IChpdGVyYXRvciwgbmFtZSA9IEBuYW1lKS0+XG4gICAgICAgIFxuICAgICAgICBhdFBhcmFtID0gKG9iaikgLT4gXG4gICAgICAgICAgICAjIGxvZyAnQScsIFwiQCN7b2JqLnByb3BlcnRpZXNbMF0ubmFtZS52YWx1ZX1cIlxuICAgICAgICAgICAgaXRlcmF0b3IgXCJAI3tvYmoucHJvcGVydGllc1swXS5uYW1lLnZhbHVlfVwiLCBvYmpcbiAgICAgICAgXG4gICAgICAgIGlmIG5hbWUgaW5zdGFuY2VvZiBJZGVudGlmaWVyTGl0ZXJhbFxuICAgICAgICAgICAgcmV0dXJuIGlmIG5hbWUgaW5zdGFuY2VvZiBOdWxsTGl0ZXJhbFxuICAgICAgICAgICAgIyBsb2cgJ0InLCBuYW1lLnZhbHVlLCBuYW1lXG4gICAgICAgICAgICByZXR1cm4gaXRlcmF0b3IgbmFtZS52YWx1ZSwgbmFtZSAjIHNpbXBsZSBsaXRlcmFscyBgZm9vYCwgYF9gLCBldGMuXG4gICAgICAgIFxuICAgICAgICByZXR1cm4gYXRQYXJhbSBuYW1lIGlmIG5hbWUgaW5zdGFuY2VvZiBWYWx1ZSAjIGF0LXBhcmFtcyBgQGZvb2BcbiAgICAgICAgXG4gICAgICAgIGZvciBvYmogaW4gbmFtZS5vYmplY3RzID8gW11cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgb2JqIGluc3RhbmNlb2YgQXNzaWduIGFuZCBub3Qgb2JqLmNvbnRleHQ/ICMgZGVzdHJ1Y3R1cmVkIHBhcmFtZXRlciB3aXRoIGRlZmF1bHQgdmFsdWVcbiAgICAgICAgICAgICAgICBvYmogPSBvYmoudmFyaWFibGVcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgb2JqIGluc3RhbmNlb2YgQXNzaWduICMgYXNzaWdubWVudHMgd2l0aGluIGRlc3RydWN0dXJlZCBwYXJhbWV0ZXJzIGB7Zm9vOmJhcn1gXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgb2JqLnZhbHVlIGluc3RhbmNlb2YgQXNzaWduICMgLi4uIHBvc3NpYmx5IHdpdGggYSBkZWZhdWx0IHZhbHVlXG4gICAgICAgICAgICAgICAgICAgIG9iaiA9IG9iai52YWx1ZVxuICAgICAgICAgICAgICAgIEBlYWNoTmFtZSBpdGVyYXRvciwgb2JqLnZhbHVlLnVud3JhcCgpXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGVsc2UgaWYgb2JqIGluc3RhbmNlb2YgU3BsYXQgIyBzcGxhdHMgd2l0aGluIGRlc3RydWN0dXJlZCBwYXJhbWV0ZXJzIGBbeHMuLi5dYFxuICAgICAgICAgICAgICAgIG5vZGUgPSBvYmoubmFtZS51bndyYXAoKVxuICAgICAgICAgICAgICAgICMgbG9nICdDJywgbm9kZS52YWx1ZVxuICAgICAgICAgICAgICAgIGl0ZXJhdG9yIG5vZGUudmFsdWUsIG5vZGVcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIGVsc2UgaWYgb2JqIGluc3RhbmNlb2YgVmFsdWVcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiBvYmouaXNBcnJheSgpIG9yIG9iai5pc09iamVjdCgpICMgZGVzdHJ1Y3R1cmVkIHBhcmFtZXRlcnMgd2l0aGluIGRlc3RydWN0dXJlZCBwYXJhbWV0ZXJzIGBbe2F9XWBcbiAgICAgICAgICAgICAgICAgICAgQGVhY2hOYW1lIGl0ZXJhdG9yLCBvYmouYmFzZVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGVsc2UgaWYgb2JqLnRoaXMgIyBhdC1wYXJhbXMgd2l0aGluIGRlc3RydWN0dXJlZCBwYXJhbWV0ZXJzIGB7QGZvb31gXG4gICAgICAgICAgICAgICAgICAgIGF0UGFyYW0gb2JqXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAjIGxvZyAnRCcsIG9iai5iYXNlLnZhbHVlXG4gICAgICAgICAgICAgICAgICAgIGl0ZXJhdG9yIG9iai5iYXNlLnZhbHVlLCBvYmouYmFzZSAjIHNpbXBsZSBkZXN0cnVjdHVyZWQgcGFyYW1ldGVycyB7Zm9vfVxuICAgICAgICAgICAgZWxzZSBpZiBvYmogbm90IGluc3RhbmNlb2YgRXhwYW5zaW9uXG4gICAgICAgICAgICAgICAgb2JqLmVycm9yIFwiaWxsZWdhbCBwYXJhbWV0ZXIgI3tvYmouY29tcGlsZSgpfVwiXG4gICAgICAgICAgICAgICAgXG4gICAgICAgIHJldHVyblxuXG4jICAwMDAwMDAwICAwMDAwMDAwMCAgIDAwMCAgICAgICAwMDAwMDAwICAgMDAwMDAwMDAwICBcbiMgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgICAgMDAwICAgMDAwICAgICAwMDAgICAgIFxuIyAwMDAwMDAwICAgMDAwMDAwMDAgICAwMDAgICAgICAwMDAwMDAwMDAgICAgIDAwMCAgICAgXG4jICAgICAgMDAwICAwMDAgICAgICAgIDAwMCAgICAgIDAwMCAgIDAwMCAgICAgMDAwICAgICBcbiMgMDAwMDAwMCAgIDAwMCAgICAgICAgMDAwMDAwMCAgMDAwICAgMDAwICAgICAwMDAgICAgIFxuXG4jIEEgc3BsYXQsIGVpdGhlciBhcyBhIHBhcmFtZXRlciB0byBhIGZ1bmN0aW9uLCBhbiBhcmd1bWVudCB0byBhIGNhbGwsIG9yIGFzIHBhcnQgb2YgYSBkZXN0cnVjdHVyaW5nIGFzc2lnbm1lbnQuXG5cbmV4cG9ydHMuU3BsYXQgPSBjbGFzcyBTcGxhdCBleHRlbmRzIEJhc2VcblxuICAgIGNoaWxkcmVuOiBbJ25hbWUnXVxuXG4gICAgaXNBc3NpZ25hYmxlOiBZRVNcblxuICAgIGNvbnN0cnVjdG9yOiAobmFtZSkgLT5cbiAgICAgICAgQG5hbWUgPSBpZiBuYW1lLmNvbXBpbGUgdGhlbiBuYW1lIGVsc2UgbmV3IExpdGVyYWwgbmFtZVxuXG4gICAgYXNzaWduczogKG5hbWUpIC0+XG4gICAgICAgIEBuYW1lLmFzc2lnbnMgbmFtZVxuXG4gICAgY29tcGlsZU5vZGU6IChvKSAtPlxuICAgICAgICBAbmFtZS5jb21waWxlVG9GcmFnbWVudHMgb1xuXG4gICAgdW53cmFwOiAtPiBAbmFtZVxuXG4gICAgIyBVdGlsaXR5IGZ1bmN0aW9uIHRoYXQgY29udmVydHMgYW4gYXJiaXRyYXJ5IG51bWJlciBvZiBlbGVtZW50cywgbWl4ZWQgd2l0aCBzcGxhdHMsIHRvIGEgcHJvcGVyIGFycmF5LlxuICAgIFxuICAgIEBjb21waWxlU3BsYXR0ZWRBcnJheTogKG8sIGxpc3QsIGFwcGx5KSAtPlxuICAgICAgICBcbiAgICAgICAgaW5kZXggPSAtMVxuICAgICAgICBjb250aW51ZSB3aGlsZSAobm9kZSA9IGxpc3RbKytpbmRleF0pIGFuZCBub2RlIG5vdCBpbnN0YW5jZW9mIFNwbGF0XG4gICAgICAgIHJldHVybiBbXSBpZiBpbmRleCA+PSBsaXN0Lmxlbmd0aFxuICAgICAgICBpZiBsaXN0Lmxlbmd0aCBpcyAxXG4gICAgICAgICAgICBub2RlID0gbGlzdFswXVxuICAgICAgICAgICAgZnJhZ21lbnRzID0gbm9kZS5jb21waWxlVG9GcmFnbWVudHMgbywgTEVWRUxfTElTVFxuICAgICAgICAgICAgcmV0dXJuIGZyYWdtZW50cyBpZiBhcHBseVxuICAgICAgICAgICAgcmV0dXJuIFtdLmNvbmNhdCBub2RlLm1ha2VDb2RlKFwiI3sgdXRpbGl0eSAnc2xpY2UnLCBvIH0uY2FsbChcIiksIGZyYWdtZW50cywgbm9kZS5tYWtlQ29kZShcIilcIilcbiAgICAgICAgYXJncyA9IGxpc3RbaW5kZXguLl1cbiAgICAgICAgZm9yIG5vZGUsIGkgaW4gYXJnc1xuICAgICAgICAgICAgY29tcGlsZWROb2RlID0gbm9kZS5jb21waWxlVG9GcmFnbWVudHMgbywgTEVWRUxfTElTVFxuICAgICAgICAgICAgYXJnc1tpXSA9IGlmIG5vZGUgaW5zdGFuY2VvZiBTcGxhdFxuICAgICAgICAgICAgdGhlbiBbXS5jb25jYXQgbm9kZS5tYWtlQ29kZShcIiN7IHV0aWxpdHkgJ3NsaWNlJywgbyB9LmNhbGwoXCIpLCBjb21waWxlZE5vZGUsIG5vZGUubWFrZUNvZGUoXCIpXCIpXG4gICAgICAgICAgICBlbHNlIFtdLmNvbmNhdCBub2RlLm1ha2VDb2RlKFwiW1wiKSwgY29tcGlsZWROb2RlLCBub2RlLm1ha2VDb2RlKFwiXVwiKVxuICAgICAgICBpZiBpbmRleCBpcyAwXG4gICAgICAgICAgICBub2RlID0gbGlzdFswXVxuICAgICAgICAgICAgY29uY2F0UGFydCA9IChub2RlLmpvaW5GcmFnbWVudEFycmF5cyBhcmdzWzEuLl0sICcsICcpXG4gICAgICAgICAgICByZXR1cm4gYXJnc1swXS5jb25jYXQgbm9kZS5tYWtlQ29kZShcIi5jb25jYXQoXCIpLCBjb25jYXRQYXJ0LCBub2RlLm1ha2VDb2RlKFwiKVwiKVxuICAgICAgICBiYXNlID0gKG5vZGUuY29tcGlsZVRvRnJhZ21lbnRzIG8sIExFVkVMX0xJU1QgZm9yIG5vZGUgaW4gbGlzdFsuLi5pbmRleF0pXG4gICAgICAgIGJhc2UgPSBsaXN0WzBdLmpvaW5GcmFnbWVudEFycmF5cyBiYXNlLCAnLCAnXG4gICAgICAgIGNvbmNhdFBhcnQgPSBsaXN0W2luZGV4XS5qb2luRnJhZ21lbnRBcnJheXMgYXJncywgJywgJ1xuICAgICAgICBbLi4uLCBsYXN0XSA9IGxpc3RcbiAgICAgICAgW10uY29uY2F0IGxpc3RbMF0ubWFrZUNvZGUoXCJbXCIpLCBiYXNlLCBsaXN0W2luZGV4XS5tYWtlQ29kZShcIl0uY29uY2F0KFwiKSwgY29uY2F0UGFydCwgbGFzdC5tYWtlQ29kZShcIilcIilcblxuIyAwMDAwMDAwMCAgMDAwICAgMDAwICAwMDAwMDAwMCAgICAwMDAwMDAwICAgMDAwICAgMDAwICAgMDAwMDAwMCAgMDAwICAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgXG4jIDAwMCAgICAgICAgMDAwIDAwMCAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAwICAwMDAgIDAwMCAgICAgICAwMDAgIDAwMCAgIDAwMCAgMDAwMCAgMDAwICBcbiMgMDAwMDAwMCAgICAgMDAwMDAgICAgMDAwMDAwMDAgICAwMDAwMDAwMDAgIDAwMCAwIDAwMCAgMDAwMDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgMCAwMDAgIFxuIyAwMDAgICAgICAgIDAwMCAwMDAgICAwMDAgICAgICAgIDAwMCAgIDAwMCAgMDAwICAwMDAwICAgICAgIDAwMCAgMDAwICAwMDAgICAwMDAgIDAwMCAgMDAwMCAgXG4jIDAwMDAwMDAwICAwMDAgICAwMDAgIDAwMCAgICAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMDAwMDAgICAwMDAgICAwMDAwMDAwICAgMDAwICAgMDAwICBcblxuIyBVc2VkIHRvIHNraXAgdmFsdWVzIGluc2lkZSBhbiBhcnJheSBkZXN0cnVjdHVyaW5nIChwYXR0ZXJuIG1hdGNoaW5nKSBvciBwYXJhbWV0ZXIgbGlzdC5cblxuZXhwb3J0cy5FeHBhbnNpb24gPSBjbGFzcyBFeHBhbnNpb24gZXh0ZW5kcyBCYXNlXG5cbiAgICBpc0NvbXBsZXg6IE5PXG5cbiAgICBjb21waWxlTm9kZTogKG8pIC0+XG4gICAgICAgIEBlcnJvciAnRXhwYW5zaW9uIG11c3QgYmUgdXNlZCBpbnNpZGUgYSBkZXN0cnVjdHVyaW5nIGFzc2lnbm1lbnQgb3IgcGFyYW1ldGVyIGxpc3QnXG5cbiAgICBhc1JlZmVyZW5jZTogKG8pIC0+XG4gICAgICAgIHRoaXNcblxuICAgIGVhY2hOYW1lOiAoaXRlcmF0b3IpIC0+XG5cbiMgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgMDAwICAgICAgMDAwMDAwMDAgIFxuIyAwMDAgMCAwMDAgIDAwMCAgIDAwMCAgMDAwICAwMDAgICAgICAwMDAgICAgICAgXG4jIDAwMDAwMDAwMCAgMDAwMDAwMDAwICAwMDAgIDAwMCAgICAgIDAwMDAwMDAgICBcbiMgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgMDAwICAgICAgMDAwICAgICAgIFxuIyAwMCAgICAgMDAgIDAwMCAgIDAwMCAgMDAwICAwMDAwMDAwICAwMDAwMDAwMCAgXG5cbiMgQSB3aGlsZSBsb29wLCB0aGUgb25seSBzb3J0IG9mIGxvdy1sZXZlbCBsb29wIGV4cG9zZWQgYnkgS29mZmVlLiBGcm9tXG4jIGl0LCBhbGwgb3RoZXIgbG9vcHMgY2FuIGJlIG1hbnVmYWN0dXJlZC4gVXNlZnVsIGluIGNhc2VzIHdoZXJlIHlvdSBuZWVkIG1vcmVcbiMgZmxleGliaWxpdHkgb3IgbW9yZSBzcGVlZCB0aGFuIGEgY29tcHJlaGVuc2lvbiBjYW4gcHJvdmlkZS5cblxuZXhwb3J0cy5XaGlsZSA9IGNsYXNzIFdoaWxlIGV4dGVuZHMgQmFzZVxuICAgIFxuICAgIGNvbnN0cnVjdG9yOiAoY29uZGl0aW9uLCBvcHRpb25zKSAtPlxuICAgICAgICBAY29uZGl0aW9uID0gaWYgb3B0aW9ucz8uaW52ZXJ0IHRoZW4gY29uZGl0aW9uLmludmVydCgpIGVsc2UgY29uZGl0aW9uXG4gICAgICAgIEBndWFyZCAgICAgICA9IG9wdGlvbnM/Lmd1YXJkXG5cbiAgICBjaGlsZHJlbjogWydjb25kaXRpb24nLCAnZ3VhcmQnLCAnYm9keSddXG5cbiAgICBpc1N0YXRlbWVudDogWUVTXG5cbiAgICBtYWtlUmV0dXJuOiAocmVzKSAtPlxuICAgICAgICBpZiByZXNcbiAgICAgICAgICAgIHN1cGVyXG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIEByZXR1cm5zID0gbm90IEBqdW1wcyBsb29wOiB5ZXNcbiAgICAgICAgICAgIHRoaXNcblxuICAgIGFkZEJvZHk6IChAYm9keSkgLT5cbiAgICAgICAgdGhpc1xuXG4gICAganVtcHM6IC0+XG4gICAgICAgIHtleHByZXNzaW9uc30gPSBAYm9keVxuICAgICAgICByZXR1cm4gbm8gdW5sZXNzIGV4cHJlc3Npb25zLmxlbmd0aFxuICAgICAgICBmb3Igbm9kZSBpbiBleHByZXNzaW9uc1xuICAgICAgICAgICAgcmV0dXJuIGp1bXBOb2RlIGlmIGp1bXBOb2RlID0gbm9kZS5qdW1wcyBsb29wOiB5ZXNcbiAgICAgICAgbm9cblxuICAgICMgVGhlIG1haW4gZGlmZmVyZW5jZSBmcm9tIGEgSmF2YVNjcmlwdCAqd2hpbGUqIGlzIHRoYXQgdGhlIEtvZmZlZVxuICAgICMgKndoaWxlKiBjYW4gYmUgdXNlZCBhcyBhIHBhcnQgb2YgYSBsYXJnZXIgZXhwcmVzc2lvbiAtLSB3aGlsZSBsb29wcyBtYXlcbiAgICAjIHJldHVybiBhbiBhcnJheSBjb250YWluaW5nIHRoZSBjb21wdXRlZCByZXN1bHQgb2YgZWFjaCBpdGVyYXRpb24uXG4gICAgXG4gICAgY29tcGlsZU5vZGU6IChvKSAtPlxuICAgICAgICBvLmluZGVudCArPSBUQUJcbiAgICAgICAgc2V0ICAgICAgICAgID0gJydcbiAgICAgICAge2JvZHl9ICAgPSB0aGlzXG4gICAgICAgIGlmIGJvZHkuaXNFbXB0eSgpXG4gICAgICAgICAgICBib2R5ID0gQG1ha2VDb2RlICcnXG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGlmIEByZXR1cm5zXG4gICAgICAgICAgICAgICAgYm9keS5tYWtlUmV0dXJuIHJ2YXIgPSBvLnNjb3BlLmZyZWVWYXJpYWJsZSAncmVzdWx0cydcbiAgICAgICAgICAgICAgICBzZXQgID0gXCIje0B0YWJ9I3tydmFyfSA9IFtdO1xcblwiXG4gICAgICAgICAgICBpZiBAZ3VhcmRcbiAgICAgICAgICAgICAgICBpZiBib2R5LmV4cHJlc3Npb25zLmxlbmd0aCA+IDFcbiAgICAgICAgICAgICAgICAgICAgYm9keS5leHByZXNzaW9ucy51bnNoaWZ0IG5ldyBJZiAobmV3IFBhcmVucyBAZ3VhcmQpLmludmVydCgpLCBuZXcgU3RhdGVtZW50TGl0ZXJhbCBcImNvbnRpbnVlXCJcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGJvZHkgPSBCbG9jay53cmFwIFtuZXcgSWYgQGd1YXJkLCBib2R5XSBpZiBAZ3VhcmRcbiAgICAgICAgICAgIGJvZHkgPSBbXS5jb25jYXQgQG1ha2VDb2RlKFwiXFxuXCIpLCAoYm9keS5jb21waWxlVG9GcmFnbWVudHMgbywgTEVWRUxfVE9QKSwgQG1ha2VDb2RlKFwiXFxuI3tAdGFifVwiKVxuICAgICAgICBhbnN3ZXIgPSBbXS5jb25jYXQgQG1ha2VDb2RlKHNldCArIEB0YWIgKyBcIndoaWxlIChcIiksIEBjb25kaXRpb24uY29tcGlsZVRvRnJhZ21lbnRzKG8sIExFVkVMX1BBUkVOKSxcbiAgICAgICAgICAgIEBtYWtlQ29kZShcIikge1wiKSwgYm9keSwgQG1ha2VDb2RlKFwifVwiKVxuICAgICAgICBpZiBAcmV0dXJuc1xuICAgICAgICAgICAgYW5zd2VyLnB1c2ggQG1ha2VDb2RlIFwiXFxuI3tAdGFifXJldHVybiAje3J2YXJ9O1wiXG4gICAgICAgIGFuc3dlclxuXG4jICAwMDAwMDAwICAgMDAwMDAwMDAgICBcbiMgMDAwICAgMDAwICAwMDAgICAwMDAgIFxuIyAwMDAgICAwMDAgIDAwMDAwMDAwICAgXG4jIDAwMCAgIDAwMCAgMDAwICAgICAgICBcbiMgIDAwMDAwMDAgICAwMDAgICAgICAgIFxuXG4jIFNpbXBsZSBBcml0aG1ldGljIGFuZCBsb2dpY2FsIG9wZXJhdGlvbnMuIFBlcmZvcm1zIHNvbWUgY29udmVyc2lvbiBmcm9tIGludG8gdGhlaXIgSmF2YVNjcmlwdCBlcXVpdmFsZW50cy5cblxuZXhwb3J0cy5PcCA9IGNsYXNzIE9wIGV4dGVuZHMgQmFzZVxuICAgIGNvbnN0cnVjdG9yOiAob3AsIGZpcnN0LCBzZWNvbmQsIGZsaXAgKSAtPlxuICAgICAgICByZXR1cm4gbmV3IEluIGZpcnN0LCBzZWNvbmQgaWYgb3AgaXMgJ2luJ1xuICAgICAgICBpZiBvcCBpcyAnZG8nXG4gICAgICAgICAgICByZXR1cm4gQGdlbmVyYXRlRG8gZmlyc3RcbiAgICAgICAgaWYgb3AgaXMgJ25ldydcbiAgICAgICAgICAgIHJldHVybiBmaXJzdC5uZXdJbnN0YW5jZSgpIGlmIGZpcnN0IGluc3RhbmNlb2YgQ2FsbCBhbmQgbm90IGZpcnN0LmRvIGFuZCBub3QgZmlyc3QuaXNOZXdcbiAgICAgICAgICAgIGZpcnN0ID0gbmV3IFBhcmVucyBmaXJzdCAgICAgaWYgZmlyc3QgaW5zdGFuY2VvZiBDb2RlIGFuZCBmaXJzdC5ib3VuZCBvciBmaXJzdC5kb1xuICAgICAgICBAb3BlcmF0b3IgPSBDT05WRVJTSU9OU1tvcF0gb3Igb3BcbiAgICAgICAgQGZpcnN0ICAgID0gZmlyc3RcbiAgICAgICAgQHNlY29uZCAgID0gc2Vjb25kXG4gICAgICAgIEBmbGlwICAgICA9ICEhZmxpcFxuICAgICAgICByZXR1cm4gdGhpc1xuXG4gICAgQ09OVkVSU0lPTlMgPSAjIFRoZSBtYXAgb2YgY29udmVyc2lvbnMgdG8gSmF2YVNjcmlwdCBzeW1ib2xzLlxuICAgICAgICAnPT0nOiAgICAgICAgJz09PSdcbiAgICAgICAgJyE9JzogICAgICAgICchPT0nXG4gICAgICAgICdvZic6ICAgICAgICAnaW4nXG4gICAgICAgICd5aWVsZGZyb20nOiAneWllbGQqJ1xuXG4gICAgSU5WRVJTSU9OUyA9ICMgVGhlIG1hcCBvZiBpbnZlcnRpYmxlIG9wZXJhdG9ycy5cbiAgICAgICAgJyE9PSc6ICc9PT0nXG4gICAgICAgICc9PT0nOiAnIT09J1xuXG4gICAgY2hpbGRyZW46IFsnZmlyc3QnLCAnc2Vjb25kJ11cblxuICAgIGlzTnVtYmVyOiAtPlxuICAgICAgICBAaXNVbmFyeSgpIGFuZCBAb3BlcmF0b3IgaW4gWycrJywgJy0nXSBhbmRcbiAgICAgICAgICAgIEBmaXJzdCBpbnN0YW5jZW9mIFZhbHVlIGFuZCBAZmlyc3QuaXNOdW1iZXIoKVxuXG4gICAgaXNZaWVsZDogLT5cbiAgICAgICAgQG9wZXJhdG9yIGluIFsneWllbGQnLCAneWllbGQqJ11cblxuICAgIGlzVW5hcnk6IC0+XG4gICAgICAgIG5vdCBAc2Vjb25kXG5cbiAgICBpc0NvbXBsZXg6IC0+XG4gICAgICAgIG5vdCBAaXNOdW1iZXIoKVxuXG4gICAgIyBBbSBJIGNhcGFibGUgb2YgW1B5dGhvbi1zdHlsZSBjb21wYXJpc29uIGNoYWluaW5nXShodHRwczovL2RvY3MucHl0aG9uLm9yZy8zL3JlZmVyZW5jZS9leHByZXNzaW9ucy5odG1sI25vdC1pbik/XG4gICAgXG4gICAgaXNDaGFpbmFibGU6IC0+XG4gICAgICAgIEBvcGVyYXRvciBpbiBbJzwnLCAnPicsICc+PScsICc8PScsICc9PT0nLCAnIT09J11cblxuICAgIGludmVydDogLT5cbiAgICAgICAgaWYgQGlzQ2hhaW5hYmxlKCkgYW5kIEBmaXJzdC5pc0NoYWluYWJsZSgpXG4gICAgICAgICAgICBhbGxJbnZlcnRhYmxlID0geWVzXG4gICAgICAgICAgICBjdXJyID0gdGhpc1xuICAgICAgICAgICAgd2hpbGUgY3VyciBhbmQgY3Vyci5vcGVyYXRvclxuICAgICAgICAgICAgICAgIGFsbEludmVydGFibGUgYW5kPSAoY3Vyci5vcGVyYXRvciBvZiBJTlZFUlNJT05TKVxuICAgICAgICAgICAgICAgIGN1cnIgPSBjdXJyLmZpcnN0XG4gICAgICAgICAgICByZXR1cm4gbmV3IFBhcmVucyh0aGlzKS5pbnZlcnQoKSB1bmxlc3MgYWxsSW52ZXJ0YWJsZVxuICAgICAgICAgICAgY3VyciA9IHRoaXNcbiAgICAgICAgICAgIHdoaWxlIGN1cnIgYW5kIGN1cnIub3BlcmF0b3JcbiAgICAgICAgICAgICAgICBjdXJyLmludmVydCA9ICFjdXJyLmludmVydFxuICAgICAgICAgICAgICAgIGN1cnIub3BlcmF0b3IgPSBJTlZFUlNJT05TW2N1cnIub3BlcmF0b3JdXG4gICAgICAgICAgICAgICAgY3VyciA9IGN1cnIuZmlyc3RcbiAgICAgICAgICAgIHRoaXNcbiAgICAgICAgZWxzZSBpZiBvcCA9IElOVkVSU0lPTlNbQG9wZXJhdG9yXVxuICAgICAgICAgICAgQG9wZXJhdG9yID0gb3BcbiAgICAgICAgICAgIGlmIEBmaXJzdC51bndyYXAoKSBpbnN0YW5jZW9mIE9wXG4gICAgICAgICAgICAgICAgQGZpcnN0LmludmVydCgpXG4gICAgICAgICAgICB0aGlzXG4gICAgICAgIGVsc2UgaWYgQHNlY29uZFxuICAgICAgICAgICAgbmV3IFBhcmVucyh0aGlzKS5pbnZlcnQoKVxuICAgICAgICBlbHNlIGlmIEBvcGVyYXRvciBpcyAnIScgYW5kIChmc3QgPSBAZmlyc3QudW53cmFwKCkpIGluc3RhbmNlb2YgT3AgYW5kXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZzdC5vcGVyYXRvciBpbiBbJyEnLCAnaW4nLCAnaW5zdGFuY2VvZiddXG4gICAgICAgICAgICBmc3RcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgbmV3IE9wICchJywgdGhpc1xuXG4gICAgdW5mb2xkU29hazogKG8pIC0+XG4gICAgICAgIEBvcGVyYXRvciBpbiBbJysrJywgJy0tJywgJ2RlbGV0ZSddIGFuZCB1bmZvbGRTb2FrIG8sIHRoaXMsICdmaXJzdCdcblxuICAgIGdlbmVyYXRlRG86IChleHApIC0+XG4gICAgICAgIHBhc3NlZFBhcmFtcyA9IFtdXG4gICAgICAgIGZ1bmMgPSBpZiBleHAgaW5zdGFuY2VvZiBBc3NpZ24gYW5kIChyZWYgPSBleHAudmFsdWUudW53cmFwKCkpIGluc3RhbmNlb2YgQ29kZVxuICAgICAgICAgICAgcmVmXG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGV4cFxuICAgICAgICBmb3IgcGFyYW0gaW4gZnVuYy5wYXJhbXMgb3IgW11cbiAgICAgICAgICAgIGlmIHBhcmFtLnZhbHVlXG4gICAgICAgICAgICAgICAgcGFzc2VkUGFyYW1zLnB1c2ggcGFyYW0udmFsdWVcbiAgICAgICAgICAgICAgICBkZWxldGUgcGFyYW0udmFsdWVcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBwYXNzZWRQYXJhbXMucHVzaCBwYXJhbVxuICAgICAgICBjYWxsID0gbmV3IENhbGwgZXhwLCBwYXNzZWRQYXJhbXNcbiAgICAgICAgY2FsbC5kbyA9IHllc1xuICAgICAgICBjYWxsXG5cbiAgICBjb21waWxlTm9kZTogKG8pIC0+XG4gICAgICAgIGlzQ2hhaW4gPSBAaXNDaGFpbmFibGUoKSBhbmQgQGZpcnN0LmlzQ2hhaW5hYmxlKClcbiAgICAgICAgIyBJbiBjaGFpbnMsIHRoZXJlJ3Mgbm8gbmVlZCB0byB3cmFwIGJhcmUgb2JqIGxpdGVyYWxzIGluIHBhcmVucyxcbiAgICAgICAgIyBhcyB0aGUgY2hhaW5lZCBleHByZXNzaW9uIGlzIHdyYXBwZWQuXG4gICAgICAgIEBmaXJzdC5mcm9udCA9IEBmcm9udCB1bmxlc3MgaXNDaGFpblxuICAgICAgICBpZiBAb3BlcmF0b3IgaXMgJ2RlbGV0ZScgYW5kIG8uc2NvcGUuY2hlY2soQGZpcnN0LnVud3JhcEFsbCgpLnZhbHVlKVxuICAgICAgICAgICAgQGVycm9yICdkZWxldGUgb3BlcmFuZCBtYXkgbm90IGJlIGFyZ3VtZW50IG9yIHZhcidcbiAgICAgICAgaWYgQG9wZXJhdG9yIGluIFsnLS0nLCAnKysnXVxuICAgICAgICAgICAgbWVzc2FnZSA9IGlzVW5hc3NpZ25hYmxlIEBmaXJzdC51bndyYXBBbGwoKS52YWx1ZVxuICAgICAgICAgICAgQGZpcnN0LmVycm9yIG1lc3NhZ2UgaWYgbWVzc2FnZVxuICAgICAgICByZXR1cm4gQGNvbXBpbGVZaWVsZCBvIGlmIEBpc1lpZWxkKClcbiAgICAgICAgcmV0dXJuIEBjb21waWxlVW5hcnkgbyBpZiBAaXNVbmFyeSgpXG4gICAgICAgIHJldHVybiBAY29tcGlsZUNoYWluIG8gaWYgaXNDaGFpblxuICAgICAgICBzd2l0Y2ggQG9wZXJhdG9yXG4gICAgICAgICAgICB3aGVuICc/JyAgICB0aGVuIEBjb21waWxlRXhpc3RlbmNlIG9cbiAgICAgICAgICAgIHdoZW4gJyoqJyB0aGVuIEBjb21waWxlUG93ZXIgb1xuICAgICAgICAgICAgd2hlbiAnLy8nIHRoZW4gQGNvbXBpbGVGbG9vckRpdmlzaW9uIG9cbiAgICAgICAgICAgIHdoZW4gJyUlJyB0aGVuIEBjb21waWxlTW9kdWxvIG9cbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBsaHMgPSBAZmlyc3QuY29tcGlsZVRvRnJhZ21lbnRzIG8sIExFVkVMX09QXG4gICAgICAgICAgICAgICAgcmhzID0gQHNlY29uZC5jb21waWxlVG9GcmFnbWVudHMgbywgTEVWRUxfT1BcbiAgICAgICAgICAgICAgICBhbnN3ZXIgPSBbXS5jb25jYXQgbGhzLCBAbWFrZUNvZGUoXCIgI3tAb3BlcmF0b3J9IFwiKSwgcmhzXG4gICAgICAgICAgICAgICAgaWYgby5sZXZlbCA8PSBMRVZFTF9PUCB0aGVuIGFuc3dlciBlbHNlIEB3cmFwSW5CcmFjZXMgYW5zd2VyXG5cbiAgICAjIE1pbWljIFB5dGhvbidzIGNoYWluZWQgY29tcGFyaXNvbnMgd2hlbiBtdWx0aXBsZSBjb21wYXJpc29uIG9wZXJhdG9ycyBhcmVcbiAgICAjIHVzZWQgc2VxdWVudGlhbGx5LiBGb3IgZXhhbXBsZTpcbiAgICAjXG4gICAgIyAgICAgICAgICAgYmluL2tvZmZlZSAtZSAnY29uc29sZS5sb2cgNTAgPCA2NSA+IDEwJ1xuICAgICMgICAgICAgICAgIHRydWVcbiAgICBcbiAgICBjb21waWxlQ2hhaW46IChvKSAtPlxuICAgICAgICBbQGZpcnN0LnNlY29uZCwgc2hhcmVkXSA9IEBmaXJzdC5zZWNvbmQuY2FjaGUgb1xuICAgICAgICBmc3QgPSBAZmlyc3QuY29tcGlsZVRvRnJhZ21lbnRzIG8sIExFVkVMX09QXG4gICAgICAgIGZyYWdtZW50cyA9IGZzdC5jb25jYXQgQG1ha2VDb2RlKFwiICN7aWYgQGludmVydCB0aGVuICcmJicgZWxzZSAnfHwnfSBcIiksXG4gICAgICAgICAgICAoc2hhcmVkLmNvbXBpbGVUb0ZyYWdtZW50cyBvKSwgQG1ha2VDb2RlKFwiICN7QG9wZXJhdG9yfSBcIiksIChAc2Vjb25kLmNvbXBpbGVUb0ZyYWdtZW50cyBvLCBMRVZFTF9PUClcbiAgICAgICAgQHdyYXBJbkJyYWNlcyBmcmFnbWVudHNcblxuICAgICMgS2VlcCByZWZlcmVuY2UgdG8gdGhlIGxlZnQgZXhwcmVzc2lvbiwgdW5sZXNzIHRoaXMgYW4gZXhpc3RlbnRpYWwgYXNzaWdubWVudFxuICAgIGNvbXBpbGVFeGlzdGVuY2U6IChvKSAtPlxuICAgICAgICBpZiBAZmlyc3QuaXNDb21wbGV4KClcbiAgICAgICAgICAgIHJlZiA9IG5ldyBJZGVudGlmaWVyTGl0ZXJhbCBvLnNjb3BlLmZyZWVWYXJpYWJsZSAncmVmJ1xuICAgICAgICAgICAgZnN0ID0gbmV3IFBhcmVucyBuZXcgQXNzaWduIHJlZiwgQGZpcnN0XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGZzdCA9IEBmaXJzdFxuICAgICAgICAgICAgcmVmID0gZnN0XG4gICAgICAgIG5ldyBJZihuZXcgRXhpc3RlbmNlKGZzdCksIHJlZiwgdHlwZTogJ2lmJykuYWRkRWxzZShAc2Vjb25kKS5jb21waWxlVG9GcmFnbWVudHMgb1xuXG4gICAgIyBDb21waWxlIGEgdW5hcnkgKipPcCoqLlxuICAgIGNvbXBpbGVVbmFyeTogKG8pIC0+XG4gICAgICAgIHBhcnRzID0gW11cbiAgICAgICAgb3AgPSBAb3BlcmF0b3JcbiAgICAgICAgcGFydHMucHVzaCBbQG1ha2VDb2RlIG9wXVxuICAgICAgICBpZiBvcCBpcyAnIScgYW5kIEBmaXJzdCBpbnN0YW5jZW9mIEV4aXN0ZW5jZVxuICAgICAgICAgICAgQGZpcnN0Lm5lZ2F0ZWQgPSBub3QgQGZpcnN0Lm5lZ2F0ZWRcbiAgICAgICAgICAgIHJldHVybiBAZmlyc3QuY29tcGlsZVRvRnJhZ21lbnRzIG9cbiAgICAgICAgaWYgby5sZXZlbCA+PSBMRVZFTF9BQ0NFU1NcbiAgICAgICAgICAgIHJldHVybiAobmV3IFBhcmVucyB0aGlzKS5jb21waWxlVG9GcmFnbWVudHMgb1xuICAgICAgICBwbHVzTWludXMgPSBvcCBpbiBbJysnLCAnLSddXG4gICAgICAgIHBhcnRzLnB1c2ggW0BtYWtlQ29kZSgnICcpXSBpZiBvcCBpbiBbJ25ldycsICd0eXBlb2YnLCAnZGVsZXRlJ10gb3JcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGx1c01pbnVzIGFuZCBAZmlyc3QgaW5zdGFuY2VvZiBPcCBhbmQgQGZpcnN0Lm9wZXJhdG9yIGlzIG9wXG4gICAgICAgIGlmIChwbHVzTWludXMgYW5kIEBmaXJzdCBpbnN0YW5jZW9mIE9wKSBvciAob3AgaXMgJ25ldycgYW5kIEBmaXJzdC5pc1N0YXRlbWVudCBvKVxuICAgICAgICAgICAgQGZpcnN0ID0gbmV3IFBhcmVucyBAZmlyc3RcbiAgICAgICAgcGFydHMucHVzaCBAZmlyc3QuY29tcGlsZVRvRnJhZ21lbnRzIG8sIExFVkVMX09QXG4gICAgICAgIHBhcnRzLnJldmVyc2UoKSBpZiBAZmxpcFxuICAgICAgICBAam9pbkZyYWdtZW50QXJyYXlzIHBhcnRzLCAnJ1xuXG4gICAgY29tcGlsZVlpZWxkOiAobykgLT5cbiAgICAgICAgcGFydHMgPSBbXVxuICAgICAgICBvcCA9IEBvcGVyYXRvclxuICAgICAgICB1bmxlc3Mgby5zY29wZS5wYXJlbnQ/XG4gICAgICAgICAgICBAZXJyb3IgJ3lpZWxkIGNhbiBvbmx5IG9jY3VyIGluc2lkZSBmdW5jdGlvbnMnXG4gICAgICAgIGlmICdleHByZXNzaW9uJyBpbiBPYmplY3Qua2V5cyhAZmlyc3QpIGFuZCBub3QgKEBmaXJzdCBpbnN0YW5jZW9mIFRocm93KVxuICAgICAgICAgICAgcGFydHMucHVzaCBAZmlyc3QuZXhwcmVzc2lvbi5jb21waWxlVG9GcmFnbWVudHMgbywgTEVWRUxfT1AgaWYgQGZpcnN0LmV4cHJlc3Npb24/XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHBhcnRzLnB1c2ggW0BtYWtlQ29kZSBcIihcIl0gaWYgby5sZXZlbCA+PSBMRVZFTF9QQVJFTlxuICAgICAgICAgICAgcGFydHMucHVzaCBbQG1ha2VDb2RlIG9wXVxuICAgICAgICAgICAgcGFydHMucHVzaCBbQG1ha2VDb2RlIFwiIFwiXSBpZiBAZmlyc3QuYmFzZT8udmFsdWUgIT0gJydcbiAgICAgICAgICAgIHBhcnRzLnB1c2ggQGZpcnN0LmNvbXBpbGVUb0ZyYWdtZW50cyBvLCBMRVZFTF9PUFxuICAgICAgICAgICAgcGFydHMucHVzaCBbQG1ha2VDb2RlIFwiKVwiXSBpZiBvLmxldmVsID49IExFVkVMX1BBUkVOXG4gICAgICAgIEBqb2luRnJhZ21lbnRBcnJheXMgcGFydHMsICcnXG5cbiAgICBjb21waWxlUG93ZXI6IChvKSAtPlxuICAgICAgICAjIE1ha2UgYSBNYXRoLnBvdyBjYWxsXG4gICAgICAgIHBvdyA9IG5ldyBWYWx1ZSBuZXcgSWRlbnRpZmllckxpdGVyYWwoJ01hdGgnKSwgW25ldyBBY2Nlc3MgbmV3IFByb3BlcnR5TmFtZSAncG93J11cbiAgICAgICAgbmV3IENhbGwocG93LCBbQGZpcnN0LCBAc2Vjb25kXSkuY29tcGlsZVRvRnJhZ21lbnRzIG9cblxuICAgIGNvbXBpbGVGbG9vckRpdmlzaW9uOiAobykgLT5cbiAgICAgICAgZmxvb3IgPSBuZXcgVmFsdWUgbmV3IElkZW50aWZpZXJMaXRlcmFsKCdNYXRoJyksIFtuZXcgQWNjZXNzIG5ldyBQcm9wZXJ0eU5hbWUgJ2Zsb29yJ11cbiAgICAgICAgc2Vjb25kID0gaWYgQHNlY29uZC5pc0NvbXBsZXgoKSB0aGVuIG5ldyBQYXJlbnMgQHNlY29uZCBlbHNlIEBzZWNvbmRcbiAgICAgICAgZGl2ID0gbmV3IE9wICcvJywgQGZpcnN0LCBzZWNvbmRcbiAgICAgICAgbmV3IENhbGwoZmxvb3IsIFtkaXZdKS5jb21waWxlVG9GcmFnbWVudHMgb1xuXG4gICAgY29tcGlsZU1vZHVsbzogKG8pIC0+XG4gICAgICAgIG1vZCA9IG5ldyBWYWx1ZSBuZXcgTGl0ZXJhbCB1dGlsaXR5ICdtb2R1bG8nLCBvXG4gICAgICAgIG5ldyBDYWxsKG1vZCwgW0BmaXJzdCwgQHNlY29uZF0pLmNvbXBpbGVUb0ZyYWdtZW50cyBvXG5cbiAgICB0b1N0cmluZzogKGlkdCkgLT5cbiAgICAgICAgc3VwZXIgaWR0LCBAY29uc3RydWN0b3IubmFtZSArICcgJyArIEBvcGVyYXRvclxuXG4jIDAwMCAgMDAwICAgMDAwICBcbiMgMDAwICAwMDAwICAwMDAgIFxuIyAwMDAgIDAwMCAwIDAwMCAgXG4jIDAwMCAgMDAwICAwMDAwICBcbiMgMDAwICAwMDAgICAwMDAgIFxuXG5leHBvcnRzLkluID0gY2xhc3MgSW4gZXh0ZW5kcyBCYXNlXG4gICAgXG4gICAgY29uc3RydWN0b3I6IChAb2JqZWN0LCBAYXJyYXkpIC0+XG5cbiAgICBjaGlsZHJlbjogWydvYmplY3QnLCAnYXJyYXknXVxuXG4gICAgaW52ZXJ0OiBORUdBVEVcblxuICAgIGNvbXBpbGVOb2RlOiAobykgLT5cbiAgICAgICAgaWYgQGFycmF5IGluc3RhbmNlb2YgVmFsdWUgYW5kIEBhcnJheS5pc0FycmF5KCkgYW5kIEBhcnJheS5iYXNlLm9iamVjdHMubGVuZ3RoXG4gICAgICAgICAgICBmb3Igb2JqIGluIEBhcnJheS5iYXNlLm9iamVjdHMgd2hlbiBvYmogaW5zdGFuY2VvZiBTcGxhdFxuICAgICAgICAgICAgICAgIGhhc1NwbGF0ID0geWVzXG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICMgYGNvbXBpbGVPclRlc3RgIG9ubHkgaWYgd2UgaGF2ZSBhbiBhcnJheSBsaXRlcmFsIHdpdGggbm8gc3BsYXRzXG4gICAgICAgICAgICByZXR1cm4gQGNvbXBpbGVPclRlc3QgbyB1bmxlc3MgaGFzU3BsYXRcbiAgICAgICAgQGNvbXBpbGVMb29wVGVzdCBvXG5cbiAgICBjb21waWxlT3JUZXN0OiAobykgLT5cbiAgICAgICAgW3N1YiwgcmVmXSA9IEBvYmplY3QuY2FjaGUgbywgTEVWRUxfT1BcbiAgICAgICAgW2NtcCwgY25qXSA9IGlmIEBuZWdhdGVkIHRoZW4gWycgIT09ICcsICcgJiYgJ10gZWxzZSBbJyA9PT0gJywgJyB8fCAnXVxuICAgICAgICB0ZXN0cyA9IFtdXG4gICAgICAgIGZvciBpdGVtLCBpIGluIEBhcnJheS5iYXNlLm9iamVjdHNcbiAgICAgICAgICAgIGlmIGkgdGhlbiB0ZXN0cy5wdXNoIEBtYWtlQ29kZSBjbmpcbiAgICAgICAgICAgIHRlc3RzID0gdGVzdHMuY29uY2F0IChpZiBpIHRoZW4gcmVmIGVsc2Ugc3ViKSwgQG1ha2VDb2RlKGNtcCksIGl0ZW0uY29tcGlsZVRvRnJhZ21lbnRzKG8sIExFVkVMX0FDQ0VTUylcbiAgICAgICAgaWYgby5sZXZlbCA8IExFVkVMX09QIHRoZW4gdGVzdHMgZWxzZSBAd3JhcEluQnJhY2VzIHRlc3RzXG5cbiAgICBjb21waWxlTG9vcFRlc3Q6IChvKSAtPlxuICAgICAgICBbc3ViLCByZWZdID0gQG9iamVjdC5jYWNoZSBvLCBMRVZFTF9MSVNUXG4gICAgICAgIGZyYWdtZW50cyA9IFtdLmNvbmNhdCBAbWFrZUNvZGUodXRpbGl0eSgnaW5kZXhPZicsIG8pICsgXCIuY2FsbChcIiksIEBhcnJheS5jb21waWxlVG9GcmFnbWVudHMobywgTEVWRUxfTElTVCksXG4gICAgICAgICAgICBAbWFrZUNvZGUoXCIsIFwiKSwgcmVmLCBAbWFrZUNvZGUoXCIpIFwiICsgaWYgQG5lZ2F0ZWQgdGhlbiAnPCAwJyBlbHNlICc+PSAwJylcbiAgICAgICAgcmV0dXJuIGZyYWdtZW50cyBpZiBmcmFnbWVudHNUb1RleHQoc3ViKSBpcyBmcmFnbWVudHNUb1RleHQocmVmKVxuICAgICAgICBmcmFnbWVudHMgPSBzdWIuY29uY2F0IEBtYWtlQ29kZSgnLCAnKSwgZnJhZ21lbnRzXG4gICAgICAgIGlmIG8ubGV2ZWwgPCBMRVZFTF9MSVNUIHRoZW4gZnJhZ21lbnRzIGVsc2UgQHdyYXBJbkJyYWNlcyBmcmFnbWVudHNcblxuICAgIHRvU3RyaW5nOiAoaWR0KSAtPlxuICAgICAgICBzdXBlciBpZHQsIEBjb25zdHJ1Y3Rvci5uYW1lICsgaWYgQG5lZ2F0ZWQgdGhlbiAnIScgZWxzZSAnJ1xuXG4jIDAwMDAwMDAwMCAgMDAwMDAwMDAgICAwMDAgICAwMDAgIFxuIyAgICAwMDAgICAgIDAwMCAgIDAwMCAgIDAwMCAwMDAgICBcbiMgICAgMDAwICAgICAwMDAwMDAwICAgICAgMDAwMDAgICAgXG4jICAgIDAwMCAgICAgMDAwICAgMDAwICAgICAwMDAgICAgIFxuIyAgICAwMDAgICAgIDAwMCAgIDAwMCAgICAgMDAwICAgICBcblxuIyBBIGNsYXNzaWMgKnRyeS9jYXRjaC9maW5hbGx5KiBibG9jay5cblxuZXhwb3J0cy5UcnkgPSBjbGFzcyBUcnkgZXh0ZW5kcyBCYXNlXG4gICAgXG4gICAgY29uc3RydWN0b3I6IChAYXR0ZW1wdCwgQGVycm9yVmFyaWFibGUsIEByZWNvdmVyeSwgQGVuc3VyZSkgLT5cblxuICAgIGNoaWxkcmVuOiBbJ2F0dGVtcHQnLCAncmVjb3ZlcnknLCAnZW5zdXJlJ11cblxuICAgIGlzU3RhdGVtZW50OiBZRVNcblxuICAgIGp1bXBzOiAobykgLT4gQGF0dGVtcHQuanVtcHMobykgb3IgQHJlY292ZXJ5Py5qdW1wcyhvKVxuXG4gICAgbWFrZVJldHVybjogKHJlcykgLT5cbiAgICAgICAgQGF0dGVtcHQgID0gQGF0dGVtcHQgLm1ha2VSZXR1cm4gcmVzIGlmIEBhdHRlbXB0XG4gICAgICAgIEByZWNvdmVyeSA9IEByZWNvdmVyeS5tYWtlUmV0dXJuIHJlcyBpZiBAcmVjb3ZlcnlcbiAgICAgICAgdGhpc1xuXG4gICAgIyBDb21waWxhdGlvbiBpcyBtb3JlIG9yIGxlc3MgYXMgeW91IHdvdWxkIGV4cGVjdCAtLSB0aGUgKmZpbmFsbHkqIGNsYXVzZVxuICAgICMgaXMgb3B0aW9uYWwsIHRoZSAqY2F0Y2gqIGlzIG5vdC5cbiAgICBjb21waWxlTm9kZTogKG8pIC0+XG4gICAgICAgIG8uaW5kZW50ICs9IFRBQlxuICAgICAgICB0cnlQYXJ0ICAgPSBAYXR0ZW1wdC5jb21waWxlVG9GcmFnbWVudHMgbywgTEVWRUxfVE9QXG5cbiAgICAgICAgY2F0Y2hQYXJ0ID0gaWYgQHJlY292ZXJ5XG4gICAgICAgICAgICBnZW5lcmF0ZWRFcnJvclZhcmlhYmxlTmFtZSA9IG8uc2NvcGUuZnJlZVZhcmlhYmxlICdlcnJvcicsIHJlc2VydmU6IG5vXG4gICAgICAgICAgICBwbGFjZWhvbGRlciA9IG5ldyBJZGVudGlmaWVyTGl0ZXJhbCBnZW5lcmF0ZWRFcnJvclZhcmlhYmxlTmFtZVxuICAgICAgICAgICAgaWYgQGVycm9yVmFyaWFibGVcbiAgICAgICAgICAgICAgICBtZXNzYWdlID0gaXNVbmFzc2lnbmFibGUgQGVycm9yVmFyaWFibGUudW53cmFwQWxsKCkudmFsdWVcbiAgICAgICAgICAgICAgICBAZXJyb3JWYXJpYWJsZS5lcnJvciBtZXNzYWdlIGlmIG1lc3NhZ2VcbiAgICAgICAgICAgICAgICBAcmVjb3ZlcnkudW5zaGlmdCBuZXcgQXNzaWduIEBlcnJvclZhcmlhYmxlLCBwbGFjZWhvbGRlclxuICAgICAgICAgICAgW10uY29uY2F0IEBtYWtlQ29kZShcIiBjYXRjaCAoXCIpLCBwbGFjZWhvbGRlci5jb21waWxlVG9GcmFnbWVudHMobyksIEBtYWtlQ29kZShcIikge1xcblwiKSxcbiAgICAgICAgICAgICAgICBAcmVjb3ZlcnkuY29tcGlsZVRvRnJhZ21lbnRzKG8sIExFVkVMX1RPUCksIEBtYWtlQ29kZShcIlxcbiN7QHRhYn19XCIpXG4gICAgICAgIGVsc2UgdW5sZXNzIEBlbnN1cmUgb3IgQHJlY292ZXJ5XG4gICAgICAgICAgICBnZW5lcmF0ZWRFcnJvclZhcmlhYmxlTmFtZSA9IG8uc2NvcGUuZnJlZVZhcmlhYmxlICdlcnJvcicsIHJlc2VydmU6IG5vXG4gICAgICAgICAgICBbQG1ha2VDb2RlKFwiIGNhdGNoICgje2dlbmVyYXRlZEVycm9yVmFyaWFibGVOYW1lfSkge31cIildXG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIFtdXG5cbiAgICAgICAgZW5zdXJlUGFydCA9IGlmIEBlbnN1cmUgdGhlbiAoW10uY29uY2F0IEBtYWtlQ29kZShcIiBmaW5hbGx5IHtcXG5cIiksIEBlbnN1cmUuY29tcGlsZVRvRnJhZ21lbnRzKG8sIExFVkVMX1RPUCksXG4gICAgICAgICAgICBAbWFrZUNvZGUoXCJcXG4je0B0YWJ9fVwiKSkgZWxzZSBbXVxuXG4gICAgICAgIFtdLmNvbmNhdCBAbWFrZUNvZGUoXCIje0B0YWJ9dHJ5IHtcXG5cIiksXG4gICAgICAgICAgICB0cnlQYXJ0LFxuICAgICAgICAgICAgQG1ha2VDb2RlKFwiXFxuI3tAdGFifX1cIiksIGNhdGNoUGFydCwgZW5zdXJlUGFydFxuXG4jIDAwMDAwMDAwMCAgMDAwICAgMDAwICAwMDAwMDAwMCAgICAwMDAwMDAwICAgMDAwICAgMDAwICBcbiMgICAgMDAwICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgMCAwMDAgIFxuIyAgICAwMDAgICAgIDAwMDAwMDAwMCAgMDAwMDAwMCAgICAwMDAgICAwMDAgIDAwMDAwMDAwMCAgXG4jICAgIDAwMCAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICBcbiMgICAgMDAwICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgIDAwMDAwMDAgICAwMCAgICAgMDAgIFxuXG4jIFNpbXBsZSBub2RlIHRvIHRocm93IGFuIGV4Y2VwdGlvbi5cblxuZXhwb3J0cy5UaHJvdyA9IGNsYXNzIFRocm93IGV4dGVuZHMgQmFzZVxuICAgIFxuICAgIGNvbnN0cnVjdG9yOiAoQGV4cHJlc3Npb24pIC0+XG5cbiAgICBjaGlsZHJlbjogWydleHByZXNzaW9uJ11cblxuICAgIGlzU3RhdGVtZW50OiBZRVNcbiAgICBqdW1wczogICAgICAgTk9cblxuICAgICMgQSAqKlRocm93KiogaXMgYWxyZWFkeSBhIHJldHVybiwgb2Ygc29ydHMuLi5cbiAgICBtYWtlUmV0dXJuOiBUSElTXG5cbiAgICBjb21waWxlTm9kZTogKG8pIC0+XG4gICAgICAgIFtdLmNvbmNhdCBAbWFrZUNvZGUoQHRhYiArIFwidGhyb3cgXCIpLCBAZXhwcmVzc2lvbi5jb21waWxlVG9GcmFnbWVudHMobyksIEBtYWtlQ29kZShcIjtcIilcblxuIyAwMDAwMDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAwMDAwICAwMDAwMDAwMDAgIDAwMDAwMDAwICAwMDAgICAwMDAgICAwMDAwMDAwICAwMDAwMDAwMCAgXG4jIDAwMCAgICAgICAgMDAwIDAwMCAgIDAwMCAgMDAwICAgICAgICAgIDAwMCAgICAgMDAwICAgICAgIDAwMDAgIDAwMCAgMDAwICAgICAgIDAwMCAgICAgICBcbiMgMDAwMDAwMCAgICAgMDAwMDAgICAgMDAwICAwMDAwMDAwICAgICAgMDAwICAgICAwMDAwMDAwICAgMDAwIDAgMDAwICAwMDAgICAgICAgMDAwMDAwMCAgIFxuIyAwMDAgICAgICAgIDAwMCAwMDAgICAwMDAgICAgICAgMDAwICAgICAwMDAgICAgIDAwMCAgICAgICAwMDAgIDAwMDAgIDAwMCAgICAgICAwMDAgICAgICAgXG4jIDAwMDAwMDAwICAwMDAgICAwMDAgIDAwMCAgMDAwMDAwMCAgICAgIDAwMCAgICAgMDAwMDAwMDAgIDAwMCAgIDAwMCAgIDAwMDAwMDAgIDAwMDAwMDAwICBcblxuIyBDaGVja3MgYSB2YXJpYWJsZSBmb3IgZXhpc3RlbmNlIC0tIG5vdCAqbnVsbCogYW5kIG5vdCAqdW5kZWZpbmVkKi4gVGhpcyBpc1xuIyBzaW1pbGFyIHRvIGAubmlsP2AgaW4gUnVieSwgYW5kIGF2b2lkcyBoYXZpbmcgdG8gY29uc3VsdCBhIEphdmFTY3JpcHQgdHJ1dGhcbiMgdGFibGUuXG5cbmV4cG9ydHMuRXhpc3RlbmNlID0gY2xhc3MgRXhpc3RlbmNlIGV4dGVuZHMgQmFzZVxuICAgIFxuICAgIGNvbnN0cnVjdG9yOiAoQGV4cHJlc3Npb24pIC0+XG5cbiAgICBjaGlsZHJlbjogWydleHByZXNzaW9uJ11cblxuICAgIGludmVydDogTkVHQVRFXG5cbiAgICBjb21waWxlTm9kZTogKG8pIC0+XG4gICAgICAgIEBleHByZXNzaW9uLmZyb250ID0gQGZyb250XG4gICAgICAgIGNvZGUgPSBAZXhwcmVzc2lvbi5jb21waWxlIG8sIExFVkVMX09QXG4gICAgICAgIGlmIEBleHByZXNzaW9uLnVud3JhcCgpIGluc3RhbmNlb2YgSWRlbnRpZmllckxpdGVyYWwgYW5kIG5vdCBvLnNjb3BlLmNoZWNrIGNvZGVcbiAgICAgICAgICAgIFtjbXAsIGNual0gPSBpZiBAbmVnYXRlZCB0aGVuIFsnPT09JywgJ3x8J10gZWxzZSBbJyE9PScsICcmJiddXG4gICAgICAgICAgICBjb2RlID0gXCJ0eXBlb2YgI3tjb2RlfSAje2NtcH0gXFxcInVuZGVmaW5lZFxcXCIgI3tjbmp9ICN7Y29kZX0gI3tjbXB9IG51bGxcIlxuICAgICAgICBlbHNlXG4gICAgICAgICAgICAjIGRvIG5vdCB1c2Ugc3RyaWN0IGVxdWFsaXR5IGhlcmU7IGl0IHdpbGwgYnJlYWsgZXhpc3RpbmcgY29kZVxuICAgICAgICAgICAgY29kZSA9IFwiI3tjb2RlfSAje2lmIEBuZWdhdGVkIHRoZW4gJz09JyBlbHNlICchPSd9IG51bGxcIlxuICAgICAgICBbQG1ha2VDb2RlKGlmIG8ubGV2ZWwgPD0gTEVWRUxfQ09ORCB0aGVuIGNvZGUgZWxzZSBcIigje2NvZGV9KVwiKV1cblxuIyAwMDAwMDAwMCAgICAwMDAwMDAwICAgMDAwMDAwMDAgICAwMDAwMDAwMCAgMDAwICAgMDAwICAgMDAwMDAwMCAgXG4jIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAwICAwMDAgIDAwMCAgICAgICBcbiMgMDAwMDAwMDAgICAwMDAwMDAwMDAgIDAwMDAwMDAgICAgMDAwMDAwMCAgIDAwMCAwIDAwMCAgMDAwMDAwMCAgIFxuIyAwMDAgICAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAgICAgMDAwICAwMDAwICAgICAgIDAwMCAgXG4jIDAwMCAgICAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMDAwMDAwICAwMDAgICAwMDAgIDAwMDAwMDAgICBcblxuIyBBbiBleHRyYSBzZXQgb2YgcGFyZW50aGVzZXMsIHNwZWNpZmllZCBleHBsaWNpdGx5IGluIHRoZSBzb3VyY2UuIEF0IG9uZSB0aW1lXG4jIHdlIHRyaWVkIHRvIGNsZWFuIHVwIHRoZSByZXN1bHRzIGJ5IGRldGVjdGluZyBhbmQgcmVtb3ZpbmcgcmVkdW5kYW50XG4jIHBhcmVudGhlc2VzLCBidXQgbm8gbG9uZ2VyIC0tIHlvdSBjYW4gcHV0IGluIGFzIG1hbnkgYXMgeW91IHBsZWFzZS5cbiNcbiMgUGFyZW50aGVzZXMgYXJlIGEgZ29vZCB3YXkgdG8gZm9yY2UgYW55IHN0YXRlbWVudCB0byBiZWNvbWUgYW4gZXhwcmVzc2lvbi5cblxuZXhwb3J0cy5QYXJlbnMgPSBjbGFzcyBQYXJlbnMgZXh0ZW5kcyBCYXNlXG4gICAgXG4gICAgY29uc3RydWN0b3I6IChAYm9keSkgLT5cblxuICAgIGNoaWxkcmVuOiBbJ2JvZHknXVxuXG4gICAgdW53cmFwOiAgICAtPiBAYm9keVxuICAgIGlzQ29tcGxleDogLT4gQGJvZHkuaXNDb21wbGV4KClcblxuICAgIGNvbXBpbGVOb2RlOiAobykgLT5cbiAgICAgICAgZXhwciA9IEBib2R5LnVud3JhcCgpXG4gICAgICAgIGlmIGV4cHIgaW5zdGFuY2VvZiBWYWx1ZSBhbmQgZXhwci5pc0F0b21pYygpXG4gICAgICAgICAgICBleHByLmZyb250ID0gQGZyb250XG4gICAgICAgICAgICByZXR1cm4gZXhwci5jb21waWxlVG9GcmFnbWVudHMgb1xuICAgICAgICBmcmFnbWVudHMgPSBleHByLmNvbXBpbGVUb0ZyYWdtZW50cyBvLCBMRVZFTF9QQVJFTlxuICAgICAgICBiYXJlID0gby5sZXZlbCA8IExFVkVMX09QIGFuZCAoZXhwciBpbnN0YW5jZW9mIE9wIG9yIGV4cHIgaW5zdGFuY2VvZiBDYWxsIG9yXG4gICAgICAgICAgICAoZXhwciBpbnN0YW5jZW9mIEZvciBhbmQgZXhwci5yZXR1cm5zKSkgYW5kIChvLmxldmVsIDwgTEVWRUxfQ09ORCBvclxuICAgICAgICAgICAgICAgIGZyYWdtZW50cy5sZW5ndGggPD0gMylcbiAgICAgICAgaWYgYmFyZSB0aGVuIGZyYWdtZW50cyBlbHNlIEB3cmFwSW5CcmFjZXMgZnJhZ21lbnRzXG5cbiMgMDAwICAwMDAgICAwMDAgIDAwMDAwMDAwMCAgMDAwMDAwMDAgIDAwMDAwMDAwICAgMDAwMDAwMDAgICAgMDAwMDAwMCAgIDAwMCAgICAgICAwMDAwMDAwICAgMDAwMDAwMDAwICAwMDAgICAwMDAwMDAwICAgMDAwICAgMDAwICAgMDAwMDAwMCAgXG4jIDAwMCAgMDAwMCAgMDAwICAgICAwMDAgICAgIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAgICAwMDAgICAwMDAgICAgIDAwMCAgICAgMDAwICAwMDAgICAwMDAgIDAwMDAgIDAwMCAgMDAwICAgICAgIFxuIyAwMDAgIDAwMCAwIDAwMCAgICAgMDAwICAgICAwMDAwMDAwICAgMDAwMDAwMCAgICAwMDAwMDAwMCAgIDAwMCAgIDAwMCAgMDAwICAgICAgMDAwMDAwMDAwICAgICAwMDAgICAgIDAwMCAgMDAwICAgMDAwICAwMDAgMCAwMDAgIDAwMDAwMDAgICBcbiMgMDAwICAwMDAgIDAwMDAgICAgIDAwMCAgICAgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgICAgICAwMDAgICAwMDAgIDAwMCAgICAgIDAwMCAgIDAwMCAgICAgMDAwICAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAwMDAwICAgICAgIDAwMCAgXG4jIDAwMCAgMDAwICAgMDAwICAgICAwMDAgICAgIDAwMDAwMDAwICAwMDAgICAwMDAgIDAwMCAgICAgICAgIDAwMDAwMDAgICAwMDAwMDAwICAwMDAgICAwMDAgICAgIDAwMCAgICAgMDAwICAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgIFxuXG4jIFN0cmluZ3Mgd2l0aCBpbnRlcnBvbGF0aW9ucyBhcmUgaW4gZmFjdCBqdXN0IGEgdmFyaWF0aW9uIG9mIGBQYXJlbnNgIHdpdGggc3RyaW5nIGNvbmNhdGVuYXRpb24gaW5zaWRlLlxuXG5leHBvcnRzLlN0cmluZ1dpdGhJbnRlcnBvbGF0aW9ucyA9IGNsYXNzIFN0cmluZ1dpdGhJbnRlcnBvbGF0aW9ucyBleHRlbmRzIFBhcmVuc1xuICAgIFxuICAgIGNvbXBpbGVOb2RlOiAobykgLT5cbiAgICAgICAgXG4gICAgICAgICMgVGhpcyBtZXRob2QgcHJvZHVjZXMgYW4gaW50ZXJwb2xhdGVkIHN0cmluZyB1c2luZyB0aGUgbmV3IEVTMjAxNSBzeW50YXgsXG4gICAgICAgICMgd2hpY2ggaXMgb3B0LWluIGJ5IHVzaW5nIHRhZ2dlZCB0ZW1wbGF0ZSBsaXRlcmFscy4gXG4gICAgICAgICMgSWYgdGhpcyBTdHJpbmdXaXRoSW50ZXJwb2xhdGlvbnMgaXNu4oCZdCBpbnNpZGUgYSB0YWdnZWQgdGVtcGxhdGUgbGl0ZXJhbCwgZmFsbCBiYWNrIHRvIHRoZSBLb2ZmZWUgMS54IG91dHB1dC5cbiAgICAgICAgXG4gICAgICAgIHVubGVzcyBvLmluVGFnZ2VkVGVtcGxhdGVDYWxsXG4gICAgICAgICAgICByZXR1cm4gc3VwZXJcblxuICAgICAgICBleHByID0gQGJvZHkudW53cmFwKCkgIyBBc3N1bXB0aW9uOiBleHByIGlzIFZhbHVlPlN0cmluZ0xpdGVyYWwgb3IgT3BcblxuICAgICAgICBlbGVtZW50cyA9IFtdXG4gICAgICAgIGV4cHIudHJhdmVyc2VDaGlsZHJlbiBubywgKG5vZGUpIC0+XG4gICAgICAgICAgICBpZiBub2RlIGluc3RhbmNlb2YgU3RyaW5nTGl0ZXJhbFxuICAgICAgICAgICAgICAgIGVsZW1lbnRzLnB1c2ggbm9kZVxuICAgICAgICAgICAgICAgIHJldHVybiB5ZXNcbiAgICAgICAgICAgIGVsc2UgaWYgbm9kZSBpbnN0YW5jZW9mIFBhcmVuc1xuICAgICAgICAgICAgICAgIGVsZW1lbnRzLnB1c2ggbm9kZVxuICAgICAgICAgICAgICAgIHJldHVybiBub1xuICAgICAgICAgICAgcmV0dXJuIHllc1xuXG4gICAgICAgIGZyYWdtZW50cyA9IFtdXG4gICAgICAgIGZyYWdtZW50cy5wdXNoIEBtYWtlQ29kZSAnYCdcbiAgICAgICAgZm9yIGVsZW1lbnQgaW4gZWxlbWVudHNcbiAgICAgICAgICAgIGlmIGVsZW1lbnQgaW5zdGFuY2VvZiBTdHJpbmdMaXRlcmFsXG4gICAgICAgICAgICAgICAgdmFsdWUgPSBlbGVtZW50LnZhbHVlWzEuLi4tMV1cbiAgICAgICAgICAgICAgICAjIEJhY2t0aWNrcyBhbmQgYCR7YCBpbnNpZGUgdGVtcGxhdGUgbGl0ZXJhbHMgbXVzdCBiZSBlc2NhcGVkLlxuICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZSAvKFxcXFwqKShgfFxcJFxceykvZywgKG1hdGNoLCBiYWNrc2xhc2hlcywgdG9CZUVzY2FwZWQpIC0+XG4gICAgICAgICAgICAgICAgICAgIGlmIGJhY2tzbGFzaGVzLmxlbmd0aCAlIDIgaXMgMFxuICAgICAgICAgICAgICAgICAgICAgICAgXCIje2JhY2tzbGFzaGVzfVxcXFwje3RvQmVFc2NhcGVkfVwiXG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoXG4gICAgICAgICAgICAgICAgZnJhZ21lbnRzLnB1c2ggQG1ha2VDb2RlIHZhbHVlXG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgZnJhZ21lbnRzLnB1c2ggQG1ha2VDb2RlICckeydcbiAgICAgICAgICAgICAgICBmcmFnbWVudHMucHVzaCBlbGVtZW50LmNvbXBpbGVUb0ZyYWdtZW50cyhvLCBMRVZFTF9QQVJFTikuLi5cbiAgICAgICAgICAgICAgICBmcmFnbWVudHMucHVzaCBAbWFrZUNvZGUgJ30nXG4gICAgICAgIGZyYWdtZW50cy5wdXNoIEBtYWtlQ29kZSAnYCdcblxuICAgICAgICBmcmFnbWVudHNcblxuIyAwMDAwMDAwMCAgIDAwMDAwMDAgICAwMDAwMDAwMCAgIFxuIyAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIFxuIyAwMDAwMDAgICAgMDAwICAgMDAwICAwMDAwMDAwICAgIFxuIyAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIFxuIyAwMDAgICAgICAgIDAwMDAwMDAgICAwMDAgICAwMDAgIFxuXG4jIFJlcGxhY2VtZW50IGZvciB0aGUgKmZvciogbG9vcCBpcyBvdXIgYXJyYXkgYW5kIG9iamVjdFxuIyBjb21wcmVoZW5zaW9ucywgdGhhdCBjb21waWxlIGludG8gKmZvciogbG9vcHMgaGVyZS4gVGhleSBhbHNvIGFjdCBhcyBhblxuIyBleHByZXNzaW9uLCBhYmxlIHRvIHJldHVybiB0aGUgcmVzdWx0IG9mIGVhY2ggZmlsdGVyZWQgaXRlcmF0aW9uLlxuI1xuIyBVbmxpa2UgUHl0aG9uIGFycmF5IGNvbXByZWhlbnNpb25zLCB0aGV5IGNhbiBiZSBtdWx0aS1saW5lLCBhbmQgeW91IGNhbiBwYXNzXG4jIHRoZSBjdXJyZW50IGluZGV4IG9mIHRoZSBsb29wIGFzIGEgc2Vjb25kIHBhcmFtZXRlci4gVW5saWtlIFJ1YnkgYmxvY2tzLFxuIyB5b3UgY2FuIG1hcCBhbmQgZmlsdGVyIGluIGEgc2luZ2xlIHBhc3MuXG5cbmV4cG9ydHMuRm9yID0gY2xhc3MgRm9yIGV4dGVuZHMgV2hpbGVcbiAgICBjb25zdHJ1Y3RvcjogKGJvZHksIHNvdXJjZSkgLT5cbiAgICAgICAge0Bzb3VyY2UsIEBndWFyZCwgQHN0ZXAsIEBuYW1lLCBAaW5kZXh9ID0gc291cmNlXG4gICAgICAgIEBib2R5ICAgPSBCbG9jay53cmFwIFtib2R5XVxuICAgICAgICBAb3duICAgID0gISFzb3VyY2Uub3duXG4gICAgICAgIEBvYmplY3QgPSAhIXNvdXJjZS5vYmplY3RcbiAgICAgICAgQGZyb20gICA9ICEhc291cmNlLmZyb21cbiAgICAgICAgQGluZGV4LmVycm9yICdjYW5ub3QgdXNlIGluZGV4IHdpdGggZm9yLWZyb20nIGlmIEBmcm9tIGFuZCBAaW5kZXhcbiAgICAgICAgc291cmNlLm93blRhZy5lcnJvciBcImNhbm5vdCB1c2Ugb3duIHdpdGggZm9yLSN7aWYgQGZyb20gdGhlbiAnZnJvbScgZWxzZSAnaW4nfVwiIGlmIEBvd24gYW5kIG5vdCBAb2JqZWN0XG4gICAgICAgIFtAbmFtZSwgQGluZGV4XSA9IFtAaW5kZXgsIEBuYW1lXSBpZiBAb2JqZWN0XG4gICAgICAgIEBpbmRleC5lcnJvciAnaW5kZXggY2Fubm90IGJlIGEgcGF0dGVybiBtYXRjaGluZyBleHByZXNzaW9uJyBpZiBAaW5kZXggaW5zdGFuY2VvZiBWYWx1ZSBhbmQgbm90IEBpbmRleC5pc0Fzc2lnbmFibGUoKVxuICAgICAgICBAcmFuZ2UgICA9IEBzb3VyY2UgaW5zdGFuY2VvZiBWYWx1ZSBhbmQgQHNvdXJjZS5iYXNlIGluc3RhbmNlb2YgUmFuZ2UgYW5kIG5vdCBAc291cmNlLnByb3BlcnRpZXMubGVuZ3RoIGFuZCBub3QgQGZyb21cbiAgICAgICAgQHBhdHRlcm4gPSBAbmFtZSBpbnN0YW5jZW9mIFZhbHVlXG4gICAgICAgIEBpbmRleC5lcnJvciAnaW5kZXhlcyBkbyBub3QgYXBwbHkgdG8gcmFuZ2UgbG9vcHMnIGlmIEByYW5nZSBhbmQgQGluZGV4XG4gICAgICAgIEBuYW1lLmVycm9yICdjYW5ub3QgcGF0dGVybiBtYXRjaCBvdmVyIHJhbmdlIGxvb3BzJyBpZiBAcmFuZ2UgYW5kIEBwYXR0ZXJuXG4gICAgICAgIEByZXR1cm5zID0gZmFsc2VcblxuICAgIGNoaWxkcmVuOiBbJ2JvZHknLCAnc291cmNlJywgJ2d1YXJkJywgJ3N0ZXAnXVxuXG4gICAgIyBXZWxjb21lIHRvIHRoZSBoYWlyaWVzdCBtZXRob2QgaW4gYWxsIG9mIEtvZmZlZS4gSGFuZGxlcyB0aGUgaW5uZXJcbiAgICAjIGxvb3AsIGZpbHRlcmluZywgc3RlcHBpbmcsIGFuZCByZXN1bHQgc2F2aW5nIGZvciBhcnJheSwgb2JqZWN0LCBhbmQgcmFuZ2VcbiAgICAjIGNvbXByZWhlbnNpb25zLiBTb21lIG9mIHRoZSBnZW5lcmF0ZWQgY29kZSBjYW4gYmUgc2hhcmVkIGluIGNvbW1vbiwgYW5kXG4gICAgIyBzb21lIGNhbm5vdC5cbiAgICBjb21waWxlTm9kZTogKG8pIC0+XG4gICAgICAgIGJvZHkgICAgICAgID0gQmxvY2sud3JhcCBbQGJvZHldXG4gICAgICAgIFsuLi4sIGxhc3RdID0gYm9keS5leHByZXNzaW9uc1xuICAgICAgICBAcmV0dXJucyAgICA9IG5vIGlmIGxhc3Q/Lmp1bXBzKCkgaW5zdGFuY2VvZiBSZXR1cm5cbiAgICAgICAgc291cmNlICAgICAgPSBpZiBAcmFuZ2UgdGhlbiBAc291cmNlLmJhc2UgZWxzZSBAc291cmNlXG4gICAgICAgIHNjb3BlICAgICAgID0gby5zY29wZVxuICAgICAgICBuYW1lICAgICAgICA9IEBuYW1lICBhbmQgKEBuYW1lLmNvbXBpbGUgbywgTEVWRUxfTElTVCkgaWYgbm90IEBwYXR0ZXJuXG4gICAgICAgIGluZGV4ICAgICAgID0gQGluZGV4IGFuZCAoQGluZGV4LmNvbXBpbGUgbywgTEVWRUxfTElTVClcbiAgICAgICAgc2NvcGUuZmluZChuYW1lKSAgaWYgbmFtZSBhbmQgbm90IEBwYXR0ZXJuXG4gICAgICAgIHNjb3BlLmZpbmQoaW5kZXgpIGlmIGluZGV4IGFuZCBAaW5kZXggbm90IGluc3RhbmNlb2YgVmFsdWVcbiAgICAgICAgcnZhciA9IHNjb3BlLmZyZWVWYXJpYWJsZSAncmVzdWx0cycgaWYgQHJldHVybnNcbiAgICAgICAgaWYgQGZyb21cbiAgICAgICAgICAgIGl2YXIgPSBzY29wZS5mcmVlVmFyaWFibGUgJ3gnLCBzaW5nbGU6IHRydWUgaWYgQHBhdHRlcm5cbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgaXZhciA9IChAb2JqZWN0IGFuZCBpbmRleCkgb3Igc2NvcGUuZnJlZVZhcmlhYmxlICdpJywgc2luZ2xlOiB0cnVlXG4gICAgICAgIGt2YXIgPSAoKEByYW5nZSBvciBAZnJvbSkgYW5kIG5hbWUpIG9yIGluZGV4IG9yIGl2YXJcbiAgICAgICAga3ZhckFzc2lnbiAgPSBpZiBrdmFyICE9IGl2YXIgdGhlbiBcIiN7a3Zhcn0gPSBcIiBlbHNlIFwiXCJcbiAgICAgICAgaWYgQHN0ZXAgYW5kIG5vdCBAcmFuZ2VcbiAgICAgICAgICAgIFtzdGVwLCBzdGVwVmFyXSA9IEBjYWNoZVRvQ29kZUZyYWdtZW50cyBAc3RlcC5jYWNoZSBvLCBMRVZFTF9MSVNULCBpc0NvbXBsZXhPckFzc2lnbmFibGVcbiAgICAgICAgICAgIHN0ZXBOdW0gPSBOdW1iZXIgc3RlcFZhciBpZiBAc3RlcC5pc051bWJlcigpXG4gICAgICAgIG5hbWUgICAgICA9IGl2YXIgaWYgQHBhdHRlcm5cbiAgICAgICAgdmFyUGFydCAgID0gJydcbiAgICAgICAgZ3VhcmRQYXJ0ID0gJydcbiAgICAgICAgZGVmUGFydCAgID0gJydcbiAgICAgICAgaWR0MSAgICAgID0gQHRhYiArIFRBQlxuICAgICAgICBpZiBAcmFuZ2VcbiAgICAgICAgICAgIGZvclBhcnRGcmFnbWVudHMgPSBzb3VyY2UuY29tcGlsZVRvRnJhZ21lbnRzIG1lcmdlIG8sXG4gICAgICAgICAgICAgICAge2luZGV4OiBpdmFyLCBuYW1lLCBAc3RlcCwgaXNDb21wbGV4OiBpc0NvbXBsZXhPckFzc2lnbmFibGV9XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHN2YXIgPSBAc291cmNlLmNvbXBpbGUgbywgTEVWRUxfTElTVFxuICAgICAgICAgICAgaWYgKG5hbWUgb3IgQG93bikgYW5kIEBzb3VyY2UudW53cmFwKCkgbm90IGluc3RhbmNlb2YgSWRlbnRpZmllckxpdGVyYWxcbiAgICAgICAgICAgICAgICBkZWZQYXJ0ICs9IFwiI3tAdGFifSN7cmVmID0gc2NvcGUuZnJlZVZhcmlhYmxlICdyZWYnfSA9ICN7c3Zhcn07XFxuXCJcbiAgICAgICAgICAgICAgICBzdmFyID0gcmVmXG4gICAgICAgICAgICBpZiBuYW1lIGFuZCBub3QgQHBhdHRlcm4gYW5kIG5vdCBAZnJvbVxuICAgICAgICAgICAgICAgIG5hbWVQYXJ0ID0gXCIje25hbWV9ID0gI3tzdmFyfVsje2t2YXJ9XVwiXG4gICAgICAgICAgICBpZiBub3QgQG9iamVjdCBhbmQgbm90IEBmcm9tXG4gICAgICAgICAgICAgICAgZGVmUGFydCArPSBcIiN7QHRhYn0je3N0ZXB9O1xcblwiIGlmIHN0ZXAgIT0gc3RlcFZhclxuICAgICAgICAgICAgICAgIGRvd24gPSBzdGVwTnVtIDwgMFxuICAgICAgICAgICAgICAgIGx2YXIgPSBzY29wZS5mcmVlVmFyaWFibGUgJ2xlbicgdW5sZXNzIEBzdGVwIGFuZCBzdGVwTnVtPyBhbmQgZG93blxuICAgICAgICAgICAgICAgIGRlY2xhcmUgPSBcIiN7a3ZhckFzc2lnbn0je2l2YXJ9ID0gMCwgI3tsdmFyfSA9ICN7c3Zhcn0ubGVuZ3RoXCJcbiAgICAgICAgICAgICAgICBkZWNsYXJlRG93biA9IFwiI3trdmFyQXNzaWdufSN7aXZhcn0gPSAje3N2YXJ9Lmxlbmd0aCAtIDFcIlxuICAgICAgICAgICAgICAgIGNvbXBhcmUgPSBcIiN7aXZhcn0gPCAje2x2YXJ9XCJcbiAgICAgICAgICAgICAgICBjb21wYXJlRG93biA9IFwiI3tpdmFyfSA+PSAwXCJcbiAgICAgICAgICAgICAgICBpZiBAc3RlcFxuICAgICAgICAgICAgICAgICAgICBpZiBzdGVwTnVtP1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgZG93blxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBhcmUgPSBjb21wYXJlRG93blxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlY2xhcmUgPSBkZWNsYXJlRG93blxuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wYXJlID0gXCIje3N0ZXBWYXJ9ID4gMCA/ICN7Y29tcGFyZX0gOiAje2NvbXBhcmVEb3dufVwiXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWNsYXJlID0gXCIoI3tzdGVwVmFyfSA+IDAgPyAoI3tkZWNsYXJlfSkgOiAje2RlY2xhcmVEb3dufSlcIlxuICAgICAgICAgICAgICAgICAgICBpbmNyZW1lbnQgPSBcIiN7aXZhcn0gKz0gI3tzdGVwVmFyfVwiXG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBpbmNyZW1lbnQgPSBcIiN7aWYga3ZhciAhPSBpdmFyIHRoZW4gXCIrKyN7aXZhcn1cIiBlbHNlIFwiI3tpdmFyfSsrXCJ9XCJcbiAgICAgICAgICAgICAgICBmb3JQYXJ0RnJhZ21lbnRzID0gW0BtYWtlQ29kZShcIiN7ZGVjbGFyZX07ICN7Y29tcGFyZX07ICN7a3ZhckFzc2lnbn0je2luY3JlbWVudH1cIildXG4gICAgICAgIGlmIEByZXR1cm5zXG4gICAgICAgICAgICByZXN1bHRQYXJ0ICAgPSBcIiN7QHRhYn0je3J2YXJ9ID0gW107XFxuXCJcbiAgICAgICAgICAgIHJldHVyblJlc3VsdCA9IFwiXFxuI3tAdGFifXJldHVybiAje3J2YXJ9O1wiXG4gICAgICAgICAgICBib2R5Lm1ha2VSZXR1cm4gcnZhclxuICAgICAgICBpZiBAZ3VhcmRcbiAgICAgICAgICAgIGlmIGJvZHkuZXhwcmVzc2lvbnMubGVuZ3RoID4gMVxuICAgICAgICAgICAgICAgIGJvZHkuZXhwcmVzc2lvbnMudW5zaGlmdCBuZXcgSWYgKG5ldyBQYXJlbnMgQGd1YXJkKS5pbnZlcnQoKSwgbmV3IFN0YXRlbWVudExpdGVyYWwgXCJjb250aW51ZVwiXG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgYm9keSA9IEJsb2NrLndyYXAgW25ldyBJZiBAZ3VhcmQsIGJvZHldIGlmIEBndWFyZFxuICAgICAgICBpZiBAcGF0dGVyblxuICAgICAgICAgICAgYm9keS5leHByZXNzaW9ucy51bnNoaWZ0IG5ldyBBc3NpZ24gQG5hbWUsIGlmIEBmcm9tIHRoZW4gbmV3IElkZW50aWZpZXJMaXRlcmFsIGt2YXIgZWxzZSBuZXcgTGl0ZXJhbCBcIiN7c3Zhcn1bI3trdmFyfV1cIlxuICAgICAgICBkZWZQYXJ0RnJhZ21lbnRzID0gW10uY29uY2F0IEBtYWtlQ29kZShkZWZQYXJ0KSwgQHBsdWNrRGlyZWN0Q2FsbChvLCBib2R5KVxuICAgICAgICB2YXJQYXJ0ID0gXCJcXG4je2lkdDF9I3tuYW1lUGFydH07XCIgaWYgbmFtZVBhcnRcbiAgICAgICAgaWYgQG9iamVjdFxuICAgICAgICAgICAgZm9yUGFydEZyYWdtZW50cyA9IFtAbWFrZUNvZGUoXCIje2t2YXJ9IGluICN7c3Zhcn1cIildXG4gICAgICAgICAgICBndWFyZFBhcnQgPSBcIlxcbiN7aWR0MX1pZiAoISN7dXRpbGl0eSAnaGFzUHJvcCcsIG99LmNhbGwoI3tzdmFyfSwgI3trdmFyfSkpIGNvbnRpbnVlO1wiIGlmIEBvd25cbiAgICAgICAgZWxzZSBpZiBAZnJvbVxuICAgICAgICAgICAgZm9yUGFydEZyYWdtZW50cyA9IFtAbWFrZUNvZGUoXCIje2t2YXJ9IG9mICN7c3Zhcn1cIildXG4gICAgICAgIGJvZHlGcmFnbWVudHMgPSBib2R5LmNvbXBpbGVUb0ZyYWdtZW50cyBtZXJnZShvLCBpbmRlbnQ6IGlkdDEpLCBMRVZFTF9UT1BcbiAgICAgICAgaWYgYm9keUZyYWdtZW50cyBhbmQgYm9keUZyYWdtZW50cy5sZW5ndGggPiAwXG4gICAgICAgICAgICBib2R5RnJhZ21lbnRzID0gW10uY29uY2F0IEBtYWtlQ29kZShcIlxcblwiKSwgYm9keUZyYWdtZW50cywgQG1ha2VDb2RlKFwiXFxuXCIpXG4gICAgICAgIFtdLmNvbmNhdCBkZWZQYXJ0RnJhZ21lbnRzLCBAbWFrZUNvZGUoXCIje3Jlc3VsdFBhcnQgb3IgJyd9I3tAdGFifWZvciAoXCIpLFxuICAgICAgICAgICAgZm9yUGFydEZyYWdtZW50cywgQG1ha2VDb2RlKFwiKSB7I3tndWFyZFBhcnR9I3t2YXJQYXJ0fVwiKSwgYm9keUZyYWdtZW50cyxcbiAgICAgICAgICAgIEBtYWtlQ29kZShcIiN7QHRhYn19I3tyZXR1cm5SZXN1bHQgb3IgJyd9XCIpXG5cbiAgICBwbHVja0RpcmVjdENhbGw6IChvLCBib2R5KSAtPlxuICAgICAgICBkZWZzID0gW11cbiAgICAgICAgZm9yIGV4cHIsIGlkeCBpbiBib2R5LmV4cHJlc3Npb25zXG4gICAgICAgICAgICBleHByID0gZXhwci51bndyYXBBbGwoKVxuICAgICAgICAgICAgY29udGludWUgdW5sZXNzIGV4cHIgaW5zdGFuY2VvZiBDYWxsXG4gICAgICAgICAgICB2YWwgPSBleHByLnZhcmlhYmxlPy51bndyYXBBbGwoKVxuICAgICAgICAgICAgY29udGludWUgdW5sZXNzICh2YWwgaW5zdGFuY2VvZiBDb2RlKSBvclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAodmFsIGluc3RhbmNlb2YgVmFsdWUgYW5kXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbC5iYXNlPy51bndyYXBBbGwoKSBpbnN0YW5jZW9mIENvZGUgYW5kXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbC5wcm9wZXJ0aWVzLmxlbmd0aCBpcyAxIGFuZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWwucHJvcGVydGllc1swXS5uYW1lPy52YWx1ZSBpbiBbJ2NhbGwnLCAnYXBwbHknXSlcbiAgICAgICAgICAgIGZuICAgICAgPSB2YWwuYmFzZT8udW53cmFwQWxsKCkgb3IgdmFsXG4gICAgICAgICAgICByZWYgICAgID0gbmV3IElkZW50aWZpZXJMaXRlcmFsIG8uc2NvcGUuZnJlZVZhcmlhYmxlICdmbidcbiAgICAgICAgICAgIGJhc2UgICAgPSBuZXcgVmFsdWUgcmVmXG4gICAgICAgICAgICBpZiB2YWwuYmFzZVxuICAgICAgICAgICAgICAgIFt2YWwuYmFzZSwgYmFzZV0gPSBbYmFzZSwgdmFsXVxuICAgICAgICAgICAgYm9keS5leHByZXNzaW9uc1tpZHhdID0gbmV3IENhbGwgYmFzZSwgZXhwci5hcmdzXG4gICAgICAgICAgICBkZWZzID0gZGVmcy5jb25jYXQgQG1ha2VDb2RlKEB0YWIpLCAobmV3IEFzc2lnbihyZWYsIGZuKS5jb21waWxlVG9GcmFnbWVudHMobywgTEVWRUxfVE9QKSksIEBtYWtlQ29kZSgnO1xcbicpXG4gICAgICAgIGRlZnNcblxuIyAgMDAwMDAwMCAgMDAwICAgMDAwICAwMDAgIDAwMDAwMDAwMCAgIDAwMDAwMDAgIDAwMCAgIDAwMCAgXG4jIDAwMCAgICAgICAwMDAgMCAwMDAgIDAwMCAgICAgMDAwICAgICAwMDAgICAgICAgMDAwICAgMDAwICBcbiMgMDAwMDAwMCAgIDAwMDAwMDAwMCAgMDAwICAgICAwMDAgICAgIDAwMCAgICAgICAwMDAwMDAwMDAgIFxuIyAgICAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAgIDAwMCAgICAgMDAwICAgICAgIDAwMCAgIDAwMCAgXG4jIDAwMDAwMDAgICAwMCAgICAgMDAgIDAwMCAgICAgMDAwICAgICAgMDAwMDAwMCAgMDAwICAgMDAwICBcblxuIyBBIEphdmFTY3JpcHQgKnN3aXRjaCogc3RhdGVtZW50LiBDb252ZXJ0cyBpbnRvIGEgcmV0dXJuYWJsZSBleHByZXNzaW9uIG9uLWRlbWFuZC5cblxuZXhwb3J0cy5Td2l0Y2ggPSBjbGFzcyBTd2l0Y2ggZXh0ZW5kcyBCYXNlXG4gICAgY29uc3RydWN0b3I6IChAc3ViamVjdCwgQGNhc2VzLCBAb3RoZXJ3aXNlKSAtPlxuXG4gICAgY2hpbGRyZW46IFsnc3ViamVjdCcsICdjYXNlcycsICdvdGhlcndpc2UnXVxuXG4gICAgaXNTdGF0ZW1lbnQ6IFlFU1xuXG4gICAganVtcHM6IChvID0ge2Jsb2NrOiB5ZXN9KSAtPlxuICAgICAgICBmb3IgW2NvbmRzLCBibG9ja10gaW4gQGNhc2VzXG4gICAgICAgICAgICByZXR1cm4ganVtcE5vZGUgaWYganVtcE5vZGUgPSBibG9jay5qdW1wcyBvXG4gICAgICAgIEBvdGhlcndpc2U/Lmp1bXBzIG9cblxuICAgIG1ha2VSZXR1cm46IChyZXMpIC0+XG4gICAgICAgIHBhaXJbMV0ubWFrZVJldHVybiByZXMgZm9yIHBhaXIgaW4gQGNhc2VzXG4gICAgICAgIEBvdGhlcndpc2Ugb3I9IG5ldyBCbG9jayBbbmV3IExpdGVyYWwgJ3ZvaWQgMCddIGlmIHJlc1xuICAgICAgICBAb3RoZXJ3aXNlPy5tYWtlUmV0dXJuIHJlc1xuICAgICAgICB0aGlzXG5cbiAgICBjb21waWxlTm9kZTogKG8pIC0+XG4gICAgICAgIGlkdDEgPSBvLmluZGVudCArIFRBQlxuICAgICAgICBpZHQyID0gby5pbmRlbnQgPSBpZHQxICsgVEFCXG4gICAgICAgIGZyYWdtZW50cyA9IFtdLmNvbmNhdCBAbWFrZUNvZGUoQHRhYiArIFwic3dpdGNoIChcIiksXG4gICAgICAgICAgICAoaWYgQHN1YmplY3QgdGhlbiBAc3ViamVjdC5jb21waWxlVG9GcmFnbWVudHMobywgTEVWRUxfUEFSRU4pIGVsc2UgQG1ha2VDb2RlIFwiZmFsc2VcIiksXG4gICAgICAgICAgICBAbWFrZUNvZGUoXCIpIHtcXG5cIilcbiAgICAgICAgZm9yIFtjb25kaXRpb25zLCBibG9ja10sIGkgaW4gQGNhc2VzXG4gICAgICAgICAgICBmb3IgY29uZCBpbiBmbGF0dGVuIFtjb25kaXRpb25zXVxuICAgICAgICAgICAgICAgIGNvbmQgICAgPSBjb25kLmludmVydCgpIHVubGVzcyBAc3ViamVjdFxuICAgICAgICAgICAgICAgIGZyYWdtZW50cyA9IGZyYWdtZW50cy5jb25jYXQgQG1ha2VDb2RlKGlkdDEgKyBcImNhc2UgXCIpLCBjb25kLmNvbXBpbGVUb0ZyYWdtZW50cyhvLCBMRVZFTF9QQVJFTiksIEBtYWtlQ29kZShcIjpcXG5cIilcbiAgICAgICAgICAgIGZyYWdtZW50cyA9IGZyYWdtZW50cy5jb25jYXQgYm9keSwgQG1ha2VDb2RlKCdcXG4nKSBpZiAoYm9keSA9IGJsb2NrLmNvbXBpbGVUb0ZyYWdtZW50cyBvLCBMRVZFTF9UT1ApLmxlbmd0aCA+IDBcbiAgICAgICAgICAgIGJyZWFrIGlmIGkgaXMgQGNhc2VzLmxlbmd0aCAtIDEgYW5kIG5vdCBAb3RoZXJ3aXNlXG4gICAgICAgICAgICBleHByID0gQGxhc3ROb25Db21tZW50IGJsb2NrLmV4cHJlc3Npb25zXG4gICAgICAgICAgICBjb250aW51ZSBpZiBleHByIGluc3RhbmNlb2YgUmV0dXJuIG9yIChleHByIGluc3RhbmNlb2YgTGl0ZXJhbCBhbmQgZXhwci5qdW1wcygpIGFuZCBleHByLnZhbHVlICE9ICdkZWJ1Z2dlcicpXG4gICAgICAgICAgICBmcmFnbWVudHMucHVzaCBjb25kLm1ha2VDb2RlKGlkdDIgKyAnYnJlYWs7XFxuJylcbiAgICAgICAgaWYgQG90aGVyd2lzZSBhbmQgQG90aGVyd2lzZS5leHByZXNzaW9ucy5sZW5ndGhcbiAgICAgICAgICAgIGZyYWdtZW50cy5wdXNoIEBtYWtlQ29kZShpZHQxICsgXCJkZWZhdWx0OlxcblwiKSwgKEBvdGhlcndpc2UuY29tcGlsZVRvRnJhZ21lbnRzIG8sIExFVkVMX1RPUCkuLi4sIEBtYWtlQ29kZShcIlxcblwiKVxuICAgICAgICBmcmFnbWVudHMucHVzaCBAbWFrZUNvZGUgQHRhYiArICd9J1xuICAgICAgICBmcmFnbWVudHNcblxuIyAwMDAgIDAwMDAwMDAwICBcbiMgMDAwICAwMDAgICAgICAgXG4jIDAwMCAgMDAwMDAwICAgIFxuIyAwMDAgIDAwMCAgICAgICBcbiMgMDAwICAwMDAgICAgICAgXG5cbiMgKklmL2Vsc2UqIHN0YXRlbWVudHMuIEFjdHMgYXMgYW4gZXhwcmVzc2lvbiBieSBwdXNoaW5nIGRvd24gcmVxdWVzdGVkIHJldHVybnMgdG8gdGhlIGxhc3QgbGluZSBvZiBlYWNoIGNsYXVzZS5cbiNcbiMgU2luZ2xlLWV4cHJlc3Npb24gKipJZnMqKiBhcmUgY29tcGlsZWQgaW50byBjb25kaXRpb25hbCBvcGVyYXRvcnMgaWYgcG9zc2libGUsXG4jIGJlY2F1c2UgdGVybmFyaWVzIGFyZSBhbHJlYWR5IHByb3BlciBleHByZXNzaW9ucywgYW5kIGRvbid0IG5lZWQgY29udmVyc2lvbi5cblxuZXhwb3J0cy5JZiA9IGNsYXNzIElmIGV4dGVuZHMgQmFzZVxuICAgIFxuICAgIGNvbnN0cnVjdG9yOiAoY29uZGl0aW9uLCBAYm9keSwgb3B0aW9ucyA9IHt9KSAtPlxuICAgICAgICBAY29uZGl0aW9uID0gaWYgb3B0aW9ucy50eXBlIGlzICd1bmxlc3MnIHRoZW4gY29uZGl0aW9uLmludmVydCgpIGVsc2UgY29uZGl0aW9uXG4gICAgICAgIEBlbHNlQm9keSAgICA9IG51bGxcbiAgICAgICAgQGlzQ2hhaW4gICAgID0gZmFsc2VcbiAgICAgICAge0Bzb2FrfSAgICAgID0gb3B0aW9uc1xuXG4gICAgY2hpbGRyZW46IFsnY29uZGl0aW9uJywgJ2JvZHknLCAnZWxzZUJvZHknXVxuXG4gICAgYm9keU5vZGU6ICAgICAgICAgICAtPiBAYm9keT8udW53cmFwKClcbiAgICBlbHNlQm9keU5vZGU6IC0+IEBlbHNlQm9keT8udW53cmFwKClcblxuICAgICMgUmV3cml0ZSBhIGNoYWluIG9mICoqSWZzKiogdG8gYWRkIGEgZGVmYXVsdCBjYXNlIGFzIHRoZSBmaW5hbCAqZWxzZSouXG4gICAgXG4gICAgYWRkRWxzZTogKGVsc2VCb2R5KSAtPlxuICAgICAgICBpZiBAaXNDaGFpblxuICAgICAgICAgICAgQGVsc2VCb2R5Tm9kZSgpLmFkZEVsc2UgZWxzZUJvZHlcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgQGlzQ2hhaW4gICAgPSBlbHNlQm9keSBpbnN0YW5jZW9mIElmXG4gICAgICAgICAgICBAZWxzZUJvZHkgPSBAZW5zdXJlQmxvY2sgZWxzZUJvZHlcbiAgICAgICAgICAgIEBlbHNlQm9keS51cGRhdGVMb2NhdGlvbkRhdGFJZk1pc3NpbmcgZWxzZUJvZHkubG9jYXRpb25EYXRhXG4gICAgICAgIHRoaXNcblxuICAgICMgVGhlICoqSWYqKiBvbmx5IGNvbXBpbGVzIGludG8gYSBzdGF0ZW1lbnQgaWYgZWl0aGVyIG9mIGl0cyBib2RpZXMgbmVlZHNcbiAgICAjIHRvIGJlIGEgc3RhdGVtZW50LiBPdGhlcndpc2UgYSBjb25kaXRpb25hbCBvcGVyYXRvciBpcyBzYWZlLlxuICAgIFxuICAgIGlzU3RhdGVtZW50OiAobykgLT5cbiAgICAgICAgbz8ubGV2ZWwgaXMgTEVWRUxfVE9QIG9yXG4gICAgICAgICAgICBAYm9keU5vZGUoKS5pc1N0YXRlbWVudChvKSBvciBAZWxzZUJvZHlOb2RlKCk/LmlzU3RhdGVtZW50KG8pXG5cbiAgICBqdW1wczogKG8pIC0+IEBib2R5Lmp1bXBzKG8pIG9yIEBlbHNlQm9keT8uanVtcHMobylcblxuICAgIGNvbXBpbGVOb2RlOiAobykgLT5cbiAgICAgICAgaWYgQGlzU3RhdGVtZW50IG8gdGhlbiBAY29tcGlsZVN0YXRlbWVudCBvIGVsc2UgQGNvbXBpbGVFeHByZXNzaW9uIG9cblxuICAgIG1ha2VSZXR1cm46IChyZXMpIC0+XG4gICAgICAgIEBlbHNlQm9keSAgICBvcj0gbmV3IEJsb2NrIFtuZXcgTGl0ZXJhbCAndm9pZCAwJ10gaWYgcmVzXG4gICAgICAgIEBib2R5ICAgICAgICAgICBhbmQ9IG5ldyBCbG9jayBbQGJvZHkubWFrZVJldHVybiByZXNdXG4gICAgICAgIEBlbHNlQm9keSBhbmQ9IG5ldyBCbG9jayBbQGVsc2VCb2R5Lm1ha2VSZXR1cm4gcmVzXVxuICAgICAgICB0aGlzXG5cbiAgICBlbnN1cmVCbG9jazogKG5vZGUpIC0+XG4gICAgICAgIGlmIG5vZGUgaW5zdGFuY2VvZiBCbG9jayB0aGVuIG5vZGUgZWxzZSBuZXcgQmxvY2sgW25vZGVdXG5cbiAgICAjIENvbXBpbGUgdGhlIGBJZmAgYXMgYSByZWd1bGFyICppZi1lbHNlKiBzdGF0ZW1lbnQuIEZsYXR0ZW5lZCBjaGFpbnMgZm9yY2UgaW5uZXIgKmVsc2UqIGJvZGllcyBpbnRvIHN0YXRlbWVudCBmb3JtLlxuICAgIGNvbXBpbGVTdGF0ZW1lbnQ6IChvKSAtPlxuICAgICAgICBjaGlsZCAgICAgICAgPSBkZWwgbywgJ2NoYWluQ2hpbGQnXG4gICAgICAgIGV4ZXEgICAgICAgICA9IGRlbCBvLCAnaXNFeGlzdGVudGlhbEVxdWFscydcblxuICAgICAgICBpZiBleGVxXG4gICAgICAgICAgICByZXR1cm4gbmV3IElmKEBjb25kaXRpb24uaW52ZXJ0KCksIEBlbHNlQm9keU5vZGUoKSwgdHlwZTogJ2lmJykuY29tcGlsZVRvRnJhZ21lbnRzIG9cblxuICAgICAgICBpbmRlbnQgICA9IG8uaW5kZW50ICsgVEFCXG4gICAgICAgIGNvbmQgICAgICAgICA9IEBjb25kaXRpb24uY29tcGlsZVRvRnJhZ21lbnRzIG8sIExFVkVMX1BBUkVOXG4gICAgICAgIGJvZHkgICAgICAgICA9IEBlbnN1cmVCbG9jayhAYm9keSkuY29tcGlsZVRvRnJhZ21lbnRzIG1lcmdlIG8sIHtpbmRlbnR9XG4gICAgICAgIGlmUGFydCAgID0gW10uY29uY2F0IEBtYWtlQ29kZShcImlmIChcIiksIGNvbmQsIEBtYWtlQ29kZShcIikge1xcblwiKSwgYm9keSwgQG1ha2VDb2RlKFwiXFxuI3tAdGFifX1cIilcbiAgICAgICAgaWZQYXJ0LnVuc2hpZnQgQG1ha2VDb2RlIEB0YWIgdW5sZXNzIGNoaWxkXG4gICAgICAgIHJldHVybiBpZlBhcnQgdW5sZXNzIEBlbHNlQm9keVxuICAgICAgICBhbnN3ZXIgPSBpZlBhcnQuY29uY2F0IEBtYWtlQ29kZSgnIGVsc2UgJylcbiAgICAgICAgaWYgQGlzQ2hhaW5cbiAgICAgICAgICAgIG8uY2hhaW5DaGlsZCA9IHllc1xuICAgICAgICAgICAgYW5zd2VyID0gYW5zd2VyLmNvbmNhdCBAZWxzZUJvZHkudW53cmFwKCkuY29tcGlsZVRvRnJhZ21lbnRzIG8sIExFVkVMX1RPUFxuICAgICAgICBlbHNlXG4gICAgICAgICAgICBhbnN3ZXIgPSBhbnN3ZXIuY29uY2F0IEBtYWtlQ29kZShcIntcXG5cIiksIEBlbHNlQm9keS5jb21waWxlVG9GcmFnbWVudHMobWVyZ2Uobywge2luZGVudH0pLCBMRVZFTF9UT1ApLCBAbWFrZUNvZGUoXCJcXG4je0B0YWJ9fVwiKVxuICAgICAgICBhbnN3ZXJcblxuICAgICMgQ29tcGlsZSB0aGUgYElmYCBhcyBhIGNvbmRpdGlvbmFsIG9wZXJhdG9yLlxuICAgIGNvbXBpbGVFeHByZXNzaW9uOiAobykgLT5cbiAgICAgICAgY29uZCA9IEBjb25kaXRpb24uY29tcGlsZVRvRnJhZ21lbnRzIG8sIExFVkVMX0NPTkRcbiAgICAgICAgYm9keSA9IEBib2R5Tm9kZSgpLmNvbXBpbGVUb0ZyYWdtZW50cyBvLCBMRVZFTF9MSVNUXG4gICAgICAgIGFsdCAgPSBpZiBAZWxzZUJvZHlOb2RlKCkgdGhlbiBAZWxzZUJvZHlOb2RlKCkuY29tcGlsZVRvRnJhZ21lbnRzKG8sIExFVkVMX0xJU1QpIGVsc2UgW0BtYWtlQ29kZSgndm9pZCAwJyldXG4gICAgICAgIGZyYWdtZW50cyA9IGNvbmQuY29uY2F0IEBtYWtlQ29kZShcIiA/IFwiKSwgYm9keSwgQG1ha2VDb2RlKFwiIDogXCIpLCBhbHRcbiAgICAgICAgaWYgby5sZXZlbCA+PSBMRVZFTF9DT05EIHRoZW4gQHdyYXBJbkJyYWNlcyBmcmFnbWVudHMgZWxzZSBmcmFnbWVudHNcblxuICAgIHVuZm9sZFNvYWs6IC0+XG4gICAgICAgIEBzb2FrIGFuZCB0aGlzXG5cbiMgIDAwMDAwMDAgICAwMDAwMDAwICAgMDAwICAgMDAwICAgMDAwMDAwMCAgMDAwMDAwMDAwICAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgMDAwMDAwMDAwICAgMDAwMDAwMCAgXG4jIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMDAgIDAwMCAgMDAwICAgICAgICAgIDAwMCAgICAgMDAwICAgMDAwICAwMDAwICAwMDAgICAgIDAwMCAgICAgMDAwICAgICAgIFxuIyAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgMCAwMDAgIDAwMDAwMDAgICAgICAwMDAgICAgIDAwMDAwMDAwMCAgMDAwIDAgMDAwICAgICAwMDAgICAgIDAwMDAwMDAgICBcbiMgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAwMDAwICAgICAgIDAwMCAgICAgMDAwICAgICAwMDAgICAwMDAgIDAwMCAgMDAwMCAgICAgMDAwICAgICAgICAgIDAwMCAgXG4jICAwMDAwMDAwICAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgICAgIDAwMCAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgICAgIDAwMCAgICAgMDAwMDAwMCAgIFxuXG5VVElMSVRJRVMgPVxuXG4gICAgIyBDb3JyZWN0bHkgc2V0IHVwIGEgcHJvdG90eXBlIGNoYWluIGZvciBpbmhlcml0YW5jZSwgaW5jbHVkaW5nIGEgcmVmZXJlbmNlXG4gICAgIyB0byB0aGUgc3VwZXJjbGFzcyBmb3IgYHN1cGVyKClgIGNhbGxzLCBhbmQgY29waWVzIG9mIGFueSBzdGF0aWMgcHJvcGVydGllcy5cbiAgICAgICAgXG4gICAgZXh0ZW5kOiAobykgLT4gXCJcbiAgICAgICAgZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkge1xuICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIHBhcmVudCkge1xuICAgICAgICAgICAgICAgIGlmICgje3V0aWxpdHkgJ2hhc1Byb3AnLCBvfS5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gY3RvcigpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7XG4gICAgICAgICAgICBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpO1xuICAgICAgICAgICAgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTtcbiAgICAgICAgICAgIHJldHVybiBjaGlsZDtcbiAgICAgICAgfVxuICAgIFwiXG5cbiAgICAjIENyZWF0ZSBhIGZ1bmN0aW9uIGJvdW5kIHRvIHRoZSBjdXJyZW50IHZhbHVlIG9mIFwidGhpc1wiLlxuICAgIGJpbmQ6IC0+ICdcbiAgICAgICAgZnVuY3Rpb24oZm4sIG1lKXtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIHJldHVybiBmbi5hcHBseShtZSwgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAnXG5cbiAgICAjIERpc2NvdmVyIGlmIGFuIGl0ZW0gaXMgaW4gYW4gYXJyYXkuXG4gICAgaW5kZXhPZjogLT4gXCJcbiAgICAgICAgW10uaW5kZXhPZiB8fCBmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IHRoaXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGkgaW4gdGhpcyAmJiB0aGlzW2ldID09PSBpdGVtKSByZXR1cm4gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfVxuICAgIFwiXG5cbiAgICBtb2R1bG86IC0+IFwiXCJcIlxuICAgICAgICBmdW5jdGlvbihhLCBiKSB7IHJldHVybiAoK2EgJSAoYiA9ICtiKSArIGIpICUgYjsgfVxuICAgIFwiXCJcIlxuXG4gICAgIyBTaG9ydGN1dHMgdG8gc3BlZWQgdXAgdGhlIGxvb2t1cCB0aW1lIGZvciBuYXRpdmUgZnVuY3Rpb25zLlxuICAgIGhhc1Byb3A6IC0+ICd7fS5oYXNPd25Qcm9wZXJ0eSdcbiAgICBzbGljZTogLT4gJ1tdLnNsaWNlJ1xuXG4jIExldmVscyBpbmRpY2F0ZSBhIG5vZGUncyBwb3NpdGlvbiBpbiB0aGUgQVNULiBVc2VmdWwgZm9yIGtub3dpbmcgaWZcbiMgcGFyZW5zIGFyZSBuZWNlc3Nhcnkgb3Igc3VwZXJmbHVvdXMuXG5MRVZFTF9UT1AgICAgPSAxICAgICMgLi4uO1xuTEVWRUxfUEFSRU4gID0gMiAgICAjICguLi4pXG5MRVZFTF9MSVNUICAgPSAzICAgICMgWy4uLl1cbkxFVkVMX0NPTkQgICA9IDQgICAgIyAuLi4gPyB4IDogeVxuTEVWRUxfT1AgICAgID0gNSAgICAjICEuLi5cbkxFVkVMX0FDQ0VTUyA9IDYgICAgIyAuLi5bMF1cblxuVEFCID0gJyAgICAnICMgVGFicyBhcmUgNCBzcGFjZXMgZm9yIHByZXR0eSBwcmludGluZy5cblxuU0lNUExFTlVNID0gL15bKy1dP1xcZCskL1xuXG4jIDAwMCAgIDAwMCAgMDAwMDAwMDAgIDAwMCAgICAgIDAwMDAwMDAwICAgMDAwMDAwMDAgIDAwMDAwMDAwICAgXG4jIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgICAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgIDAwMCAgXG4jIDAwMDAwMDAwMCAgMDAwMDAwMCAgIDAwMCAgICAgIDAwMDAwMDAwICAgMDAwMDAwMCAgIDAwMDAwMDAgICAgXG4jIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgICAgIDAwMCAgICAgICAgMDAwICAgICAgIDAwMCAgIDAwMCAgXG4jIDAwMCAgIDAwMCAgMDAwMDAwMDAgIDAwMDAwMDAgIDAwMCAgICAgICAgMDAwMDAwMDAgIDAwMCAgIDAwMCAgXG5cbiMgSGVscGVyIGZvciBlbnN1cmluZyB0aGF0IHV0aWxpdHkgZnVuY3Rpb25zIGFyZSBhc3NpZ25lZCBhdCB0aGUgdG9wIGxldmVsLlxuICAgIFxudXRpbGl0eSA9IChuYW1lLCBvKSAtPlxuICAgIHtyb290fSA9IG8uc2NvcGVcbiAgICBpZiBuYW1lIG9mIHJvb3QudXRpbGl0aWVzXG4gICAgICAgIHJvb3QudXRpbGl0aWVzW25hbWVdXG4gICAgZWxzZVxuICAgICAgICByZWYgPSByb290LmZyZWVWYXJpYWJsZSBuYW1lXG4gICAgICAgIHJvb3QuYXNzaWduIHJlZiwgVVRJTElUSUVTW25hbWVdIG9cbiAgICAgICAgcm9vdC51dGlsaXRpZXNbbmFtZV0gPSByZWZcblxubXVsdGlkZW50ID0gKGNvZGUsIHRhYikgLT5cbiAgICBjb2RlID0gY29kZS5yZXBsYWNlIC9cXG4vZywgJyQmJyArIHRhYlxuICAgIGNvZGUucmVwbGFjZSAvXFxzKyQvLCAnJ1xuXG5pc0xpdGVyYWxBcmd1bWVudHMgPSAobm9kZSkgLT5cbiAgICBub2RlIGluc3RhbmNlb2YgSWRlbnRpZmllckxpdGVyYWwgYW5kIG5vZGUudmFsdWUgaXMgJ2FyZ3VtZW50cydcblxuaXNMaXRlcmFsVGhpcyA9IChub2RlKSAtPlxuICAgIG5vZGUgaW5zdGFuY2VvZiBUaGlzTGl0ZXJhbCBvclxuICAgICAgICAobm9kZSBpbnN0YW5jZW9mIENvZGUgYW5kIG5vZGUuYm91bmQpIG9yXG4gICAgICAgIG5vZGUgaW5zdGFuY2VvZiBTdXBlckNhbGxcblxuaXNDb21wbGV4T3JBc3NpZ25hYmxlID0gKG5vZGUpIC0+IG5vZGUuaXNDb21wbGV4KCkgb3Igbm9kZS5pc0Fzc2lnbmFibGU/KClcblxuIyBVbmZvbGQgYSBub2RlJ3MgY2hpbGQgaWYgc29haywgdGhlbiB0dWNrIHRoZSBub2RlIHVuZGVyIGNyZWF0ZWQgYElmYFxudW5mb2xkU29hayA9IChvLCBwYXJlbnQsIG5hbWUpIC0+XG4gICAgcmV0dXJuIHVubGVzcyBpZm4gPSBwYXJlbnRbbmFtZV0udW5mb2xkU29hayBvXG4gICAgcGFyZW50W25hbWVdID0gaWZuLmJvZHlcbiAgICBpZm4uYm9keSA9IG5ldyBWYWx1ZSBwYXJlbnRcbiAgICBpZm5cbiJdfQ==
//# sourceURL=nodes.coffee