require('../../lib/helpers').initTest() if not global.test

test "named function parameters", ->
    
    (({a:x=666, b:y=777}) ->
        eq x, 1
        eq y, 777
    ) a:1
    
    (({a:a=666, b:b=777}) ->
        eq a, 666
        eq b, 2
    ) b:2

    (({a:a, b:b=777}) ->
        eq a, undefined
        eq b, 3
    ) b:3

    (({a:a, b:b=777}) ->
        eq a, undefined
        eq b, 777
    ) c:4
    
    (({a:a, b:b}) ->
        eq a, undefined
        eq b, 3
    ) b:3
    
test "named method parameters", ->
    
    class A
        @: ({a:a = 666, b:b = 777}) ->
            @a = a
            @b = b

    a = new A {}
    eq a.a, 666
    eq a.b, 777
            
    a = new A a:4
    eq a.a, 4
    eq a.b, 777
    
    a = new A b:5
    eq a.a, 666
    eq a.b, 5

    a = new A c:6
    eq a.a, 666
    eq a.b, 777
    
test "named method parameters assigned to this", ->
    
    class A
        @: ({a:@a = 666, b:@b = 777}) ->
    
    a = new A {}
    eq a.a, 666
    eq a.b, 777
            
    a = new A a:4
    eq a.a, 4
    eq a.b, 777
    
    a = new A b:5
    eq a.a, 666
    eq a.b, 5
    
    a = new A c:6
    eq a.a, 666
    eq a.b, 777

#  0000000   000   000   0000000   000  0000000    
# 000   000  000   000  000   000  000  000   000  
# 000000000   000 000   000   000  000  000   000  
# 000   000     000     000   000  000  000   000  
# 000   000      0       0000000   000  0000000    

test "named method parameters get overridden in base", ->
    
    # the behavior of CS1 we want to avoid!

    class B
        @: ({a:@a = 555, b:@b = 777}) ->
        
    class A extends B
        @: ({a:@a = 666, c:@c = 888}) -> super
        
    a = new A {}
    eq a.a, 555 # this should be 666
    eq a.b, 777
    eq a.c, 888
            
    a = new A a:4
    eq a.a, 4
    eq a.b, 777
    eq a.c, 888
    
    a = new A b:5
    eq a.a, 555 # this should be 666
    eq a.b, 5
    eq a.c, 888
    
    a = new A c:6
    eq a.a, 555 # this should be 666
    eq a.b, 777
    eq a.c, 6
    
#  0000000    0000000  000   000  000  00000000  000   000  00000000  
# 000   000  000       000   000  000  000       000   000  000       
# 000000000  000       000000000  000  0000000    000 000   0000000   
# 000   000  000       000   000  000  000          000     000       
# 000   000   0000000  000   000  000  00000000      0      00000000  

test "config parameters don't get overridden in base", ->

    # the behavior we want to achieve, implemented in plain CS1

    class B
        @: ({a:@a = 555, b:@b = 777}) ->

    class A1 extends B
        @: ({a:a = 666, c:c = 888}) -> 
            arguments[0] = _.defaults {a:a, c:c}, arguments[0]
            super 
    
    a = new A1 {}
    eq a.a, 666
    eq a.b, 777
            
    a = new A1 a:4
    eq a.a, 4
    eq a.b, 777
    
    a = new A1 b:5
    eq a.a, 666
    eq a.b, 5
    
    a = new A1 c:6
    eq a.a, 666
    eq a.b, 777
            
    class A2 extends B
        @: ({a:@a = 666, c:@c = 888}) -> 
            arguments[0] = _.defaults {a:@a, c:@c}, arguments[0]
            super 
    
    a = new A2 {}
    eq a.a, 666
    eq a.b, 777
    eq a.c, 888
            
    a = new A2 a:4
    eq a.a, 4
    eq a.b, 777
    eq a.c, 888
    
    a = new A2 b:5
    eq a.a, 666
    eq a.b, 5
    eq a.c, 888
    
    a = new A2 c:6
    eq a.a, 666
    eq a.b, 777
    eq a.c, 6

# 0000000     0000000   000   000  000  000000000        00     00   0000000   0000000    000  00000000  000   000  
# 000   000  000   000  0000  000  000     000           000   000  000   000  000   000  000  000        000 000   
# 000   000  000   000  000 0 000          000           000000000  000   000  000   000  000  000000      00000    
# 000   000  000   000  000  0000          000           000 0 000  000   000  000   000  000  000          000     
# 0000000     0000000   000   000          000           000   000   0000000   0000000    000  000          000     

test "config parameters don't modify argument", ->

    # make sure that the passed config dictionary doesn't get modified

    class B
        @: ({a:@a = 555, b:@b = 777}) ->

    class A extends B
        @: ({a:@a = 666, c:@c = 888}) -> 
            arguments[0] = _.defaults {a:@a, c:@c}, arguments[0]
            super 
    
    d = a:1, b:2, c:3
    a = new A d
    eq a.a, 1
    eq a.b, 2
    eq a.c, 3
    deepEqual d, a:1, b:2, c:3

    d = a:1, c:3
    a = new A d
    eq a.a, 1
    eq a.b, 777
    eq a.c, 3
    deepEqual d, a:1, c:3

    d = a:null, c:3
    a = new A d
    eq a.a, 666
    eq a.b, 777
    eq a.c, 3
    deepEqual d, a:null, c:3

    d = {}
    a = new A d
    eq a.a, 666
    eq a.b, 777
    eq a.c, 888
    deepEqual d, {}
    
test "config parameters are available in base", ->

    class B
        @: ({a:@a = 555, b:@b = 777}) ->
            eq @a, 1
            eq @b, 777
            eq @c, 888

    class A extends B
        @: ({a:@a = 666, c:@c = 888}) -> 
            arguments[0] = _.defaults {a:@a, c:@c}, arguments[0]
            super 
    
    new A a:1

#  0000000  000   000   0000000   00000000   000000000   0000000  000   000  000000000  
# 000       000   000  000   000  000   000     000     000       000   000     000     
# 0000000   000000000  000   000  0000000       000     000       000   000     000     
#      000  000   000  000   000  000   000     000     000       000   000     000     
# 0000000   000   000   0000000   000   000     000      0000000   0000000      000     

test "config parameters shortcut", ->

    # instead of this ...
    # 
    # class A
    #       @: ({a: a=1, b: b=2 })           -> arguments[0] = _.defaults {a:a, b:b}, arguments[0] ...
    #       a: ({a:@a=1, b: b=2 })           -> arguments[0] = _.defaults {a:@a, b:b}, arguments[0] ...
    #       b: ({a:@a=1, b:@b=2 })           -> arguments[0] = _.defaults {a:@a, b:@b}, arguments[0] ...
    #       c: ({a: a=1, b:@b=2 })           -> arguments[0] = _.defaults {a:a, b:@b}, arguments[0] ...
    #       d: ({a: a=1, b: b=2 }, arg )     -> arguments[0] = _.defaults {a:a, b:b}, arguments[0] ...
    #       e: ({a: a=1, b: b=2 }, arg=1 )   -> arguments[0] = _.defaults {a:a, b:b}, arguments[0] ...
    #       f: ({a: a=1, b: b=2 }, arg=c:1 ) -> arguments[0] = _.defaults {a:a, b:b}, arguments[0] ...
    # 
    # ... it would be nice to just write ...
    #
    # class A
    #       @: (  a:1,  b:2 )          -> ...
    #       a: ( @a:1,  b:2 )          -> ...
    #       b: ( @a:1, @b:2 )          -> ...
    #       c: (  a:1, @b:2 )          -> ...
    #       d: (  a:1,  b:2, arg )     -> ...
    #       e: (  a:1,  b:2, arg=1 )   -> ...
    #       f: (  a:1,  b:2, arg=c:1 ) -> ...
    
    class A
        @: ( a:1, b:2 ) ->
            eq a, 1
            eq b, 2
    new A {}

    class A
        @: ( a:1, b:2 ) ->
            eq a, 3
            eq b, 2
    new A a:3

    class A
        @: ( a:1, b:2, arg ) ->
            eq a, 1
            eq b, 4
            eq arg, 'arg'
    new A {b:4}, 'arg'

    class A
        m: ( a:1, b:2, arg ) ->
            eq a, 1
            eq b, 4
            eq arg, 'arg'
    (new A).m {b:4}, 'arg'
    
    
    F = (a:1, b:2) ->
        eq a, 1
        eq b, 2
    F {}

    F = (a:1, b:2) ->
        eq a, 3
    F a:3

    F = (a:1, b:2, c, d=x:5,y:6) ->
        eq b, 3
        eq c, 4
        deepEqual d, x:5,y:6
    F b:3, 4
    
    ((a:1, b:2) ->
        eq a, 1
        eq b, 2
    ) {}

    ((a:1, b:2) ->
        eq a, 1
        eq b, 3
    ) b:3
    
# 0000000    00000000  00000000   0000000   000   000  000      000000000   0000000  
# 000   000  000       000       000   000  000   000  000         000     000       
# 000   000  0000000   000000    000000000  000   000  000         000     0000000   
# 000   000  000       000       000   000  000   000  000         000          000  
# 0000000    00000000  000       000   000   0000000   0000000     000     0000000   

test "config parameters defaults not overridden in base", ->

    # check if base constructors override parameters when called with super
    
    class B
        @: (@a : 555, @b : 777) ->
        
    class A extends B
        @: (@a : 666, @c : 888) -> super
        
    a = new A {}
    eq a.a, 666 
                
    a = new A b:5
    eq a.a, 666 
    
    a = new A c:6
    eq a.a, 666 
    
    a = new A a:4
    eq a.a, 4
    
test "config parameters no defaults", ->
    
    class B
        @: (@a:555, @b:777, @c:, @d:888, @e:undefined, @f:null, @g:null) ->
        
    class A extends B
        @: (@any:, @a:, @b:, @c:, @e:null, @f:undefined,@g:111) -> 
            @any ?= @a ? @b ? @c
            super
        
    a = new A {}
    eq a.any, null
    eq a.a, 555
    eq a.b, 777
    eq a.c, null
    eq a.d, 888
    eq a.e, undefined
    eq a.f, null
    eq a.g, 111

    a = new A b:1,c:2
    eq a.any, 1
    eq a.a, 555
    eq a.b, 1
    eq a.c, 2
    eq a.d, 888
    eq a.e, undefined

    a = new A a:1
    eq a.any, 1
    eq a.a, 1
    eq a.b, 777
    eq a.c, null
    eq a.d, 888
    eq a.e, undefined
            
# 00     00  000   0000000   0000000  
# 000   000  000  000       000       
# 000000000  000  0000000   000       
# 000 0 000  000       000  000       
# 000   000  000  0000000    0000000  
    
test "config parameters invalid", ->    

    throws -> Koffee.compile "(c, a:1, b:2) ->"
    throws -> Koffee.compile "F = (c, a:1, b:2) ->"
    throws -> Koffee.compile "(one, two, {three, four: five}, key:1) ->"
    throws -> Koffee.compile "
        class A
            @: ( arg, a:1, b:2 ) ->
        "
        
test "config parameters side effect", -> 

    # in CS1 these would have thrown compile errors ...

    doesNotThrow -> Koffee.compile "(a:a, b:b) ->"
    doesNotThrow -> Koffee.compile "(c, a:a, b:b) ->"
    doesNotThrow -> Koffee.compile "(c, a:a, d, b:b) ->"
    
test "CS1 test case #4130 ...", -> # original test desctivated in ../coffee/error_messages.coffee
    
    # in CS1 these would have thrown compile errors ...
    
    doesNotThrow -> Koffee.compile '''
        fun = ({
            @param : null
        }) ->
            console.log "Oh hello!"
    '''
    doesNotThrow -> Koffee.compile '({a: null}) ->'
    doesNotThrow -> Koffee.compile '({a: 1}) ->'
    
    # ... these cases still don't work: ...
    
    throws -> Koffee.compile '({a: true = 1}) ->'
    throws -> Koffee.compile '({1}) ->'
    
    