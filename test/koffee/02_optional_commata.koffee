require('../../js/helpers').initTest() if not global.test

compile = (s) -> r = Koffee.compile s, bare:true; r

test "optional commata", ->

    check = (c,p) -> 
        js = compile(c)
        if -1 == js.indexOf p
            eq js, p

    check "a = [ 1 2 3 ]", "a = [1, 2, 3];" 
    check "a = { a:1 b:2 }", """ 
        a = {
            a: 1,
            b: 2
        };"""
    check "a = a:1 b:2", """
        a = {
            a: 1,
            b: 2
        };"""
    check "a = ( a, b=1 c=2 ) ->",  "a = function(a, b, c)"
    check "a = ( a:1 b:2 ) ->",     "a = function(arg)"
    check "a = ['a' 'b' 'c']",      "a = ['a', 'b', 'c']"
    check "a = ['a''b''c']",        "a = ['a', 'b', 'c']"
    check 'log "#{a+1}", "#{a}"',   'log("" + (a + 1), "" + a)'
    check 'log "#{a+1}" "#{a}"',    'log("" + (a + 1), "" + a)'
    check 'log "hello" 1 "world"',  'log("hello", 1, "world")'
    check 'log 1 2 3',              'log(1, 2, 3)'
    check "a = [1 2 - 3 x 4 + 5 'a' b 'c']", "a = [1, 2 - 3, x(4 + 5, 'a', b('c'))];"
    
    check "a = { a:{a:1}, b:{b:2} }", """
        a = {
            a: {
                a: 1
            },
            b: {
                b: 2
            }
        };"""  
        
    check "a = { a:{a:1} b:{b:2} }", """
        a = {
            a: {
                a: 1
            },
            b: {
                b: 2
            }
        };"""    

    check "a = [ {a:1} {b:2} ]", """
        a = [
            {
                a: 1
            }, {
                b: 2
            }
        ];"""    

    check "a = [ {a:1 b:2} ]", """
        a = [
            {
                a: 1,
                b: 2
            }
        ];"""
        
    check "undefined", "void 0"
    check "a = ['a' 1 2.3 null undefined true false yes no on off]", "a = ['a', 1, 2.3, null, void 0, true, false, true, false, true, false]"
        
    check """
        switch a
            when 1 2 3 then
            when 'a' 'b' 'c' then
        ""","""
        switch (a) {
            case 1:
            case 2:
            case 3:
                break;
            case 'a':
            case 'b':
            case 'c':
        }"""

    check "describe 'test' ->", "describe('test', function() {});"
        
    throws -> compile "[[][]]"
    check "a = [ [] [] ]", "a = [[], []];"
    check "a = [[] []]", "a = [[], []];"
    check "a = [[[[[] []] [[] []]]]]", "a = [[[[[], []], [[], []]]]];"
    check "a = [ [1 2] [3 '4'] ]", "a = [[1, 2], [3, '4']];"
    check "a = [ [a:2] [b:'4'] [c:[]] ]", """
        a = [
            [
                {
                    a: 2
                }
            ], [
                {
                    b: '4'
                }
            ], [
                {
                    c: []
                }
            ]
        ];"""    
        
    check "a.on 'b' c", "a.on('b', c);" 
    check "@c", "this.c" 
    check "a.on 'b', @c", "a.on('b', this.c);" 
    check "a.on 'b' @c", "a.on('b', this.c);" 
    
assertErrorFormat = (code, expectedErrorFormat) ->
    
    throws (-> Koffee.run code, feature:color:false), (err) ->
        eq "#{err}", expectedErrorFormat
        yes

test "stuff that doesn't work", ->
    
    assertErrorFormat "a = 'a' 'b'", '''
        SyntaxError: :1:7
        a = 'a' 'b'
              ▲ unexpected ,
    '''

    assertErrorFormat "a = 1 2", '''
        SyntaxError: :1:5
        a = 1 2
            ▲ unexpected ,
    '''

    assertErrorFormat 'a = "#{1}" 2', '''
        SyntaxError: :1:10
        a = "#{1}" 2
                 ▲ unexpected ,
    '''
    
test "CS1 tests from error_messages", ->
    
    assertErrorFormat "1''", '''
        SyntaxError: :1:1
        1''
        ▲ unexpected ,
    '''
    assertErrorFormat '1""', '''
        SyntaxError: :1:1
        1""
        ▲ unexpected ,
    '''
    assertErrorFormat "1'b'", '''
        SyntaxError: :1:1
        1'b'
        ▲ unexpected ,
    '''
    assertErrorFormat '1"b"', '''
        SyntaxError: :1:1
        1"b"
        ▲ unexpected ,
    '''
    assertErrorFormat "1'''b'''", """
        SyntaxError: :1:1
        1'''b'''
        ▲ unexpected ,
    """
    assertErrorFormat '1"""b"""', '''
        SyntaxError: :1:1
        1"""b"""
        ▲ unexpected ,
    '''
    assertErrorFormat '1"#{b}"', '''
        SyntaxError: :1:1
        1"#{b}"
        ▲ unexpected ,
    '''
    assertErrorFormat '1"""#{b}"""', '''
        SyntaxError: :1:1
        1"""#{b}"""
        ▲ unexpected ,
    '''
    assertErrorFormat '"a"0x00Af2', '''
        SyntaxError: :1:3
        "a"0x00Af2
          ▲ unexpected ,
    '''
    
    assertErrorFormat '''
        'foo'bar
    ''', '''
        SyntaxError: :1:5
        'foo'bar
            ▲ unexpected ,
    '''
    assertErrorFormat '''
        "foo"bar
    ''', '''
        SyntaxError: :1:5
        "foo"bar
            ▲ unexpected ,
    '''
    
    