require('../../lib/helpers').initTest() if not global.test

test "method names", ->
    
    class A
        @: -> @name='A'
        @new: -> 'class'
        new: -> 'instance'
        A: -> 'constructor'
            
    a = new A
    eq a.name,  'A'
    eq A.new(), 'class'
    eq a.new(), 'instance'
    eq a.A(),   'constructor'
    
    eq A.constructor.name, 'Function'
    eq A.new.name, ''
    eq a.new.name, ''
    eq a.A.name,   ''
        
test "default arguments", ->
    
    class A
        @: (@a='A', @b, @c='C') ->
            
    a = new A 1, 2, 3
    eq a.a, 1
    eq a.b, 2
    eq a.c, 3

    a = new A 1, 2
    eq a.a, 1
    eq a.b, 2
    eq a.c, 'C'

    a = new A 1
    eq a.a, 1
    eq a.b, undefined
    eq a.c, 'C'

    a = new A
    eq a.a, 'A'
    eq a.b, undefined
    eq a.c, 'C'

    class B
        @: (@a='A', @b='B', @c) ->
    
    class C extends B
        @: (@a='Ab', @b, @c='Cb') ->
            super # C.__super__.constructor.apply(this, arguments)
            
    c = new C
    eq c.a, 'A'
    
    class D extends B
        @: (@a='Ab', @b, @c='Cb') ->
            super @a, @b, @c # D.__super__.constructor.call(this, this.a, this.b, this.c)

    d = new D
    eq d.a, 'Ab'
    
test "interesting 1", ->
    
    a = 'hello'
    b = 123
    c = [2.3,{}]
    o = {a,b,c}
    
    deepEqual o, a:'hello', b:123, c:[2.3,{}]
    
    A = 'hello'
    B = 'world'
    o = {B,A}
    
    eq o.A, 'hello'
    eq o.B, 'world'
    eq o.C, undefined
    
    {A, B, C} = {B:'hello',A:123}
    eq A, 123
    eq B, 'hello'
    eq C, undefined
    
test "hierarchy", ->    

    class A
        @: (arg) ->
            @prop = 'A-' + arg

    class B extends A
        @: (arg) ->
            super 'B-' + arg

    class C extends B
        @: ->
            super 'C'

    eq (new C).prop, 'A-B-C'
    

test "@param defaults and super", ->    

    class C
        @: (@arg=1) ->
            eq @arg,1

    class B extends C
        @: (@arg=2) ->
            eq @arg,2
            super 
            eq @arg,1

    class A extends B
        @: (@arg=3) ->
            eq @arg,3
            super 
            eq @arg,1

    new A

    class C
        @: (@arg=1) ->
            eq @arg,3

    class B extends C
        @: (@arg=2) ->
            eq @arg,3
            super @arg 
            eq @arg,3

    class A extends B
        @: (@arg=3) ->
            eq @arg,3
            super @arg
            eq @arg,3

    new A

    class C
        @: (arg=1) ->
            @p = arg

    class B extends C
        @: (arg=2) ->
            super

    class A extends B
        @: (arg=3) ->
            super

    eq (new A).p, 1
    