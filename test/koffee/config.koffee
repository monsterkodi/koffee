require('../../lib/helpers').initTest() if not global.test

(@a:[123], @d:{a:1,b:2,c:3}, @e:3) -> 

# (a:'x', b:'x') ->
# (a:1, b:1) ->

# (_,a)->
# throws -> Koffee.compile "(_,_)->"
# (a:null,b:null) ->
# class B
    # @: (@a : 555, @b : 777) ->
#     
# class A extends B
    # @a = 1
    # @c: () -> super
    # @: (a: 666, @b:777) -> super
    # b: ->
#     
# a = new A {}
# eq a.a, 666

# f = -> 
# if f class:'bla'
    # log 'bla'

# +++ Block Block { # nodes.Class.walkBody traverseChildren
#   expressions:
#    [ Value { base: [Obj], properties: [], locationData: [Object] } ],
#   locationData:
#    { first_line: 6, first_column: 4, last_line: 6, last_column: 35 },
#   classBody: true }

# if child == Block
    # for node in child.expressions
                
# --- Value Value {
#   base:
#    Obj {
#      generated: true,
#      properties: [ [Assign] ],
#      objects: [ [Assign] ],
#      locationData:
#       { first_line: 6, first_column: 4, last_line: 6, last_column: 35 } },
#   properties: [],
#   locationData:
#    { first_line: 6, first_column: 4, last_line: 6, last_column: 35 } }

# addProperties
#    while assign

# >>> Code Code {
#   params:
#    [ Param {
#        name: [Obj],
#        value: undefined,
#        splat: undefined,
#        locationData: [Object] } ],
#   body:
#    Block {
#      expressions: [ [SuperCall] ],
#      locationData:
#       { first_line: 6, first_column: 31, last_line: 6, last_column: 35 } },
#   bound: false,
#   isGenerator: false,
#   locationData:
#    { first_line: 6, first_column: 7, last_line: 6, last_column: 35 } }

# exp.params[0].name

# $$$ Obj {
#   generated: true,
#   properties:
#    [ Assign {
#        variable: [Value],
#        value: [Assign],
#        context: 'object',
#        param: undefined,
#        subpattern: undefined,
#        operatorToken: [Literal],
#        moduleDeclaration: undefined,
#        locationData: [Object] },
#      Assign {
#        variable: [Value],
#        value: [Assign],
#        context: 'object',
#        param: undefined,
#        subpattern: undefined,
#        operatorToken: [Literal],
#        moduleDeclaration: undefined,
#        locationData: [Object] } ],
#   objects:
#    [ Assign {
#        variable: [Value],
#        value: [Assign],
#        context: 'object',
#        param: undefined,
#        subpattern: undefined,
#        operatorToken: [Literal],
#        moduleDeclaration: undefined,
#        locationData: [Object] },
#      Assign {
#        variable: [Value],
#        value: [Assign],
#        context: 'object',
#        param: undefined,
#        subpattern: undefined,
#        operatorToken: [Literal],
#        moduleDeclaration: undefined,
#        locationData: [Object] } ],
#   locationData:
#    { first_line: 6, first_column: 9, last_line: 6, last_column: 25 } }
# Call.compileSplat! [ CodeFragment {
#     code: 'arguments',
#     locationData:
#      { first_line: 6, first_column: 31, last_line: 6, last_column: 35 },
#     type: 'IdentifierLiteral' } ]